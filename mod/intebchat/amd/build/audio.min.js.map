{"version":3,"file":"audio.min.js","sources":["../src/audio.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Audio recording utilities with WhatsApp-style interface and confirmation\r\n *\r\n * @module     mod_intebchat/audio\r\n * @copyright  2024 Eduardo Kraus\r\n * @copyright  2025 Enhanced by Alonso Arias\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\ndefine(['jquery', 'core/str', 'core/modal_factory', 'core/modal_events'], \r\n    function ($, Str, ModalFactory, ModalEvents) {\r\n    return {\r\n        init: function (mode) {\r\n            let chunks = [];\r\n            let mediaRecorder = null;\r\n            let audioMode = mode || 'text';\r\n            let stream = null;\r\n            let recordingStartTime = null;\r\n            let timerInterval = null;\r\n            let audioBlob = null;\r\n            let audioUrl = null;\r\n            let wasCancelled = false;\r\n\r\n            // Load strings\r\n            var strings = {};\r\n            Str.get_strings([\r\n                {key: 'recordaudio', component: 'mod_intebchat'},\r\n                {key: 'stoprecording', component: 'mod_intebchat'},\r\n                {key: 'cancel', component: 'mod_intebchat'},\r\n                {key: 'send', component: 'mod_intebchat'},\r\n                {key: 'audiorecorded', component: 'mod_intebchat'},\r\n                {key: 'confirmaudiosend', component: 'mod_intebchat'},\r\n                {key: 'playaudio', component: 'mod_intebchat'},\r\n                {key: 'rerecord', component: 'mod_intebchat'}\r\n            ]).then(function(results) {\r\n                strings.recordaudio = results[0];\r\n                strings.stoprecording = results[1];\r\n                strings.cancel = results[2];\r\n                strings.send = results[3] || 'Send';\r\n                strings.audiorecorded = results[4] || 'Audio Recorded';\r\n                strings.confirmaudiosend = results[5] || 'Do you want to send this audio?';\r\n                strings.playaudio = results[6] || 'Play Audio';\r\n                strings.rerecord = results[7] || 'Re-record';\r\n            });\r\n\r\n            /**\r\n             * Create recording overlay if not exists\r\n             */\r\n            function createRecordingOverlay() {\r\n                if ($('#recording-overlay').length === 0) {\r\n                    var overlayHtml = `\r\n                        <div id=\"recording-overlay\" class=\"recording-overlay\">\r\n                            <div class=\"recording-container\">\r\n                                <div class=\"recording-timer\">00:00</div>\r\n                                <div class=\"recording-label\">${strings.recordaudio || 'Recording...'}</div>\r\n                                <div class=\"recording-wave\">\r\n                                    <div class=\"wave-bar\"></div>\r\n                                    <div class=\"wave-bar\"></div>\r\n                                    <div class=\"wave-bar\"></div>\r\n                                    <div class=\"wave-bar\"></div>\r\n                                    <div class=\"wave-bar\"></div>\r\n                                </div>\r\n                                <div class=\"recording-controls\">\r\n                                    <button class=\"btn btn-cancel\" id=\"cancel-recording\">\r\n                                        <i class=\"fa fa-times\"></i>\r\n                                    </button>\r\n                                    <button class=\"btn btn-stop\" id=\"stop-recording\">\r\n                                        <i class=\"fa fa-stop\"></i>\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    `;\r\n                    $('body').append(overlayHtml);\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Show audio confirmation modal\r\n             */\r\n            function showAudioConfirmation(audioDataUrl) {\r\n                // Create audio preview element\r\n                var audioPreviewHtml = `\r\n                    <div class=\"audio-confirmation-content\">\r\n                        <p>${strings.confirmaudiosend}</p>\r\n                        <audio controls src=\"${audioUrl}\" style=\"width: 100%; margin: 20px 0;\"></audio>\r\n                        <div class=\"audio-duration\" style=\"text-align: center; color: #666;\">\r\n                            Duration: ${formatDuration(recordingStartTime ? Math.floor((Date.now() - recordingStartTime) / 1000) : 0)}\r\n                        </div>\r\n                    </div>\r\n                `;\r\n\r\n                ModalFactory.create({\r\n                    type: ModalFactory.types.SAVE_CANCEL,\r\n                    title: strings.audiorecorded,\r\n                    body: audioPreviewHtml,\r\n                    buttons: {\r\n                        save: strings.send,\r\n                        cancel: strings.rerecord\r\n                    }\r\n                }).then(function(modal) {\r\n                    modal.show();\r\n\r\n                    // Handle send button\r\n                    modal.getRoot().on(ModalEvents.save, function(e) {\r\n                        e.preventDefault();\r\n                        // Set the audio data and trigger the send\r\n                        $('#intebchat-recorded-audio').val(audioDataUrl);\r\n                        if (audioMode === 'audio' || audioMode === 'both') {\r\n                            setTimeout(function () {\r\n                                $('#intebchat-icon-stop').trigger('audio-ready');\r\n                            }, 100);\r\n                        }\r\n                        modal.destroy();\r\n                    });\r\n\r\n                    // Handle re-record button\r\n                    modal.getRoot().on(ModalEvents.cancel, function(e) {\r\n                        e.preventDefault();\r\n                        // Clear the audio and allow re-recording\r\n                        reset();\r\n                        modal.destroy();\r\n                        // Optionally, start recording again immediately\r\n                        // startRecording();\r\n                    });\r\n\r\n                    // Clean up audio URL when modal is closed\r\n                    modal.getRoot().on(ModalEvents.hidden, function() {\r\n                        if (audioUrl) {\r\n                            URL.revokeObjectURL(audioUrl);\r\n                            audioUrl = null;\r\n                        }\r\n                    });\r\n\r\n                    return modal;\r\n                }).catch(function(error) {\r\n                    console.error('Error creating modal:', error);\r\n                    // Fallback to confirm dialog\r\n                    if (confirm(strings.confirmaudiosend)) {\r\n                        $('#intebchat-recorded-audio').val(audioDataUrl);\r\n                        if (audioMode === 'audio' || audioMode === 'both') {\r\n                            setTimeout(function () {\r\n                                $('#intebchat-icon-stop').trigger('audio-ready');\r\n                            }, 100);\r\n                        }\r\n                    } else {\r\n                        reset();\r\n                    }\r\n                });\r\n            }\r\n\r\n            /**\r\n             * Format duration in mm:ss\r\n             */\r\n            function formatDuration(seconds) {\r\n                var minutes = Math.floor(seconds / 60);\r\n                var secs = seconds % 60;\r\n                return (minutes < 10 ? '0' : '') + minutes + ':' + (secs < 10 ? '0' : '') + secs;\r\n            }\r\n\r\n            /**\r\n             * Update timer display\r\n             */\r\n            function updateTimer() {\r\n                if (!recordingStartTime) return;\r\n                \r\n                var elapsed = Math.floor((Date.now() - recordingStartTime) / 1000);\r\n                var display = formatDuration(elapsed);\r\n                \r\n                $('.recording-timer').text(display);\r\n            }\r\n\r\n            /**\r\n             * Start recording\r\n             */\r\n            function startRecording() {\r\n                reset();\r\n                wasCancelled = false; // Ensure flag is reset\r\n                \r\n                if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\r\n                    alert('Your browser does not support recording!');\r\n                    return;\r\n                }\r\n\r\n                navigator.mediaDevices.getUserMedia({ audio: true })\r\n                    .then(function (userStream) {\r\n                        stream = userStream;\r\n                        mediaRecorder = new MediaRecorder(stream);\r\n                        chunks = [];\r\n\r\n                        mediaRecorder.start();\r\n                        recordingStartTime = Date.now();\r\n                        \r\n                        // Show WhatsApp-style overlay\r\n                        createRecordingOverlay();\r\n                        $('#recording-overlay').addClass('active');\r\n                        \r\n                        // Start timer\r\n                        timerInterval = setInterval(updateTimer, 100);\r\n                        \r\n                        // Update button states\r\n                        $('#intebchat-icon-mic').addClass('recording').hide();\r\n                        $('#intebchat-icon-stop').show();\r\n\r\n                        mediaRecorder.ondataavailable = function (e) {\r\n                            if (e.data && e.data.size > 0) {\r\n                                chunks.push(e.data);\r\n                            }\r\n                        };\r\n\r\n                        mediaRecorder.onstop = function () {\r\n                            if (chunks.length > 0 && !wasCancelled) {\r\n                                audioBlob = new Blob(chunks, { type: 'audio/webm' });\r\n                                audioUrl = URL.createObjectURL(audioBlob);\r\n                                \r\n                                var reader = new FileReader();\r\n                                reader.readAsDataURL(audioBlob);\r\n                                reader.onloadend = function () {\r\n                                    if (reader.result) {\r\n                                        // Don't automatically send - show confirmation instead\r\n                                        // Unless it was cancelled\r\n                                        if (!wasCancelled) {\r\n                                            showAudioConfirmation(reader.result);\r\n                                        }\r\n                                    }\r\n                                };\r\n                            }\r\n                            chunks = [];\r\n                            if (stream) {\r\n                                stream.getTracks().forEach(track => track.stop());\r\n                                stream = null;\r\n                            }\r\n                            wasCancelled = false; // Reset the flag\r\n                        };\r\n\r\n                        mediaRecorder.onerror = function (e) {\r\n                            alert('Error during recording: ' + e.error);\r\n                            reset();\r\n                        };\r\n                    })\r\n                    .catch(function (err) {\r\n                        alert('Error accessing microphone: ' + err.message);\r\n                        reset();\r\n                    });\r\n            }\r\n\r\n            /**\r\n             * Stop recording (for confirmation)\r\n             */\r\n            function stopRecording() {\r\n                if (mediaRecorder && mediaRecorder.state !== 'inactive') {\r\n                    wasCancelled = false; // Not cancelled, will show confirmation\r\n                    mediaRecorder.stop();\r\n                    mediaRecorder = null;\r\n                }\r\n                \r\n                // Hide overlay\r\n                $('#recording-overlay').removeClass('active');\r\n                \r\n                // Clear timer\r\n                if (timerInterval) {\r\n                    clearInterval(timerInterval);\r\n                    timerInterval = null;\r\n                }\r\n                // Don't reset recordingStartTime yet - we need it for duration display\r\n                \r\n                // Reset button states\r\n                $('#intebchat-icon-mic').show().removeClass('recording');\r\n                $('#intebchat-icon-stop').hide();\r\n            }\r\n\r\n            /**\r\n             * Cancel recording (without confirmation)\r\n             */\r\n            function cancelRecording() {\r\n                if (mediaRecorder && mediaRecorder.state !== 'inactive') {\r\n                    wasCancelled = true; // Mark as cancelled before stopping\r\n                    mediaRecorder.stop();\r\n                    mediaRecorder = null;\r\n                }\r\n                \r\n                // Clear recorded data\r\n                $('#intebchat-recorded-audio').val('');\r\n                chunks = [];\r\n                \r\n                // Hide overlay\r\n                $('#recording-overlay').removeClass('active');\r\n                \r\n                // Clear timer\r\n                if (timerInterval) {\r\n                    clearInterval(timerInterval);\r\n                    timerInterval = null;\r\n                }\r\n                recordingStartTime = null;\r\n                \r\n                // Stop stream\r\n                if (stream) {\r\n                    stream.getTracks().forEach(track => track.stop());\r\n                    stream = null;\r\n                }\r\n                \r\n                // Clean up audio URL\r\n                if (audioUrl) {\r\n                    URL.revokeObjectURL(audioUrl);\r\n                    audioUrl = null;\r\n                }\r\n                \r\n                // Reset button states\r\n                $('#intebchat-icon-mic').show().removeClass('recording');\r\n                $('#intebchat-icon-stop').hide();\r\n            }\r\n\r\n            /**\r\n             * Reset recording state\r\n             */\r\n            function reset() {\r\n                $('#intebchat-icon-mic').removeClass('recording').show();\r\n                $('#intebchat-icon-stop').hide();\r\n                $('#intebchat-recorded-audio').val('');\r\n                $('#recording-overlay').removeClass('active');\r\n                \r\n                if (timerInterval) {\r\n                    clearInterval(timerInterval);\r\n                    timerInterval = null;\r\n                }\r\n                recordingStartTime = null;\r\n                \r\n                if (stream) {\r\n                    stream.getTracks().forEach(track => track.stop());\r\n                    stream = null;\r\n                }\r\n                \r\n                // Clean up audio URL\r\n                if (audioUrl) {\r\n                    URL.revokeObjectURL(audioUrl);\r\n                    audioUrl = null;\r\n                }\r\n                \r\n                audioBlob = null;\r\n                chunks = [];\r\n                wasCancelled = false; // Reset the flag\r\n            }\r\n\r\n            // Event handlers\r\n            $('#intebchat-icon-mic').on('click', function () {\r\n                startRecording();\r\n            });\r\n\r\n            $('#intebchat-icon-stop').on('click', function () {\r\n                stopRecording();\r\n            });\r\n\r\n            // Overlay controls\r\n            $(document).on('click', '#stop-recording', function () {\r\n                stopRecording();\r\n            });\r\n\r\n            $(document).on('click', '#cancel-recording', function () {\r\n                cancelRecording();\r\n            });\r\n\r\n            // Handle ESC key to cancel recording\r\n            $(document).on('keydown', function(e) {\r\n                if (e.keyCode === 27 && $('#recording-overlay').hasClass('active')) {\r\n                    cancelRecording();\r\n                }\r\n            });\r\n        }\r\n    };\r\n});"],"names":["define","$","Str","ModalFactory","ModalEvents","init","mode","chunks","mediaRecorder","audioMode","stream","recordingStartTime","timerInterval","audioBlob","audioUrl","wasCancelled","strings","formatDuration","seconds","minutes","Math","floor","secs","updateTimer","display","Date","now","text","startRecording","reset","navigator","mediaDevices","getUserMedia","audio","then","userStream","MediaRecorder","start","length","overlayHtml","recordaudio","append","createRecordingOverlay","addClass","setInterval","hide","show","ondataavailable","e","data","size","push","onstop","Blob","type","URL","createObjectURL","reader","FileReader","readAsDataURL","onloadend","audioDataUrl","audioPreviewHtml","result","confirmaudiosend","create","types","SAVE_CANCEL","title","audiorecorded","body","buttons","save","send","cancel","rerecord","modal","getRoot","on","preventDefault","val","setTimeout","trigger","destroy","hidden","revokeObjectURL","catch","error","console","confirm","getTracks","forEach","track","stop","onerror","alert","err","message","stopRecording","state","removeClass","clearInterval","cancelRecording","get_strings","key","component","results","stoprecording","playaudio","document","keyCode","hasClass"],"mappings":"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"}