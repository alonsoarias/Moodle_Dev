{"version":3,"file":"audio.min.js","sources":["../src/audio.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Audio recording utilities extracted from local_geniai plugin.\n *\n * @module     mod_intebchat/audio\n * @copyright  2024 Eduardo Kraus\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery'], function ($) {\n    return {\n        init: function (mode) {\n            var chunks = [];\n            var mediaRecorder = null;\n            var audioMode = mode || 'text';\n            var stream = null;\n\n            function reset() {\n                $('#intebchat-icon-mic').removeClass('recording').show();\n                $('#intebchat-icon-stop').hide();\n                $('#intebchat-recorded-audio').val('');\n                \n                // Detener el stream si existe\n                if (stream) {\n                    stream.getTracks().forEach(track => track.stop());\n                    stream = null;\n                }\n            }\n\n            $('#intebchat-icon-mic').on('click', function () {\n                reset();\n                if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n                    alert('Your browser does not support recording!');\n                    return;\n                }\n                \n                navigator.mediaDevices.getUserMedia({ audio: true })\n                    .then(function (userStream) {\n                        stream = userStream;\n                        \n                        // Usar el tipo MIME correcto segÃºn el navegador\n                        var mimeType = 'audio/webm';\n                        if (MediaRecorder.isTypeSupported('audio/webm')) {\n                            mimeType = 'audio/webm';\n                        } else if (MediaRecorder.isTypeSupported('audio/mp4')) {\n                            mimeType = 'audio/mp4';\n                        }\n                        \n                        mediaRecorder = new MediaRecorder(stream, { mimeType: mimeType });\n                        chunks = []; // Limpiar chunks anteriores\n                        \n                        mediaRecorder.start();\n                        $('#intebchat-icon-mic').addClass('recording').hide();\n                        $('#intebchat-icon-stop').show();\n                        \n                        mediaRecorder.ondataavailable = function (e) { \n                            if (e.data && e.data.size > 0) {\n                                chunks.push(e.data); \n                            }\n                        };\n                        \n                        mediaRecorder.onstop = function () {\n                            if (chunks.length > 0) {\n                                var blob = new Blob(chunks, { type: 'audio/webm' });\n                                var reader = new FileReader();\n                                reader.readAsDataURL(blob);\n                                reader.onloadend = function () {\n                                    if (reader.result) {\n                                        $('#intebchat-recorded-audio').val(reader.result);\n                                        \n                                        // Trigger auto send only for pure audio mode\n                                        if (audioMode === 'audio') {\n                                            // Dar tiempo para que el DOM se actualice\n                                            setTimeout(function() {\n                                                $('#intebchat-icon-stop').trigger('audio-ready');\n                                            }, 100);\n                                        }\n                                    }\n                                };\n                            }\n                            chunks = [];\n                            \n                            // Detener el stream\n                            if (stream) {\n                                stream.getTracks().forEach(track => track.stop());\n                                stream = null;\n                            }\n                        };\n                        \n                        mediaRecorder.onerror = function(e) {\n                            console.error('MediaRecorder error:', e);\n                            alert('Error during recording: ' + e.error);\n                            reset();\n                        };\n                    })\n                    .catch(function (err) {\n                        console.error('getUserMedia error:', err);\n                        alert('Error accessing microphone: ' + err.message);\n                        reset();\n                    });\n            });\n\n            $('#intebchat-icon-stop').on('click', function () {\n                if (mediaRecorder && mediaRecorder.state !== 'inactive') {\n                    mediaRecorder.stop();\n                    mediaRecorder = null;\n                }\n                $('#intebchat-icon-mic').show().removeClass('recording');\n                $('#intebchat-icon-stop').hide();\n            });\n        }\n    };\n});"],"names":["define","$","init","mode","chunks","mediaRecorder","audioMode","stream","reset","removeClass","show","hide","val","getTracks","forEach","track","stop","on","navigator","mediaDevices","getUserMedia","audio","then","userStream","mimeType","MediaRecorder","isTypeSupported","start","addClass","ondataavailable","e","data","size","push","onstop","length","blob","Blob","type","reader","FileReader","readAsDataURL","onloadend","result","setTimeout","trigger","onerror","console","error","alert","catch","err","message","state"],"mappings":";;;;;;;AAuBAA,6BAAO,CAAC,WAAW,SAAUC,SAClB,CACHC,KAAM,SAAUC,UACRC,OAAS,GACTC,cAAgB,KAChBC,UAAYH,MAAQ,OACpBI,OAAS,cAEJC,QACLP,EAAE,uBAAuBQ,YAAY,aAAaC,OAClDT,EAAE,wBAAwBU,OAC1BV,EAAE,6BAA6BW,IAAI,IAG/BL,SACAA,OAAOM,YAAYC,SAAQC,OAASA,MAAMC,SAC1CT,OAAS,MAIjBN,EAAE,uBAAuBgB,GAAG,SAAS,WACjCT,QACKU,UAAUC,cAAiBD,UAAUC,aAAaC,aAKvDF,UAAUC,aAAaC,aAAa,CAAEC,OAAO,IACxCC,MAAK,SAAUC,YACZhB,OAASgB,eAGLC,SAAW,aACXC,cAAcC,gBAAgB,cAC9BF,SAAW,aACJC,cAAcC,gBAAgB,eACrCF,SAAW,aAGfnB,cAAgB,IAAIoB,cAAclB,OAAQ,CAAEiB,SAAUA,WACtDpB,OAAS,GAETC,cAAcsB,QACd1B,EAAE,uBAAuB2B,SAAS,aAAajB,OAC/CV,EAAE,wBAAwBS,OAE1BL,cAAcwB,gBAAkB,SAAUC,GAClCA,EAAEC,MAAQD,EAAEC,KAAKC,KAAO,GACxB5B,OAAO6B,KAAKH,EAAEC,OAItB1B,cAAc6B,OAAS,cACf9B,OAAO+B,OAAS,EAAG,KACfC,KAAO,IAAIC,KAAKjC,OAAQ,CAAEkC,KAAM,eAChCC,OAAS,IAAIC,WACjBD,OAAOE,cAAcL,MACrBG,OAAOG,UAAY,WACXH,OAAOI,SACP1C,EAAE,6BAA6BW,IAAI2B,OAAOI,QAGxB,UAAdrC,WAEAsC,YAAW,WACP3C,EAAE,wBAAwB4C,QAAQ,iBACnC,OAKnBzC,OAAS,GAGLG,SACAA,OAAOM,YAAYC,SAAQC,OAASA,MAAMC,SAC1CT,OAAS,OAIjBF,cAAcyC,QAAU,SAAShB,GAC7BiB,QAAQC,MAAM,uBAAwBlB,GACtCmB,MAAM,2BAA6BnB,EAAEkB,OACrCxC,YAGP0C,OAAM,SAAUC,KACbJ,QAAQC,MAAM,sBAAuBG,KACrCF,MAAM,+BAAiCE,IAAIC,SAC3C5C,WAlEJyC,MAAM,+CAsEdhD,EAAE,wBAAwBgB,GAAG,SAAS,WAC9BZ,eAAyC,aAAxBA,cAAcgD,QAC/BhD,cAAcW,OACdX,cAAgB,MAEpBJ,EAAE,uBAAuBS,OAAOD,YAAY,aAC5CR,EAAE,wBAAwBU"}