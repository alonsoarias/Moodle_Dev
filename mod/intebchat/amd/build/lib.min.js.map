{"version":3,"file":"lib.min.js","sources":["../src/lib.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Main JavaScript for INTEB Chat module with Conversations Management\r\n *\r\n * @module     mod_intebchat/lib\r\n * @copyright  2025 Alonso Arias <soporte@ingeweb.co>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\ndefine(['jquery', 'core/ajax', 'core/str', 'core/notification', 'core/modal_factory', 'core/modal_events', 'core/templates'], \r\nfunction($, Ajax, Str, Notification, ModalFactory, ModalEvents, Templates) {\r\n    var questionString = 'Ask a question...';\r\n    var errorString = 'An error occurred! Please try again later.';\r\n    var currentConversationId = null;\r\n    var tokenInfo = {\r\n        enabled: false,\r\n        limit: 0,\r\n        used: 0,\r\n        exceeded: false,\r\n        resetTime: 0\r\n    };\r\n    var strings = {};\r\n\r\n    /**\r\n     * Initialize the module with conversation management\r\n     * @param {Object} data Configuration data\r\n     */\r\n    var init = function(data) {\r\n        var instanceId = data.instanceId;\r\n        var api_type = data.api_type;\r\n        var persistConvo = data.persistConvo;\r\n        \r\n        // Initialize token info\r\n        tokenInfo.enabled = data.tokenLimitEnabled || false;\r\n        tokenInfo.limit = data.tokenLimit || 0;\r\n        tokenInfo.used = data.tokensUsed || 0;\r\n        tokenInfo.exceeded = data.tokenLimitExceeded || false;\r\n        tokenInfo.resetTime = data.resetTime || 0;\r\n\r\n        // Update UI based on token limit status\r\n        updateTokenUI();\r\n\r\n        // Load strings first\r\n        loadStrings().then(function() {\r\n            // Initialize conversation management after strings are loaded\r\n            initializeConversations(instanceId);\r\n            \r\n            // Set placeholder\r\n            $('#openai_input').attr('placeholder', strings.askaquestion);\r\n        });\r\n\r\n        // Event listeners for chat input\r\n        $(document).on('keyup', '.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input', function(e) {\r\n            if (e.which === 13 && !e.shiftKey && e.target.value !== \"\") {\r\n                e.preventDefault();\r\n                if (!tokenInfo.exceeded) {\r\n                    sendMessage(e.target.value, instanceId, api_type);\r\n                    e.target.value = '';\r\n                }\r\n            }\r\n        });\r\n\r\n        $(document).on('click', '.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #go', function(e) {\r\n            var input = $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input');\r\n            if (input.val() !== \"\" && !tokenInfo.exceeded) {\r\n                sendMessage(input.val(), instanceId, api_type);\r\n                input.val('');\r\n            }\r\n        });\r\n\r\n        // New conversation button\r\n        $(document).on('click', '#new-conversation-btn', function(e) {\r\n            createNewConversation(instanceId);\r\n        });\r\n\r\n        // Clear conversation button with modal\r\n        $(document).on('click', '#clear-conversation-btn', function(e) {\r\n            if (currentConversationId) {\r\n                showClearConversationModal(currentConversationId, instanceId);\r\n            }\r\n        });\r\n\r\n        // Edit title button with modal\r\n        $(document).on('click', '#edit-title-btn', function(e) {\r\n            if (currentConversationId) {\r\n                showEditTitleModal(currentConversationId);\r\n            }\r\n        });\r\n\r\n        // Conversation item click\r\n        $(document).on('click', '.intebchat-conversation-item', function(e) {\r\n            var conversationId = $(this).data('conversation-id');\r\n            loadConversation(conversationId, instanceId);\r\n        });\r\n\r\n        // Search conversations\r\n        $(document).on('input', '#conversation-search', function(e) {\r\n            filterConversations(e.target.value);\r\n        });\r\n\r\n        // Mobile menu toggle\r\n        $(document).on('click', '#mobile-menu-toggle', function(e) {\r\n            $('#conversations-sidebar').toggleClass('mobile-open');\r\n        });\r\n\r\n        // Auto-resize textarea\r\n        $(document).on('input', '.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input', function(e) {\r\n            this.style.height = 'auto';\r\n            this.style.height = Math.min(this.scrollHeight, 120) + 'px';\r\n        });\r\n\r\n        // Check token limit periodically if enabled\r\n        if (tokenInfo.enabled) {\r\n            setInterval(checkTokenReset, 60000); // Check every minute\r\n        }\r\n\r\n        // Start with a new conversation if none exists\r\n        if ($('.intebchat-conversation-item').length === 0) {\r\n            createNewConversation(instanceId);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Load all required strings\r\n     */\r\n    var loadStrings = function() {\r\n        var stringkeys = [\r\n            {key: 'askaquestion', component: 'mod_intebchat'},\r\n            {key: 'erroroccurred', component: 'mod_intebchat'},\r\n            {key: 'newconversation', component: 'mod_intebchat'},\r\n            {key: 'confirmclear', component: 'mod_intebchat'},\r\n            {key: 'conversationcleared', component: 'mod_intebchat'},\r\n            {key: 'loadingconversation', component: 'mod_intebchat'},\r\n            {key: 'edittitle', component: 'mod_intebchat'},\r\n            {key: 'clearconversation', component: 'mod_intebchat'},\r\n            {key: 'cancel', component: 'core'},\r\n            {key: 'save', component: 'core'},\r\n            {key: 'delete', component: 'core'},\r\n            {key: 'conversationtitle', component: 'mod_intebchat'},\r\n            {key: 'confirmclearmessage', component: 'mod_intebchat'}\r\n        ];\r\n\r\n        return Str.get_strings(stringkeys).then(function(results) {\r\n            strings.askaquestion = results[0];\r\n            strings.erroroccurred = results[1];\r\n            strings.newconversation = results[2];\r\n            strings.confirmclear = results[3];\r\n            strings.conversationcleared = results[4];\r\n            strings.loadingconversation = results[5];\r\n            strings.edittitle = results[6];\r\n            strings.clearconversation = results[7];\r\n            strings.cancel = results[8];\r\n            strings.save = results[9];\r\n            strings.delete = results[10];\r\n            strings.conversationtitle = results[11] || 'Conversation Title';\r\n            strings.confirmclearmessage = results[12] || 'Are you sure you want to clear this conversation? This action cannot be undone.';\r\n            \r\n            questionString = strings.askaquestion;\r\n            errorString = strings.erroroccurred;\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Show modal for editing conversation title\r\n     */\r\n    var showEditTitleModal = function(conversationId) {\r\n        var currentTitle = $('#conversation-title').text();\r\n        \r\n        ModalFactory.create({\r\n            type: ModalFactory.types.SAVE_CANCEL,\r\n            title: strings.edittitle,\r\n            body: '<div class=\"form-group\">' +\r\n                  '<label for=\"conversation-title-input\">' + strings.conversationtitle + '</label>' +\r\n                  '<input type=\"text\" class=\"form-control\" id=\"conversation-title-input\" value=\"' + \r\n                  currentTitle.replace(/\"/g, '&quot;') + '\">' +\r\n                  '</div>'\r\n        }).then(function(modal) {\r\n            modal.setSaveButtonText(strings.save);\r\n            \r\n            // Handle save\r\n            modal.getRoot().on(ModalEvents.save, function(e) {\r\n                var newTitle = $('#conversation-title-input').val().trim();\r\n                if (newTitle && newTitle !== currentTitle) {\r\n                    updateConversationTitle(conversationId, newTitle);\r\n                }\r\n            });\r\n            \r\n            // Focus input when modal is shown\r\n            modal.getRoot().on(ModalEvents.shown, function() {\r\n                $('#conversation-title-input').focus().select();\r\n            });\r\n            \r\n            // Handle enter key in input\r\n            modal.getRoot().on('keypress', '#conversation-title-input', function(e) {\r\n                if (e.which === 13) {\r\n                    modal.save();\r\n                }\r\n            });\r\n            \r\n            modal.show();\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Show modal for clearing conversation\r\n     */\r\n    var showClearConversationModal = function(conversationId, instanceId) {\r\n        ModalFactory.create({\r\n            type: ModalFactory.types.SAVE_CANCEL,\r\n            title: strings.clearconversation,\r\n            body: '<p>' + strings.confirmclearmessage + '</p>'\r\n        }).then(function(modal) {\r\n            modal.setSaveButtonText(strings.delete);\r\n            \r\n            // Style the save button as danger\r\n            modal.getRoot().find('.btn-primary').removeClass('btn-primary').addClass('btn-danger');\r\n            \r\n            // Handle delete\r\n            modal.getRoot().on(ModalEvents.save, function(e) {\r\n                clearConversation(conversationId, instanceId);\r\n            });\r\n            \r\n            modal.show();\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Initialize conversation management\r\n     */\r\n    var initializeConversations = function(instanceId) {\r\n        // Load first conversation if exists\r\n        var firstConversation = $('.intebchat-conversation-item').first();\r\n        if (firstConversation.length > 0) {\r\n            firstConversation.click();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Create a new conversation\r\n     */\r\n    var createNewConversation = function(instanceId) {\r\n        Ajax.call([{\r\n            methodname: 'mod_intebchat_create_conversation',\r\n            args: {instanceid: instanceId},\r\n            done: function(response) {\r\n                currentConversationId = response.conversationid;\r\n                \r\n                // Clear chat log\r\n                $('#intebchat_log').empty();\r\n                \r\n                // Update header\r\n                $('#conversation-title').text(response.title);\r\n                \r\n                // Add to sidebar\r\n                var conversationHtml = createConversationListItem(response);\r\n                if ($('.intebchat-no-conversations').length > 0) {\r\n                    $('.intebchat-conversations-list').html(conversationHtml);\r\n                } else {\r\n                    $('.intebchat-conversations-list').prepend(conversationHtml);\r\n                }\r\n                \r\n                // Set as active\r\n                $('.intebchat-conversation-item').removeClass('active');\r\n                $('.intebchat-conversation-item[data-conversation-id=\"' + currentConversationId + '\"]').addClass('active');\r\n                \r\n                // Focus input\r\n                $('#openai_input').focus();\r\n            },\r\n            fail: function(error) {\r\n                Notification.addNotification({\r\n                    message: error.message || strings.erroroccurred,\r\n                    type: 'error'\r\n                });\r\n            }\r\n        }]);\r\n    };\r\n\r\n    /**\r\n     * Load a conversation\r\n     */\r\n    var loadConversation = function(conversationId, instanceId) {\r\n        // Show loading state\r\n        $('#intebchat_log').html('<div class=\"loading-conversation\">' + \r\n            '<i class=\"fa fa-spinner fa-spin\"></i> ' + \r\n            strings.loadingconversation + \r\n            '</div>');\r\n        \r\n        Ajax.call([{\r\n            methodname: 'mod_intebchat_load_conversation',\r\n            args: {\r\n                conversationid: conversationId,\r\n                instanceid: instanceId\r\n            },\r\n            done: function(response) {\r\n                currentConversationId = conversationId;\r\n                \r\n                // Update header\r\n                $('#conversation-title').text(response.title);\r\n                \r\n                // Clear and load messages\r\n                $('#intebchat_log').empty();\r\n                response.messages.forEach(function(msg) {\r\n                    addToChatLog(msg.role === 'user' ? 'user' : 'bot', msg.message, instanceId, false);\r\n                });\r\n                \r\n                // Update active state\r\n                $('.intebchat-conversation-item').removeClass('active');\r\n                $('.intebchat-conversation-item[data-conversation-id=\"' + conversationId + '\"]').addClass('active');\r\n                \r\n                // Close mobile sidebar\r\n                $('#conversations-sidebar').removeClass('mobile-open');\r\n                \r\n                // Scroll to bottom\r\n                var messageContainer = $('#intebchat_log');\r\n                messageContainer.animate({\r\n                    scrollTop: messageContainer[0].scrollHeight\r\n                }, 300);\r\n            },\r\n            fail: function(error) {\r\n                $('#intebchat_log').empty();\r\n                Notification.addNotification({\r\n                    message: error.message || strings.erroroccurred,\r\n                    type: 'error'\r\n                });\r\n            }\r\n        }]);\r\n    };\r\n\r\n    /**\r\n     * Clear a conversation\r\n     */\r\n    var clearConversation = function(conversationId, instanceId) {\r\n        Ajax.call([{\r\n            methodname: 'mod_intebchat_clear_conversation',\r\n            args: {conversationid: conversationId},\r\n            done: function(response) {\r\n                if (response.deleted) {\r\n                    // Conversation was deleted completely\r\n                    // Remove from sidebar\r\n                    $('.intebchat-conversation-item[data-conversation-id=\"' + conversationId + '\"]').fadeOut(300, function() {\r\n                        $(this).remove();\r\n                        \r\n                        // Check if there are any conversations left\r\n                        if ($('.intebchat-conversation-item').length === 0) {\r\n                            // No conversations left, create a new one\r\n                            createNewConversation(instanceId);\r\n                        } else {\r\n                            // Select the first available conversation\r\n                            var firstConv = $('.intebchat-conversation-item').first();\r\n                            if (firstConv.length > 0) {\r\n                                firstConv.click();\r\n                            }\r\n                        }\r\n                    });\r\n                    \r\n                    // Show notification\r\n                    Notification.addNotification({\r\n                        message: strings.conversationcleared,\r\n                        type: 'success'\r\n                    });\r\n                } else {\r\n                    // Conversation was cleared but not deleted\r\n                    // Clear chat log\r\n                    $('#intebchat_log').empty();\r\n                    \r\n                    // Update the preview in sidebar to empty\r\n                    var $conversationItem = $('.intebchat-conversation-item[data-conversation-id=\"' + conversationId + '\"]');\r\n                    $conversationItem.find('.intebchat-conversation-preview').text('');\r\n                    \r\n                    // Show notification\r\n                    Notification.addNotification({\r\n                        message: strings.conversationcleared,\r\n                        type: 'success'\r\n                    });\r\n                    \r\n                    // Update the conversation list to reflect the change\r\n                    refreshConversationInSidebar(conversationId);\r\n                }\r\n            },\r\n            fail: function(error) {\r\n                Notification.addNotification({\r\n                    message: error.message || strings.erroroccurred,\r\n                    type: 'error'\r\n                });\r\n            }\r\n        }]);\r\n    };\r\n\r\n    /**\r\n     * Update conversation title\r\n     */\r\n    var updateConversationTitle = function(conversationId, newTitle) {\r\n        Ajax.call([{\r\n            methodname: 'mod_intebchat_update_conversation_title',\r\n            args: {\r\n                conversationid: conversationId,\r\n                title: newTitle\r\n            },\r\n            done: function(response) {\r\n                // Update header\r\n                $('#conversation-title').text(newTitle);\r\n                \r\n                // Update sidebar\r\n                $('.intebchat-conversation-item[data-conversation-id=\"' + conversationId + '\"] .title-text')\r\n                    .text(newTitle);\r\n                \r\n                // Show success notification\r\n                Notification.addNotification({\r\n                    message: strings.save,\r\n                    type: 'success'\r\n                });\r\n            },\r\n            fail: function(error) {\r\n                Notification.addNotification({\r\n                    message: error.message || strings.erroroccurred,\r\n                    type: 'error'\r\n                });\r\n            }\r\n        }]);\r\n    };\r\n\r\n    /**\r\n     * Refresh a conversation in the sidebar\r\n     */\r\n    var refreshConversationInSidebar = function(conversationId) {\r\n        var $item = $('.intebchat-conversation-item[data-conversation-id=\"' + conversationId + '\"]');\r\n        if ($item.length) {\r\n            // Update the modified time\r\n            var now = new Date();\r\n            $item.find('.intebchat-conversation-date').text(\r\n                now.toLocaleDateString([], {day: '2-digit', month: '2-digit'})\r\n            );\r\n            \r\n            // Move to top if not already there\r\n            if (!$item.is(':first-child')) {\r\n                $item.fadeOut(200, function() {\r\n                    $(this).prependTo('.intebchat-conversations-list').fadeIn(200);\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Filter conversations\r\n     */\r\n    var filterConversations = function(searchTerm) {\r\n        searchTerm = searchTerm.toLowerCase();\r\n        \r\n        $('.intebchat-conversation-item').each(function() {\r\n            var title = $(this).find('.title-text').text().toLowerCase();\r\n            var preview = $(this).find('.intebchat-conversation-preview').text().toLowerCase();\r\n            \r\n            if (title.includes(searchTerm) || preview.includes(searchTerm)) {\r\n                $(this).show();\r\n            } else {\r\n                $(this).hide();\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Create conversation list item HTML\r\n     */\r\n    var createConversationListItem = function(conversation) {\r\n        var date = new Date(conversation.lastmessage * 1000);\r\n        var dateStr = date.toLocaleDateString([], {day: '2-digit', month: '2-digit'});\r\n        \r\n        return '<div class=\"intebchat-conversation-item\" ' +\r\n               'data-conversation-id=\"' + conversation.conversationid + '\" ' +\r\n               'data-title=\"' + conversation.title + '\">' +\r\n               '<div class=\"intebchat-conversation-title\">' +\r\n               '<span class=\"title-text\">' + conversation.title + '</span>' +\r\n               '<span class=\"intebchat-conversation-date\">' + dateStr + '</span>' +\r\n               '</div>' +\r\n               '<div class=\"intebchat-conversation-preview\">' + conversation.preview + '</div>' +\r\n               '</div>';\r\n    };\r\n\r\n    /**\r\n     * Send message (enhanced with conversation management)\r\n     */\r\n    var sendMessage = function(message, instanceId, api_type) {\r\n        // Create new conversation if none exists\r\n        if (!currentConversationId) {\r\n            // Create conversation first, then send message\r\n            Ajax.call([{\r\n                methodname: 'mod_intebchat_create_conversation',\r\n                args: {instanceid: instanceId},\r\n                done: function(response) {\r\n                    currentConversationId = response.conversationid;\r\n                    \r\n                    // Update header\r\n                    $('#conversation-title').text(response.title);\r\n                    \r\n                    // Add to sidebar\r\n                    var conversationHtml = createConversationListItem(response);\r\n                    if ($('.intebchat-no-conversations').length > 0) {\r\n                        $('.intebchat-conversations-list').html(conversationHtml);\r\n                    } else {\r\n                        $('.intebchat-conversations-list').prepend(conversationHtml);\r\n                    }\r\n                    \r\n                    // Set as active\r\n                    $('.intebchat-conversation-item').removeClass('active');\r\n                    $('.intebchat-conversation-item[data-conversation-id=\"' + currentConversationId + '\"]').addClass('active');\r\n                    \r\n                    // Now send the message\r\n                    addToChatLog('user', message, instanceId);\r\n                    createCompletion(message, instanceId, api_type);\r\n                },\r\n                fail: function(error) {\r\n                    Notification.addNotification({\r\n                        message: error.message || errorString,\r\n                        type: 'error'\r\n                    });\r\n                }\r\n            }]);\r\n            return;\r\n        }\r\n        \r\n        addToChatLog('user', message, instanceId);\r\n        createCompletion(message, instanceId, api_type);\r\n    };\r\n\r\n    /**\r\n     * Update UI based on token limit status\r\n     */\r\n    var updateTokenUI = function() {\r\n        if (!tokenInfo.enabled) {\r\n            return;\r\n        }\r\n\r\n        var $container = $('.mod_intebchat');\r\n        var $input = $container.find('#openai_input');\r\n        var $submitBtn = $container.find('#go');\r\n        var $progressBar = $container.find('.progress-bar');\r\n\r\n        if (tokenInfo.exceeded) {\r\n            $input.prop('disabled', true);\r\n            $submitBtn.prop('disabled', true);\r\n        } else {\r\n            $input.prop('disabled', false);\r\n            $submitBtn.prop('disabled', false);\r\n        }\r\n\r\n        // Update progress bar\r\n        if ($progressBar.length) {\r\n            var percentage = (tokenInfo.used / tokenInfo.limit * 100);\r\n            $progressBar.css('width', percentage + '%');\r\n            \r\n            // Update color based on usage\r\n            $progressBar.removeClass('warning danger');\r\n            if (percentage > 90) {\r\n                $progressBar.addClass('danger');\r\n            } else if (percentage > 75) {\r\n                $progressBar.addClass('warning');\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Check if token limit has reset\r\n     */\r\n    var checkTokenReset = function() {\r\n        var now = Date.now() / 1000;\r\n        if (tokenInfo.exceeded && now > tokenInfo.resetTime) {\r\n            // Reload page to refresh token status\r\n            window.location.reload();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Add a message to the chat UI\r\n     * @param {string} type Which side of the UI the message should be on. Can be \"user\" or \"bot\"\r\n     * @param {string} message The text of the message to add\r\n     * @param {int} instanceId The ID of the instance to manipulate\r\n     * @param {boolean} animate Whether to animate the message\r\n     */\r\n    var addToChatLog = function(type, message, instanceId, animate = true) {\r\n        var messageContainer = $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #intebchat_log');\r\n        \r\n        var messageElem = $('<div></div>').addClass('openai_message').addClass(type);\r\n        var messageText = $('<span></span>').html(message);\r\n        messageElem.append(messageText);\r\n\r\n        // Add timestamp\r\n        var timestamp = new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});\r\n        var timestampElem = $('<span></span>').addClass('message-timestamp').text(timestamp);\r\n        messageElem.append(timestampElem);\r\n\r\n        if (animate) {\r\n            messageElem.hide();\r\n            messageContainer.append(messageElem);\r\n            messageElem.fadeIn(300);\r\n        } else {\r\n            messageContainer.append(messageElem);\r\n        }\r\n        \r\n        // Smooth scroll to bottom\r\n        messageContainer.animate({\r\n            scrollTop: messageContainer[0].scrollHeight\r\n        }, 300);\r\n    };\r\n\r\n    /**\r\n     * Makes an API request to get a completion from GPT\r\n     * @param {string} message The text to get a completion for\r\n     * @param {int} instanceId The ID of the instance\r\n     * @param {string} api_type \"assistant\" | \"chat\" The type of API to use\r\n     */\r\n    var createCompletion = function(message, instanceId, api_type) {\r\n        var threadId = null;\r\n        \r\n        // Build history from current conversation\r\n        var history = buildTranscript(instanceId);\r\n\r\n        $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #control_bar').addClass('disabled');\r\n        $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input').removeClass('error');\r\n        $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input').attr('placeholder', questionString);\r\n        $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input').blur();\r\n        addToChatLog('bot loading', '...', instanceId);\r\n\r\n        $.ajax({\r\n            url: M.cfg.wwwroot + '/mod/intebchat/api/completion.php',\r\n            type: 'POST',\r\n            dataType: 'json',\r\n            contentType: 'application/json',\r\n            data: JSON.stringify({\r\n                message: message,\r\n                history: history,\r\n                instanceId: instanceId,\r\n                conversationId: currentConversationId || null,\r\n                threadId: threadId\r\n            }),\r\n            success: function(data) {\r\n                var messageContainer = $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #intebchat_log');\r\n                messageContainer.children().last().remove();\r\n                $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #control_bar').removeClass('disabled');\r\n\r\n                if (data.message) {\r\n                    addToChatLog('bot', data.message, instanceId);\r\n                    \r\n                    // Update conversation ID if returned (for cases where conversation was created server-side)\r\n                    if (data.conversationId && !currentConversationId) {\r\n                        currentConversationId = data.conversationId;\r\n                    }\r\n                    \r\n                    // Update conversation preview\r\n                    if (currentConversationId) {\r\n                        updateConversationPreview(currentConversationId, message);\r\n                    }\r\n                    \r\n                    // Update token usage if provided\r\n                    if (data.tokenInfo && tokenInfo.enabled) {\r\n                        tokenInfo.used += data.tokenInfo.total || 0;\r\n                        updateTokenUI();\r\n                        \r\n                        // Check if limit exceeded\r\n                        if (tokenInfo.used >= tokenInfo.limit) {\r\n                            tokenInfo.exceeded = true;\r\n                            updateTokenUI();\r\n                            Notification.addNotification({\r\n                                message: strings.tokenlimitexceeded || 'Token limit exceeded',\r\n                                type: 'error'\r\n                            });\r\n                        }\r\n                    }\r\n                } else if (data.error) {\r\n                    if (data.error.type === 'token_limit_exceeded') {\r\n                        tokenInfo.exceeded = true;\r\n                        updateTokenUI();\r\n                        Notification.addNotification({\r\n                            message: data.error.message,\r\n                            type: 'error'\r\n                        });\r\n                    } else {\r\n                        addToChatLog('bot error', data.error.message, instanceId);\r\n                    }\r\n                }\r\n                $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input').focus();\r\n            },\r\n            error: function(xhr, status, error) {\r\n                var messageContainer = $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #intebchat_log');\r\n                messageContainer.children().last().remove();\r\n                $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #control_bar').removeClass('disabled');\r\n                \r\n                var errorMsg = errorString;\r\n                try {\r\n                    var response = JSON.parse(xhr.responseText);\r\n                    if (response.error) {\r\n                        errorMsg = response.error;\r\n                    }\r\n                } catch (e) {\r\n                    // Use default error message\r\n                }\r\n                \r\n                addToChatLog('bot error', errorMsg, instanceId);\r\n                $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input').addClass('error');\r\n                $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input').attr('placeholder', errorString);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Update conversation preview in sidebar\r\n     */\r\n    var updateConversationPreview = function(conversationId, lastMessage) {\r\n        var $item = $('.intebchat-conversation-item[data-conversation-id=\"' + conversationId + '\"]');\r\n        if ($item.length) {\r\n            $item.find('.intebchat-conversation-preview').text(lastMessage);\r\n            var now = new Date();\r\n            $item.find('.intebchat-conversation-date').text(\r\n                now.toLocaleDateString([], {day: '2-digit', month: '2-digit'})\r\n            );\r\n            \r\n            // Move conversation to top if it's not already there\r\n            if (!$item.is(':first-child')) {\r\n                $item.fadeOut(200, function() {\r\n                    $(this).prependTo('.intebchat-conversations-list').fadeIn(200);\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Using the existing messages in the chat history, create a string that can be used to aid completion\r\n     * @param {int} instanceId The instance from which to build the history\r\n     * @return {Array} A transcript of the conversation up to this point\r\n     */\r\n    var buildTranscript = function(instanceId) {\r\n        var transcript = [];\r\n        $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] .openai_message').each(function(index, element) {\r\n            var messages = $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] .openai_message');\r\n            if (index === messages.length - 1) {\r\n                return;\r\n            }\r\n\r\n            var user = userName;\r\n            if ($(element).hasClass('bot')) {\r\n                user = assistantName;\r\n            }\r\n            \r\n            // Remove timestamp from message text\r\n            var messageText = $(element).clone();\r\n            messageText.find('.message-timestamp').remove();\r\n            \r\n            transcript.push({\"user\": user, \"message\": messageText.text().trim()});\r\n        });\r\n\r\n        return transcript;\r\n    };\r\n\r\n    return {\r\n        init: init\r\n    };\r\n});"],"names":["define","$","Ajax","Str","Notification","ModalFactory","ModalEvents","Templates","questionString","errorString","currentConversationId","tokenInfo","enabled","limit","used","exceeded","resetTime","strings","loadStrings","get_strings","key","component","then","results","askaquestion","erroroccurred","newconversation","confirmclear","conversationcleared","loadingconversation","edittitle","clearconversation","cancel","save","delete","conversationtitle","confirmclearmessage","showEditTitleModal","conversationId","currentTitle","text","create","type","types","SAVE_CANCEL","title","body","replace","modal","setSaveButtonText","getRoot","on","e","newTitle","val","trim","updateConversationTitle","shown","focus","select","which","show","showClearConversationModal","instanceId","find","removeClass","addClass","clearConversation","initializeConversations","firstConversation","first","length","click","createNewConversation","call","methodname","args","instanceid","done","response","conversationid","empty","conversationHtml","createConversationListItem","html","prepend","fail","error","addNotification","message","loadConversation","messages","forEach","msg","addToChatLog","role","messageContainer","animate","scrollTop","scrollHeight","deleted","fadeOut","this","remove","firstConv","refreshConversationInSidebar","$item","now","Date","toLocaleDateString","day","month","is","prependTo","fadeIn","filterConversations","searchTerm","toLowerCase","each","preview","includes","hide","conversation","dateStr","lastmessage","sendMessage","api_type","createCompletion","updateTokenUI","$container","$input","$submitBtn","$progressBar","prop","percentage","css","checkTokenReset","window","location","reload","messageElem","messageText","append","timestamp","toLocaleTimeString","hour","minute","timestampElem","history","buildTranscript","attr","blur","ajax","url","M","cfg","wwwroot","dataType","contentType","data","JSON","stringify","threadId","success","children","last","updateConversationPreview","total","tokenlimitexceeded","xhr","status","errorMsg","parse","responseText","lastMessage","transcript","index","element","user","userName","hasClass","assistantName","clone","push","init","persistConvo","tokenLimitEnabled","tokenLimit","tokensUsed","tokenLimitExceeded","document","shiftKey","target","value","preventDefault","input","toggleClass","style","height","Math","min","setInterval"],"mappings":";;;;;;;AAuBAA,2BAAO,CAAC,SAAU,YAAa,WAAY,oBAAqB,qBAAsB,oBAAqB,mBAC3G,SAASC,EAAGC,KAAMC,IAAKC,aAAcC,aAAcC,YAAaC,eACxDC,eAAiB,oBACjBC,YAAc,6CACdC,sBAAwB,KACxBC,UAAY,CACZC,SAAS,EACTC,MAAO,EACPC,KAAM,EACNC,UAAU,EACVC,UAAW,GAEXC,QAAU,GAwGVC,YAAc,kBAiBPf,IAAIgB,YAhBM,CACb,CAACC,IAAK,eAAgBC,UAAW,iBACjC,CAACD,IAAK,gBAAiBC,UAAW,iBAClC,CAACD,IAAK,kBAAmBC,UAAW,iBACpC,CAACD,IAAK,eAAgBC,UAAW,iBACjC,CAACD,IAAK,sBAAuBC,UAAW,iBACxC,CAACD,IAAK,sBAAuBC,UAAW,iBACxC,CAACD,IAAK,YAAaC,UAAW,iBAC9B,CAACD,IAAK,oBAAqBC,UAAW,iBACtC,CAACD,IAAK,SAAUC,UAAW,QAC3B,CAACD,IAAK,OAAQC,UAAW,QACzB,CAACD,IAAK,SAAUC,UAAW,QAC3B,CAACD,IAAK,oBAAqBC,UAAW,iBACtC,CAACD,IAAK,sBAAuBC,UAAW,mBAGTC,MAAK,SAASC,SAC7CN,QAAQO,aAAeD,QAAQ,GAC/BN,QAAQQ,cAAgBF,QAAQ,GAChCN,QAAQS,gBAAkBH,QAAQ,GAClCN,QAAQU,aAAeJ,QAAQ,GAC/BN,QAAQW,oBAAsBL,QAAQ,GACtCN,QAAQY,oBAAsBN,QAAQ,GACtCN,QAAQa,UAAYP,QAAQ,GAC5BN,QAAQc,kBAAoBR,QAAQ,GACpCN,QAAQe,OAAST,QAAQ,GACzBN,QAAQgB,KAAOV,QAAQ,GACvBN,QAAQiB,OAASX,QAAQ,IACzBN,QAAQkB,kBAAoBZ,QAAQ,KAAO,qBAC3CN,QAAQmB,oBAAsBb,QAAQ,KAAO,kFAE7Cf,eAAiBS,QAAQO,aACzBf,YAAcQ,QAAQQ,kBAO1BY,mBAAqB,SAASC,oBAC1BC,aAAetC,EAAE,uBAAuBuC,OAE5CnC,aAAaoC,OAAO,CAChBC,KAAMrC,aAAasC,MAAMC,YACzBC,MAAO5B,QAAQa,UACfgB,KAAM,iEAC2C7B,QAAQkB,kBADnD,wFAGAI,aAAaQ,QAAQ,KAAM,UAH3B,aAKPzB,MAAK,SAAS0B,OACbA,MAAMC,kBAAkBhC,QAAQgB,MAGhCe,MAAME,UAAUC,GAAG7C,YAAY2B,MAAM,SAASmB,OACtCC,SAAWpD,EAAE,6BAA6BqD,MAAMC,OAChDF,UAAYA,WAAad,cACzBiB,wBAAwBlB,eAAgBe,aAKhDL,MAAME,UAAUC,GAAG7C,YAAYmD,OAAO,WAClCxD,EAAE,6BAA6ByD,QAAQC,YAI3CX,MAAME,UAAUC,GAAG,WAAY,6BAA6B,SAASC,GACjD,KAAZA,EAAEQ,OACFZ,MAAMf,UAIde,MAAMa,WAOVC,2BAA6B,SAASxB,eAAgByB,YACtD1D,aAAaoC,OAAO,CAChBC,KAAMrC,aAAasC,MAAMC,YACzBC,MAAO5B,QAAQc,kBACfe,KAAM,MAAQ7B,QAAQmB,oBAAsB,SAC7Cd,MAAK,SAAS0B,OACbA,MAAMC,kBAAkBhC,QAAQiB,QAGhCc,MAAME,UAAUc,KAAK,gBAAgBC,YAAY,eAAeC,SAAS,cAGzElB,MAAME,UAAUC,GAAG7C,YAAY2B,MAAM,SAASmB,GAC1Ce,kBAAkB7B,eAAgByB,eAGtCf,MAAMa,WAOVO,wBAA0B,SAASL,gBAE/BM,kBAAoBpE,EAAE,gCAAgCqE,QACtDD,kBAAkBE,OAAS,GAC3BF,kBAAkBG,SAOtBC,sBAAwB,SAASV,YACjC7D,KAAKwE,KAAK,CAAC,CACPC,WAAY,oCACZC,KAAM,CAACC,WAAYd,YACnBe,KAAM,SAASC,UACXrE,sBAAwBqE,SAASC,eAGjC/E,EAAE,kBAAkBgF,QAGpBhF,EAAE,uBAAuBuC,KAAKuC,SAASlC,WAGnCqC,iBAAmBC,2BAA2BJ,UAC9C9E,EAAE,+BAA+BsE,OAAS,EAC1CtE,EAAE,iCAAiCmF,KAAKF,kBAExCjF,EAAE,iCAAiCoF,QAAQH,kBAI/CjF,EAAE,gCAAgCgE,YAAY,UAC9ChE,EAAE,sDAAwDS,sBAAwB,MAAMwD,SAAS,UAGjGjE,EAAE,iBAAiByD,SAEvB4B,KAAM,SAASC,OACXnF,aAAaoF,gBAAgB,CACzBC,QAASF,MAAME,SAAWxE,QAAQQ,cAClCiB,KAAM,eASlBgD,iBAAmB,SAASpD,eAAgByB,YAE5C9D,EAAE,kBAAkBmF,KAAK,2EAErBnE,QAAQY,oBACR,UAEJ3B,KAAKwE,KAAK,CAAC,CACPC,WAAY,kCACZC,KAAM,CACFI,eAAgB1C,eAChBuC,WAAYd,YAEhBe,KAAM,SAASC,UACXrE,sBAAwB4B,eAGxBrC,EAAE,uBAAuBuC,KAAKuC,SAASlC,OAGvC5C,EAAE,kBAAkBgF,QACpBF,SAASY,SAASC,SAAQ,SAASC,KAC/BC,aAA0B,SAAbD,IAAIE,KAAkB,OAAS,MAAOF,IAAIJ,QAAS1B,YAAY,MAIhF9D,EAAE,gCAAgCgE,YAAY,UAC9ChE,EAAE,sDAAwDqC,eAAiB,MAAM4B,SAAS,UAG1FjE,EAAE,0BAA0BgE,YAAY,mBAGpC+B,iBAAmB/F,EAAE,kBACzB+F,iBAAiBC,QAAQ,CACrBC,UAAWF,iBAAiB,GAAGG,cAChC,MAEPb,KAAM,SAASC,OACXtF,EAAE,kBAAkBgF,QACpB7E,aAAaoF,gBAAgB,CACzBC,QAASF,MAAME,SAAWxE,QAAQQ,cAClCiB,KAAM,eASlByB,kBAAoB,SAAS7B,eAAgByB,YAC7C7D,KAAKwE,KAAK,CAAC,CACPC,WAAY,mCACZC,KAAM,CAACI,eAAgB1C,gBACvBwC,KAAM,SAASC,UACPA,SAASqB,SAGTnG,EAAE,sDAAwDqC,eAAiB,MAAM+D,QAAQ,KAAK,cAC1FpG,EAAEqG,MAAMC,SAGyC,IAA7CtG,EAAE,gCAAgCsE,OAElCE,sBAAsBV,gBACnB,KAECyC,UAAYvG,EAAE,gCAAgCqE,QAC9CkC,UAAUjC,OAAS,GACnBiC,UAAUhC,YAMtBpE,aAAaoF,gBAAgB,CACzBC,QAASxE,QAAQW,oBACjBc,KAAM,cAKVzC,EAAE,kBAAkBgF,QAGIhF,EAAE,sDAAwDqC,eAAiB,MACjF0B,KAAK,mCAAmCxB,KAAK,IAG/DpC,aAAaoF,gBAAgB,CACzBC,QAASxE,QAAQW,oBACjBc,KAAM,YAIV+D,6BAA6BnE,kBAGrCgD,KAAM,SAASC,OACXnF,aAAaoF,gBAAgB,CACzBC,QAASF,MAAME,SAAWxE,QAAQQ,cAClCiB,KAAM,eASlBc,wBAA0B,SAASlB,eAAgBe,UACnDnD,KAAKwE,KAAK,CAAC,CACPC,WAAY,0CACZC,KAAM,CACFI,eAAgB1C,eAChBO,MAAOQ,UAEXyB,KAAM,SAASC,UAEX9E,EAAE,uBAAuBuC,KAAKa,UAG9BpD,EAAE,sDAAwDqC,eAAiB,kBACtEE,KAAKa,UAGVjD,aAAaoF,gBAAgB,CACzBC,QAASxE,QAAQgB,KACjBS,KAAM,aAGd4C,KAAM,SAASC,OACXnF,aAAaoF,gBAAgB,CACzBC,QAASF,MAAME,SAAWxE,QAAQQ,cAClCiB,KAAM,eASlB+D,6BAA+B,SAASnE,oBACpCoE,MAAQzG,EAAE,sDAAwDqC,eAAiB,SACnFoE,MAAMnC,OAAQ,KAEVoC,IAAM,IAAIC,KACdF,MAAM1C,KAAK,gCAAgCxB,KACvCmE,IAAIE,mBAAmB,GAAI,CAACC,IAAK,UAAWC,MAAO,aAIlDL,MAAMM,GAAG,iBACVN,MAAML,QAAQ,KAAK,WACfpG,EAAEqG,MAAMW,UAAU,iCAAiCC,OAAO,UAStEC,oBAAsB,SAASC,YAC/BA,WAAaA,WAAWC,cAExBpH,EAAE,gCAAgCqH,MAAK,eAC/BzE,MAAQ5C,EAAEqG,MAAMtC,KAAK,eAAexB,OAAO6E,cAC3CE,QAAUtH,EAAEqG,MAAMtC,KAAK,mCAAmCxB,OAAO6E,cAEjExE,MAAM2E,SAASJ,aAAeG,QAAQC,SAASJ,YAC/CnH,EAAEqG,MAAMzC,OAER5D,EAAEqG,MAAMmB,WAQhBtC,2BAA6B,SAASuC,kBAElCC,QADO,IAAIf,KAAgC,IAA3Bc,aAAaE,aACdf,mBAAmB,GAAI,CAACC,IAAK,UAAWC,MAAO,kBAE3D,kEAC2BW,aAAa1C,eADxC,iBAEiB0C,aAAa7E,MAF9B,wEAI8B6E,aAAa7E,MAJ3C,oDAK+C8E,QAL/C,4DAOiDD,aAAaH,QAP9D,gBAcPM,YAAc,SAASpC,QAAS1B,WAAY+D,UAEvCpH,uBAqCLoF,aAAa,OAAQL,QAAS1B,YAC9BgE,iBAAiBtC,QAAS1B,WAAY+D,WApClC5H,KAAKwE,KAAK,CAAC,CACPC,WAAY,oCACZC,KAAM,CAACC,WAAYd,YACnBe,KAAM,SAASC,UACXrE,sBAAwBqE,SAASC,eAGjC/E,EAAE,uBAAuBuC,KAAKuC,SAASlC,WAGnCqC,iBAAmBC,2BAA2BJ,UAC9C9E,EAAE,+BAA+BsE,OAAS,EAC1CtE,EAAE,iCAAiCmF,KAAKF,kBAExCjF,EAAE,iCAAiCoF,QAAQH,kBAI/CjF,EAAE,gCAAgCgE,YAAY,UAC9ChE,EAAE,sDAAwDS,sBAAwB,MAAMwD,SAAS,UAGjG4B,aAAa,OAAQL,QAAS1B,YAC9BgE,iBAAiBtC,QAAS1B,WAAY+D,WAE1CxC,KAAM,SAASC,OACXnF,aAAaoF,gBAAgB,CACzBC,QAASF,MAAME,SAAWhF,YAC1BiC,KAAM,eActBsF,cAAgB,cACXrH,UAAUC,aAIXqH,WAAahI,EAAE,kBACfiI,OAASD,WAAWjE,KAAK,iBACzBmE,WAAaF,WAAWjE,KAAK,OAC7BoE,aAAeH,WAAWjE,KAAK,oBAE/BrD,UAAUI,UACVmH,OAAOG,KAAK,YAAY,GACxBF,WAAWE,KAAK,YAAY,KAE5BH,OAAOG,KAAK,YAAY,GACxBF,WAAWE,KAAK,YAAY,IAI5BD,aAAa7D,OAAQ,KACjB+D,WAAc3H,UAAUG,KAAOH,UAAUE,MAAQ,IACrDuH,aAAaG,IAAI,QAASD,WAAa,KAGvCF,aAAanE,YAAY,kBACrBqE,WAAa,GACbF,aAAalE,SAAS,UACfoE,WAAa,IACpBF,aAAalE,SAAS,cAQ9BsE,gBAAkB,eACd7B,IAAMC,KAAKD,MAAQ,IACnBhG,UAAUI,UAAY4F,IAAMhG,UAAUK,WAEtCyH,OAAOC,SAASC,UAWpB7C,aAAe,SAASpD,KAAM+C,QAAS1B,gBAAYkC,uEAC/CD,iBAAmB/F,EAAE,oCAAsC8D,WAAa,qBAExE6E,YAAc3I,EAAE,eAAeiE,SAAS,kBAAkBA,SAASxB,MACnEmG,YAAc5I,EAAE,iBAAiBmF,KAAKK,SAC1CmD,YAAYE,OAAOD,iBAGfE,WAAY,IAAInC,MAAOoC,mBAAmB,GAAI,CAACC,KAAM,UAAWC,OAAO,YACvEC,cAAgBlJ,EAAE,iBAAiBiE,SAAS,qBAAqB1B,KAAKuG,WAC1EH,YAAYE,OAAOK,eAEflD,SACA2C,YAAYnB,OACZzB,iBAAiB8C,OAAOF,aACxBA,YAAY1B,OAAO,MAEnBlB,iBAAiB8C,OAAOF,aAI5B5C,iBAAiBC,QAAQ,CACrBC,UAAWF,iBAAiB,GAAGG,cAChC,MASH4B,iBAAmB,SAAStC,QAAS1B,WAAY+D,cAI7CsB,QAAUC,gBAAgBtF,YAE9B9D,EAAE,oCAAsC8D,WAAa,mBAAmBG,SAAS,YACjFjE,EAAE,oCAAsC8D,WAAa,oBAAoBE,YAAY,SACrFhE,EAAE,oCAAsC8D,WAAa,oBAAoBuF,KAAK,cAAe9I,gBAC7FP,EAAE,oCAAsC8D,WAAa,oBAAoBwF,OACzEzD,aAAa,cAAe,MAAO/B,YAEnC9D,EAAEuJ,KAAK,CACHC,IAAKC,EAAEC,IAAIC,QAAU,oCACrBlH,KAAM,OACNmH,SAAU,OACVC,YAAa,mBACbC,KAAMC,KAAKC,UAAU,CACjBxE,QAASA,QACT2D,QAASA,QACTrF,WAAYA,WACZzB,eAAgB5B,uBAAyB,KACzCwJ,SArBO,OAuBXC,QAAS,SAASJ,MACS9J,EAAE,oCAAsC8D,WAAa,qBAC3DqG,WAAWC,OAAO9D,SACnCtG,EAAE,oCAAsC8D,WAAa,mBAAmBE,YAAY,YAEhF8F,KAAKtE,SACLK,aAAa,MAAOiE,KAAKtE,QAAS1B,YAG9BgG,KAAKzH,iBAAmB5B,wBACxBA,sBAAwBqJ,KAAKzH,gBAI7B5B,uBACA4J,0BAA0B5J,sBAAuB+E,SAIjDsE,KAAKpJ,WAAaA,UAAUC,UAC5BD,UAAUG,MAAQiJ,KAAKpJ,UAAU4J,OAAS,EAC1CvC,gBAGIrH,UAAUG,MAAQH,UAAUE,QAC5BF,UAAUI,UAAW,EACrBiH,gBACA5H,aAAaoF,gBAAgB,CACzBC,QAASxE,QAAQuJ,oBAAsB,uBACvC9H,KAAM,aAIXqH,KAAKxE,QACY,yBAApBwE,KAAKxE,MAAM7C,MACX/B,UAAUI,UAAW,EACrBiH,gBACA5H,aAAaoF,gBAAgB,CACzBC,QAASsE,KAAKxE,MAAME,QACpB/C,KAAM,WAGVoD,aAAa,YAAaiE,KAAKxE,MAAME,QAAS1B,aAGtD9D,EAAE,oCAAsC8D,WAAa,oBAAoBL,SAE7E6B,MAAO,SAASkF,IAAKC,OAAQnF,OACFtF,EAAE,oCAAsC8D,WAAa,qBAC3DqG,WAAWC,OAAO9D,SACnCtG,EAAE,oCAAsC8D,WAAa,mBAAmBE,YAAY,gBAEhF0G,SAAWlK,oBAEPsE,SAAWiF,KAAKY,MAAMH,IAAII,cAC1B9F,SAASQ,QACToF,SAAW5F,SAASQ,OAE1B,MAAOnC,IAIT0C,aAAa,YAAa6E,SAAU5G,YACpC9D,EAAE,oCAAsC8D,WAAa,oBAAoBG,SAAS,SAClFjE,EAAE,oCAAsC8D,WAAa,oBAAoBuF,KAAK,cAAe7I,iBAQrG6J,0BAA4B,SAAShI,eAAgBwI,iBACjDpE,MAAQzG,EAAE,sDAAwDqC,eAAiB,SACnFoE,MAAMnC,OAAQ,CACdmC,MAAM1C,KAAK,mCAAmCxB,KAAKsI,iBAC/CnE,IAAM,IAAIC,KACdF,MAAM1C,KAAK,gCAAgCxB,KACvCmE,IAAIE,mBAAmB,GAAI,CAACC,IAAK,UAAWC,MAAO,aAIlDL,MAAMM,GAAG,iBACVN,MAAML,QAAQ,KAAK,WACfpG,EAAEqG,MAAMW,UAAU,iCAAiCC,OAAO,UAWtEmC,gBAAkB,SAAStF,gBACvBgH,WAAa,UACjB9K,EAAE,oCAAsC8D,WAAa,sBAAsBuD,MAAK,SAAS0D,MAAOC,YAExFD,QADW/K,EAAE,oCAAsC8D,WAAa,sBAC7CQ,OAAS,OAI5B2G,KAAOC,SACPlL,EAAEgL,SAASG,SAAS,SACpBF,KAAOG,mBAIPxC,YAAc5I,EAAEgL,SAASK,QAC7BzC,YAAY7E,KAAK,sBAAsBuC,SAEvCwE,WAAWQ,KAAK,MAASL,aAAiBrC,YAAYrG,OAAOe,aAG1DwH,kBAGJ,CACHS,KAttBO,SAASzB,UACZhG,WAAagG,KAAKhG,WAClB+D,SAAWiC,KAAKjC,SACDiC,KAAK0B,aAGxB9K,UAAUC,QAAUmJ,KAAK2B,oBAAqB,EAC9C/K,UAAUE,MAAQkJ,KAAK4B,YAAc,EACrChL,UAAUG,KAAOiJ,KAAK6B,YAAc,EACpCjL,UAAUI,SAAWgJ,KAAK8B,qBAAsB,EAChDlL,UAAUK,UAAY+I,KAAK/I,WAAa,EAGxCgH,gBAGA9G,cAAcI,MAAK,WAEf8C,wBAAwBL,YAGxB9D,EAAE,iBAAiBqJ,KAAK,cAAerI,QAAQO,iBAInDvB,EAAE6L,UAAU3I,GAAG,QAAS,oCAAsCY,WAAa,oBAAoB,SAASX,GACpF,KAAZA,EAAEQ,OAAiBR,EAAE2I,UAA+B,KAAnB3I,EAAE4I,OAAOC,QAC1C7I,EAAE8I,iBACGvL,UAAUI,WACX8G,YAAYzE,EAAE4I,OAAOC,MAAOlI,WAAY+D,UACxC1E,EAAE4I,OAAOC,MAAQ,QAK7BhM,EAAE6L,UAAU3I,GAAG,QAAS,oCAAsCY,WAAa,UAAU,SAASX,OACtF+I,MAAQlM,EAAE,oCAAsC8D,WAAa,oBAC7C,KAAhBoI,MAAM7I,OAAiB3C,UAAUI,WACjC8G,YAAYsE,MAAM7I,MAAOS,WAAY+D,UACrCqE,MAAM7I,IAAI,QAKlBrD,EAAE6L,UAAU3I,GAAG,QAAS,yBAAyB,SAASC,GACtDqB,sBAAsBV,eAI1B9D,EAAE6L,UAAU3I,GAAG,QAAS,2BAA2B,SAASC,GACpD1C,uBACAoD,2BAA2BpD,sBAAuBqD,eAK1D9D,EAAE6L,UAAU3I,GAAG,QAAS,mBAAmB,SAASC,GAC5C1C,uBACA2B,mBAAmB3B,0BAK3BT,EAAE6L,UAAU3I,GAAG,QAAS,gCAAgC,SAASC,OACzDd,eAAiBrC,EAAEqG,MAAMyD,KAAK,mBAClCrE,iBAAiBpD,eAAgByB,eAIrC9D,EAAE6L,UAAU3I,GAAG,QAAS,wBAAwB,SAASC,GACrD+D,oBAAoB/D,EAAE4I,OAAOC,UAIjChM,EAAE6L,UAAU3I,GAAG,QAAS,uBAAuB,SAASC,GACpDnD,EAAE,0BAA0BmM,YAAY,kBAI5CnM,EAAE6L,UAAU3I,GAAG,QAAS,oCAAsCY,WAAa,oBAAoB,SAASX,QAC/FiJ,MAAMC,OAAS,YACfD,MAAMC,OAASC,KAAKC,IAAIlG,KAAKH,aAAc,KAAO,QAIvDxF,UAAUC,SACV6L,YAAYjE,gBAAiB,KAIgB,IAA7CvI,EAAE,gCAAgCsE,QAClCE,sBAAsBV"}