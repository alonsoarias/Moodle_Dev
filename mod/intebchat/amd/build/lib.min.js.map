{"version":3,"file":"lib.min.js","sources":["../src/lib.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Main JavaScript for INTEB Chat module with Conversations Management\n *\n * @module     mod_intebchat/lib\n * @copyright  2025 Alonso Arias <soporte@ingeweb.co>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery', 'core/ajax', 'core/str', 'core/notification', 'core/modal_save_cancel', 'core/modal_delete_cancel', 'core/templates'],\n    function ($, Ajax, Str, Notification, ModalSaveCancel, ModalDeleteCancel, Templates) {\n        var questionString = 'Ask a question...';\n        var errorString = 'An error occurred! Please try again later.';\n        var currentConversationId = null;\n        var currentInputMode = 'text'; // 'text' or 'audio' - default to text\n        var lastInputMode = 'text'; // Track the last input mode used\n        var tokenInfo = {\n            enabled: false,\n            limit: 0,\n            used: 0,\n            exceeded: false,\n            resetTime: 0\n        };\n        var strings = {};\n        var audioConfig = {\n            enabled: false,\n            mode: 'text'\n        };\n\n        /**\n         * Token Tracker for real-time updates\n         */\n        var TokenTracker = {\n            used: 0,\n            limit: 0,\n            audioUsed: 0,\n            textUsed: 0,\n            \n            init: function(initialUsed, limit) {\n                this.used = initialUsed;\n                this.limit = limit;\n                this.updateDisplay();\n            },\n            \n            addTokens: function(tokenInfo) {\n                if (!tokenInfo) return;\n                \n                this.used += tokenInfo.total || 0;\n                \n                if (tokenInfo.audio_input || tokenInfo.audio_output) {\n                    this.audioUsed += (tokenInfo.audio_input || 0) + (tokenInfo.audio_output || 0);\n                }\n                \n                if (tokenInfo.prompt || tokenInfo.completion) {\n                    this.textUsed += (tokenInfo.prompt || 0) + (tokenInfo.completion || 0) - \n                                    ((tokenInfo.audio_input || 0) + (tokenInfo.audio_output || 0));\n                }\n                \n                this.updateDisplay();\n                this.checkLimits();\n            },\n            \n            updateDisplay: function() {\n                var percentage = this.limit > 0 ? (this.used / this.limit * 100) : 0;\n                \n                // Update main display\n                $('.token-count').text(percentage.toFixed(1) + '%');\n                $('.progress-bar').css('width', Math.min(percentage, 100) + '%');\n                \n                // Update detailed breakdown if available\n                if (this.audioUsed > 0 || this.textUsed > 0) {\n                    if (!$('#token-breakdown').length) {\n                        $('.token-display').after(\n                            '<div id=\"token-breakdown\" class=\"token-breakdown\">' +\n                            '<small>' + strings.texttokens + ': <span id=\"text-tokens\">0</span> | ' +\n                            strings.audiotokens + ': <span id=\"audio-tokens\">0</span></small>' +\n                            '</div>'\n                        );\n                    }\n                    $('#text-tokens').text(this.textUsed.toLocaleString());\n                    $('#audio-tokens').text(this.audioUsed.toLocaleString());\n                }\n                \n                // Update progress bar color\n                $('.progress-bar').removeClass('warning danger');\n                if (percentage >= 90) {\n                    $('.progress-bar').addClass('danger');\n                } else if (percentage > 75) {\n                    $('.progress-bar').addClass('warning');\n                }\n            },\n            \n            checkLimits: function() {\n                var percentage = this.limit > 0 ? (this.used / this.limit * 100) : 0;\n                \n                if (percentage >= 100) {\n                    // Disable input when limit exceeded\n                    $('#openai_input').prop('disabled', true);\n                    $('#go').prop('disabled', true);\n                    $('#intebchat-icon-mic').prop('disabled', true);\n                    \n                    // Show alert\n                    if (!$('.token-limit-alert').length) {\n                        $('#intebchat_log').before(\n                            '<div class=\"alert alert-danger token-limit-alert\">' +\n                            '<i class=\"fa fa-exclamation-circle\"></i> ' +\n                            strings.tokenlimitexceeded +\n                            '</div>'\n                        );\n                    }\n                } else if (percentage > 90) {\n                    // Show warning\n                    var remaining = this.limit - this.used;\n                    if (!$('.token-warning-alert').length) {\n                        $('#intebchat_log').before(\n                            '<div class=\"alert alert-warning token-warning-alert\">' +\n                            '<i class=\"fa fa-exclamation-triangle\"></i> ' +\n                            strings.tokenlimitwarning.replace('{$a}', remaining) +\n                            '</div>'\n                        );\n                    }\n                }\n            }\n        };\n\n        /**\n         * Initialize the module with conversation management\n         * @param {Object} data Configuration data\n         */\n        var init = function (data) {\n            console.log('INTEBCHAT: Initializing with data:', data);\n            \n            var instanceId = data.instanceId;\n            var api_type = data.api_type;\n            var persistConvo = data.persistConvo;\n\n            // Initialize token info\n            tokenInfo.enabled = data.tokenLimitEnabled || false;\n            tokenInfo.limit = data.tokenLimit || 0;\n            tokenInfo.used = data.tokensUsed || 0;\n            tokenInfo.exceeded = data.tokenLimitExceeded || false;\n            tokenInfo.resetTime = data.resetTime || 0;\n\n            // Initialize audio config\n            audioConfig.enabled = data.audioEnabled || false;\n            audioConfig.mode = data.audioMode || 'text';\n\n            // Initialize current mode for mixed mode\n            if (audioConfig.mode === 'both') {\n                currentInputMode = sessionStorage.getItem('intebchat_input_mode_' + instanceId) || 'text';\n                lastInputMode = currentInputMode;\n            }\n\n            // Update UI based on token limit status\n            updateTokenUI();\n\n            // Initialize dark mode\n            initDarkMode();\n\n            // Load strings first\n            loadStrings().then(function () {\n                // Initialize conversation management after strings are loaded\n                initializeConversations(instanceId);\n\n                // Set placeholder\n                if ($('#openai_input').length) {\n                    $('#openai_input').attr('placeholder', strings.askaquestion);\n                }\n            });\n\n            // Initialize token tracker if enabled\n            if (tokenInfo.enabled) {\n                TokenTracker.init(tokenInfo.used, tokenInfo.limit);\n                \n                // Hook into AJAX responses to update token count\n                $(document).ajaxComplete(function(event, xhr, settings) {\n                    if (settings.url && settings.url.includes('/mod/intebchat/api/completion.php')) {\n                        try {\n                            var response = JSON.parse(xhr.responseText);\n                            if (response.tokenInfo) {\n                                TokenTracker.addTokens(response.tokenInfo);\n                            }\n                        } catch(e) {\n                            console.error('Error processing token info:', e);\n                        }\n                    }\n                });\n            }\n\n            // Event listeners for chat input - adjusted for audio modes\n            if (audioConfig.mode === 'text' || audioConfig.mode === 'both') {\n                $(document).on('keyup', '.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input', function (e) {\n                    if (e.which === 13 && !e.shiftKey) {\n                        e.preventDefault();\n                        if (e.target.value !== \"\" && !tokenInfo.exceeded) {\n                            lastInputMode = 'text'; // Track that text was used\n                            sendMessage(e.target.value, instanceId, api_type);\n                            e.target.value = '';\n                        }\n                    }\n                });\n\n                $(document).on('click', '.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #go', function (e) {\n                    var input = $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input');\n                    \n                    if (!tokenInfo.exceeded && input.val() !== \"\") {\n                        lastInputMode = 'text'; // Track that text was used\n                        sendMessage(input.val(), instanceId, api_type);\n                        input.val('');\n                    }\n                });\n            }\n\n            // Audio mode specific handlers\n            if (audioConfig.enabled) {\n                // For both audio-only mode AND both mode, automatically send when recording stops\n                if (audioConfig.mode === 'audio' || audioConfig.mode === 'both') {\n                    $(document).on('audio-ready', '#intebchat-icon-stop', function () {\n                        var audioData = $('#intebchat-recorded-audio').val();\n                        if (audioData && !tokenInfo.exceeded) {\n                            lastInputMode = 'audio'; // Track that audio was used\n                            setTimeout(function() {\n                                sendAudioMessage(instanceId, api_type);\n                            }, 100);\n                        }\n                    });\n                }\n            }\n\n            // New conversation button\n            $(document).on('click', '#new-conversation-btn', function (e) {\n                createNewConversation(instanceId);\n            });\n\n            // Clear conversation button with modal\n            $(document).on('click', '#clear-conversation-btn', function (e) {\n                if (currentConversationId) {\n                    showClearConversationModal(currentConversationId, instanceId);\n                }\n            });\n\n            // Edit title button with modal\n            $(document).on('click', '#edit-title-btn', function (e) {\n                if (currentConversationId) {\n                    showEditTitleModal(currentConversationId);\n                }\n            });\n\n            // Conversation item click\n            $(document).on('click', '.intebchat-conversation-item', function (e) {\n                var conversationId = $(this).data('conversation-id');\n                loadConversation(conversationId, instanceId);\n            });\n\n            // Search conversations\n            $(document).on('input', '#conversation-search', function (e) {\n                filterConversations(e.target.value);\n            });\n\n            // Mobile menu toggle\n            $(document).on('click', '#mobile-menu-toggle', function (e) {\n                $('#conversations-sidebar').toggleClass('mobile-open');\n            });\n\n            // Auto-resize textarea\n            if ($('#openai_input').length) {\n                $(document).on('input', '.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input', function (e) {\n                    this.style.height = 'auto';\n                    this.style.height = Math.min(this.scrollHeight, 120) + 'px';\n                });\n            }\n\n            // Check token limit periodically if enabled\n            if (tokenInfo.enabled) {\n                setInterval(checkTokenReset, 60000); // Check every minute\n            }\n\n            // Start with a new conversation if none exists\n            if ($('.intebchat-conversation-item').length === 0) {\n                createNewConversation(instanceId);\n            }\n        };\n\n        /**\n         * Dark mode detection and management with visible toggle\n         */\n        var initDarkMode = function() {\n            var $container = $('.mod_intebchat');\n            \n            // Check for saved preference first\n            var savedTheme = localStorage.getItem('intebchat_theme');\n            var prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n            \n            // Apply initial theme\n            if (savedTheme === 'dark' || (savedTheme === null && prefersDark)) {\n                $container.addClass('dark-mode');\n            }\n            \n            // Handle theme toggle click\n            $(document).on('click', '#theme-toggle-btn', function(e) {\n                e.preventDefault();\n                \n                if ($container.hasClass('dark-mode')) {\n                    $container.removeClass('dark-mode');\n                    localStorage.setItem('intebchat_theme', 'light');\n                    $(this).find('i').removeClass('fa-moon').addClass('fa-sun');\n                    $(this).attr('title', strings.darkmode || 'Switch to dark mode');\n                } else {\n                    $container.addClass('dark-mode');\n                    localStorage.setItem('intebchat_theme', 'dark');\n                    $(this).find('i').removeClass('fa-sun').addClass('fa-moon');\n                    $(this).attr('title', strings.lightmode || 'Switch to light mode');\n                }\n            });\n            \n            // Listen for system theme changes\n            if (window.matchMedia) {\n                window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', function(e) {\n                    if (localStorage.getItem('intebchat_theme') === null) {\n                        if (e.matches) {\n                            $container.addClass('dark-mode');\n                            $('#theme-toggle-btn i').removeClass('fa-sun').addClass('fa-moon');\n                        } else {\n                            $container.removeClass('dark-mode');\n                            $('#theme-toggle-btn i').removeClass('fa-moon').addClass('fa-sun');\n                        }\n                    }\n                });\n            }\n        };\n\n        /**\n         * Send audio message\n         */\n        var sendAudioMessage = function (instanceId, api_type) {\n            var audioData = $('#intebchat-recorded-audio').val();\n            if (!audioData) {\n                return;\n            }\n\n            var doSend = function () {\n                // Use the last input mode to determine response mode\n                var responseMode = (audioConfig.mode === 'both') ? lastInputMode : audioConfig.mode;\n                \n                addToChatLog('user transcribing', '<i class=\"fa fa-microphone\"></i> ' +\n                    (strings.transcribing || 'Transcribing...'), instanceId);\n                    \n                // Pass the response mode expected\n                createCompletion('', instanceId, api_type, responseMode);\n            };\n\n            if (!currentConversationId) {\n                Ajax.call([{\n                    methodname: 'mod_intebchat_create_conversation',\n                    args: { instanceid: instanceId },\n                    done: function (response) {\n                        currentConversationId = response.conversationid;\n                        $('#conversation-title').text(response.title);\n                        var conversationHtml = createConversationListItem(response);\n                        if ($('.intebchat-no-conversations').length > 0) {\n                            $('.intebchat-conversations-list').html(conversationHtml);\n                        } else {\n                            $('.intebchat-conversations-list').prepend(conversationHtml);\n                        }\n                        $('.intebchat-conversation-item').removeClass('active');\n                        $('.intebchat-conversation-item[data-conversation-id=\"' +\n                            currentConversationId + '\"]').addClass('active');\n                        doSend();\n                    }\n                }]);\n            } else {\n                doSend();\n            }\n        };\n\n        /**\n         * Load all required strings\n         */\n        var loadStrings = function () {\n            var stringkeys = [\n                { key: 'askaquestion', component: 'mod_intebchat' },\n                { key: 'erroroccurred', component: 'mod_intebchat' },\n                { key: 'newconversation', component: 'mod_intebchat' },\n                { key: 'confirmclear', component: 'mod_intebchat' },\n                { key: 'conversationcleared', component: 'mod_intebchat' },\n                { key: 'loadingconversation', component: 'mod_intebchat' },\n                { key: 'edittitle', component: 'mod_intebchat' },\n                { key: 'clearconversation', component: 'mod_intebchat' },\n                { key: 'cancel', component: 'core' },\n                { key: 'save', component: 'core' },\n                { key: 'delete', component: 'core' },\n                { key: 'conversationtitle', component: 'mod_intebchat' },\n                { key: 'confirmclearmessage', component: 'mod_intebchat' },\n                { key: 'transcribing', component: 'mod_intebchat' },\n                { key: 'switchtoaudiomode', component: 'mod_intebchat' },\n                { key: 'switchtotextmode', component: 'mod_intebchat' },\n                { key: 'tokenlimitexceeded', component: 'mod_intebchat' },\n                { key: 'switchtheme', component: 'mod_intebchat' },\n                { key: 'darkmode', component: 'mod_intebchat' },\n                { key: 'lightmode', component: 'mod_intebchat' },\n                { key: 'texttokens', component: 'mod_intebchat' },\n                { key: 'audiotokens', component: 'mod_intebchat' },\n                { key: 'tokenlimitwarning', component: 'mod_intebchat' },\n                { key: 'reasoningmodelwarning', component: 'mod_intebchat' },\n                { key: 'conversationtitleupdated', component: 'mod_intebchat' }\n            ];\n\n            return Str.get_strings(stringkeys).then(function (results) {\n                strings.askaquestion = results[0];\n                strings.erroroccurred = results[1];\n                strings.newconversation = results[2];\n                strings.confirmclear = results[3];\n                strings.conversationcleared = results[4];\n                strings.loadingconversation = results[5];\n                strings.edittitle = results[6];\n                strings.clearconversation = results[7];\n                strings.cancel = results[8];\n                strings.save = results[9];\n                strings.delete = results[10];\n                strings.conversationtitle = results[11];\n                strings.confirmclearmessage = results[12];\n                strings.transcribing = results[13];\n                strings.switchtoaudiomode = results[14];\n                strings.switchtotextmode = results[15];\n                strings.tokenlimitexceeded = results[16];\n                strings.switchtheme = results[17];\n                strings.darkmode = results[18];\n                strings.lightmode = results[19];\n                strings.texttokens = results[20];\n                strings.audiotokens = results[21];\n                strings.tokenlimitwarning = results[22];\n                strings.reasoningmodelwarning = results[23];\n                strings.conversationtitleupdated = results[24];\n\n                questionString = strings.askaquestion;\n                errorString = strings.erroroccurred;\n            });\n        };\n\n        /**\n         * Show modal for editing conversation title - Updated for Moodle 4.3+\n         */\n        var showEditTitleModal = function (conversationId) {\n            var currentTitle = $('#conversation-title').text();\n\n            // Create modal using the new approach\n            ModalSaveCancel.create({\n                title: strings.edittitle,\n                body: '<div class=\"form-group\">' +\n                    '<label for=\"conversation-title-input\">' + strings.conversationtitle + '</label>' +\n                    '<input type=\"text\" class=\"form-control\" id=\"conversation-title-input\" value=\"' +\n                    currentTitle.replace(/\"/g, '&quot;') + '\">' +\n                    '</div>',\n                buttons: {\n                    save: strings.save,\n                    cancel: strings.cancel\n                },\n                show: true\n            }).then(function(modal) {\n                // Handle save\n                modal.getRoot().on('save', function(e) {\n                    e.preventDefault();\n                    var newTitle = $('#conversation-title-input').val().trim();\n                    if (newTitle && newTitle !== currentTitle) {\n                        updateConversationTitle(conversationId, newTitle);\n                    }\n                    modal.destroy();\n                });\n\n                // Focus input when modal is shown  \n                modal.getRoot().on('shown', function() {\n                    $('#conversation-title-input').focus().select();\n                });\n\n                // Handle enter key in input\n                modal.getRoot().on('keypress', '#conversation-title-input', function(e) {\n                    if (e.which === 13) {\n                        e.preventDefault();\n                        modal.getRoot().find('[data-action=\"save\"]').trigger('click');\n                    }\n                });\n\n                return modal;\n            }).catch(Notification.exception);\n        };\n\n        /**\n         * Show modal for clearing conversation - Updated for Moodle 4.3+\n         */\n        var showClearConversationModal = function (conversationId, instanceId) {\n            // Create modal using the new approach\n            ModalDeleteCancel.create({\n                title: strings.clearconversation,\n                body: '<p>' + strings.confirmclearmessage + '</p>',\n                buttons: {\n                    delete: strings.delete,\n                    cancel: strings.cancel\n                },\n                show: true\n            }).then(function(modal) {\n                // Handle delete\n                modal.getRoot().on('delete', function(e) {\n                    e.preventDefault();\n                    clearConversation(conversationId, instanceId);\n                    modal.destroy();\n                });\n\n                return modal;\n            }).catch(Notification.exception);\n        };\n\n        /**\n         * Initialize conversation management\n         */\n        var initializeConversations = function (instanceId) {\n            // Load first conversation if exists\n            var firstConversation = $('.intebchat-conversation-item').first();\n            if (firstConversation.length > 0) {\n                firstConversation.click();\n            }\n        };\n\n        /**\n         * Create a new conversation\n         */\n        var createNewConversation = function (instanceId) {\n            Ajax.call([{\n                methodname: 'mod_intebchat_create_conversation',\n                args: { instanceid: instanceId },\n                done: function (response) {\n                    currentConversationId = response.conversationid;\n\n                    // Clear chat log\n                    $('#intebchat_log').empty();\n\n                    // Update header\n                    $('#conversation-title').text(response.title);\n\n                    // Add to sidebar\n                    var conversationHtml = createConversationListItem(response);\n                    if ($('.intebchat-no-conversations').length > 0) {\n                        $('.intebchat-conversations-list').html(conversationHtml);\n                    } else {\n                        $('.intebchat-conversations-list').prepend(conversationHtml);\n                    }\n\n                    // Set as active\n                    $('.intebchat-conversation-item').removeClass('active');\n                    $('.intebchat-conversation-item[data-conversation-id=\"' + currentConversationId + '\"]').addClass('active');\n\n                    // Focus input\n                    if ($('#openai_input').length) {\n                        $('#openai_input').focus();\n                    }\n                },\n                fail: function (error) {\n                    Notification.addNotification({\n                        message: error.message || strings.erroroccurred,\n                        type: 'error'\n                    });\n                }\n            }]);\n        };\n\n        /**\n         * Load a conversation\n         */\n        var loadConversation = function (conversationId, instanceId) {\n            // Show loading state\n            $('#intebchat_log').html('<div class=\"loading-conversation text-center p-4\">' +\n                '<i class=\"fa fa-spinner fa-spin\"></i> ' +\n                strings.loadingconversation +\n                '</div>');\n\n            Ajax.call([{\n                methodname: 'mod_intebchat_load_conversation',\n                args: {\n                    conversationid: conversationId,\n                    instanceid: instanceId\n                },\n                done: function (response) {\n                    console.log('Conversation loaded:', response);\n                    \n                    currentConversationId = conversationId;\n\n                    // Update header\n                    $('#conversation-title').text(response.title);\n\n                    // Clear and load messages\n                    $('#intebchat_log').empty();\n                    \n                    if (response.messages && response.messages.length > 0) {\n                        response.messages.forEach(function (msg) {\n                            addToChatLog(msg.role === 'user' ? 'user' : 'bot', msg.message, instanceId, false);\n                        });\n                    }\n\n                    // Store threadId if exists (for Assistant API)\n                    if (response.threadId) {\n                        $('.intebchat-conversation-item[data-conversation-id=\"' + conversationId + '\"]')\n                            .attr('data-thread-id', response.threadId);\n                    }\n\n                    // Update active state\n                    $('.intebchat-conversation-item').removeClass('active');\n                    $('.intebchat-conversation-item[data-conversation-id=\"' + conversationId + '\"]').addClass('active');\n\n                    // Close mobile sidebar\n                    $('#conversations-sidebar').removeClass('mobile-open');\n\n                    // Scroll to bottom\n                    var messageContainer = $('#intebchat_log');\n                    messageContainer.animate({\n                        scrollTop: messageContainer[0].scrollHeight\n                    }, 300);\n                    \n                    // Focus input\n                    $('#openai_input').focus();\n                },\n                fail: function (error) {\n                    console.error('Error loading conversation:', error);\n                    $('#intebchat_log').empty();\n                    \n                    var errorMessage = strings.erroroccurred;\n                    if (error.message) {\n                        errorMessage = error.message;\n                    } else if (error.error) {\n                        errorMessage = error.error;\n                    }\n                    \n                    addToChatLog('bot error', errorMessage, instanceId);\n                    \n                    Notification.addNotification({\n                        message: errorMessage,\n                        type: 'error'\n                    });\n                }\n            }]);\n        };\n\n        /**\n         * Clear a conversation\n         */\n        var clearConversation = function (conversationId, instanceId) {\n            Ajax.call([{\n                methodname: 'mod_intebchat_clear_conversation',\n                args: { conversationid: conversationId },\n                done: function (response) {\n                    console.log('Clear conversation response:', response);\n                    \n                    if (response.deleted) {\n                        // Conversation was deleted completely\n                        $('.intebchat-conversation-item[data-conversation-id=\"' + conversationId + '\"]')\n                            .fadeOut(300, function () {\n                                $(this).remove();\n\n                                // Check if there are any conversations left\n                                if ($('.intebchat-conversation-item').length === 0) {\n                                    // No conversations left, create a new one\n                                    createNewConversation(instanceId);\n                                } else {\n                                    // Select the first available conversation\n                                    var firstConv = $('.intebchat-conversation-item').first();\n                                    if (firstConv.length > 0) {\n                                        firstConv.click();\n                                    }\n                                }\n                            });\n\n                        // Show notification\n                        Notification.addNotification({\n                            message: strings.conversationcleared,\n                            type: 'success'\n                        });\n                    } else {\n                        // Conversation was cleared but not deleted\n                        $('#intebchat_log').empty();\n\n                        // Update the preview in sidebar to empty\n                        var $conversationItem = $('.intebchat-conversation-item[data-conversation-id=\"' + conversationId + '\"]');\n                        $conversationItem.find('.intebchat-conversation-preview').text('');\n                        \n                        // Remove stored threadId\n                        $conversationItem.removeAttr('data-thread-id');\n\n                        // Show notification\n                        Notification.addNotification({\n                            message: strings.conversationcleared,\n                            type: 'success'\n                        });\n                    }\n                },\n                fail: function (error) {\n                    console.error('Error clearing conversation:', error);\n                    Notification.addNotification({\n                        message: error.message || strings.erroroccurred,\n                        type: 'error'\n                    });\n                }\n            }]);\n        };\n\n        /**\n         * Update conversation title\n         */\n        var updateConversationTitle = function (conversationId, newTitle) {\n            if (!newTitle || newTitle.trim() === '') {\n                return;\n            }\n            \n            Ajax.call([{\n                methodname: 'mod_intebchat_update_conversation_title',\n                args: {\n                    conversationid: conversationId,\n                    title: newTitle\n                },\n                done: function (response) {\n                    console.log('Title update response:', response);\n                    \n                    if (response && response.success) {\n                        // Update header\n                        $('#conversation-title').text(newTitle);\n                        \n                        // Update sidebar\n                        var $item = $('.intebchat-conversation-item[data-conversation-id=\"' + conversationId + '\"]');\n                        $item.find('.title-text').text(newTitle);\n                        $item.attr('data-title', newTitle);\n\n                        Notification.addNotification({\n                            message: strings.conversationtitleupdated || 'Title updated successfully',\n                            type: 'success'\n                        });\n                    } else {\n                        Notification.addNotification({\n                            message: strings.erroroccurred,\n                            type: 'error'\n                        });\n                    }\n                },\n                fail: function (error) {\n                    console.error('Error updating title:', error);\n                    Notification.addNotification({\n                        message: error.message || strings.erroroccurred,\n                        type: 'error'\n                    });\n                }\n            }]);\n        };\n\n        /**\n         * Refresh a conversation in the sidebar\n         */\n        var refreshConversationInSidebar = function (conversationId) {\n            var $item = $('.intebchat-conversation-item[data-conversation-id=\"' + conversationId + '\"]');\n            if ($item.length) {\n                // Update the modified time\n                var now = new Date();\n                $item.find('.intebchat-conversation-date').text(\n                    now.toLocaleDateString([], { day: '2-digit', month: '2-digit' })\n                );\n\n                // Move to top if not already there\n                if (!$item.is(':first-child')) {\n                    $item.fadeOut(200, function () {\n                        $(this).prependTo('.intebchat-conversations-list').fadeIn(200);\n                    });\n                }\n            }\n        };\n\n        /**\n         * Filter conversations\n         */\n        var filterConversations = function (searchTerm) {\n            searchTerm = searchTerm.toLowerCase();\n\n            $('.intebchat-conversation-item').each(function () {\n                var title = $(this).find('.title-text').text().toLowerCase();\n                var preview = $(this).find('.intebchat-conversation-preview').text().toLowerCase();\n\n                if (title.includes(searchTerm) || preview.includes(searchTerm)) {\n                    $(this).show();\n                } else {\n                    $(this).hide();\n                }\n            });\n        };\n\n        /**\n         * Create conversation list item HTML\n         */\n        var createConversationListItem = function (conversation) {\n            var date = new Date(conversation.lastmessage * 1000);\n            var dateStr = date.toLocaleDateString([], { day: '2-digit', month: '2-digit' });\n\n            return '<div class=\"intebchat-conversation-item\" ' +\n                'data-conversation-id=\"' + conversation.conversationid + '\" ' +\n                'data-title=\"' + conversation.title + '\">' +\n                '<div class=\"intebchat-conversation-title\">' +\n                '<span class=\"title-text\">' + conversation.title + '</span>' +\n                '<span class=\"intebchat-conversation-date\">' + dateStr + '</span>' +\n                '</div>' +\n                '<div class=\"intebchat-conversation-preview\">' + conversation.preview + '</div>' +\n                '</div>';\n        };\n\n        /**\n         * Send message (enhanced with conversation management)\n         */\n        var sendMessage = function (message, instanceId, api_type) {\n            // Create new conversation if none exists\n            if (!currentConversationId) {\n                // Create conversation first, then send message\n                Ajax.call([{\n                    methodname: 'mod_intebchat_create_conversation',\n                    args: { instanceid: instanceId },\n                    done: function (response) {\n                        currentConversationId = response.conversationid;\n\n                        // Update header\n                        $('#conversation-title').text(response.title);\n\n                        // Add to sidebar\n                        var conversationHtml = createConversationListItem(response);\n                        if ($('.intebchat-no-conversations').length > 0) {\n                            $('.intebchat-conversations-list').html(conversationHtml);\n                        } else {\n                            $('.intebchat-conversations-list').prepend(conversationHtml);\n                        }\n\n                        // Set as active\n                        $('.intebchat-conversation-item').removeClass('active');\n                        $('.intebchat-conversation-item[data-conversation-id=\"' + currentConversationId + '\"]').addClass('active');\n\n                        // Now send the message\n                        addToChatLog('user', message, instanceId);\n                        // Pass the response mode based on input type\n                        var responseMode = (audioConfig.mode === 'both') ? lastInputMode : 'text';\n                        createCompletion(message, instanceId, api_type, responseMode);\n                    },\n                    fail: function (error) {\n                        Notification.addNotification({\n                            message: error.message || errorString,\n                            type: 'error'\n                        });\n                    }\n                }]);\n                return;\n            }\n\n            addToChatLog('user', message, instanceId);\n            // Pass the response mode based on input type\n            var responseMode = (audioConfig.mode === 'both') ? lastInputMode : 'text';\n            createCompletion(message, instanceId, api_type, responseMode);\n        };\n\n        /**\n         * Update UI based on token limit status\n         */\n        var updateTokenUI = function () {\n            if (!tokenInfo.enabled) {\n                return;\n            }\n\n            var $container = $('.mod_intebchat');\n            var $input = $container.find('#openai_input');\n            var $submitBtn = $container.find('#go');\n            var $progressBar = $container.find('.progress-bar');\n\n            if (tokenInfo.exceeded) {\n                $input.prop('disabled', true);\n                $submitBtn.prop('disabled', true);\n            } else {\n                $input.prop('disabled', false);\n                $submitBtn.prop('disabled', false);\n            }\n\n            // Update progress bar\n            if ($progressBar.length) {\n                var percentage = (tokenInfo.used / tokenInfo.limit * 100);\n                $progressBar.css('width', percentage + '%');\n\n                // Update color based on usage\n                $progressBar.removeClass('warning danger');\n                if (percentage > 90) {\n                    $progressBar.addClass('danger');\n                } else if (percentage > 75) {\n                    $progressBar.addClass('warning');\n                }\n            }\n        };\n\n        /**\n         * Check if token limit has reset\n         */\n        var checkTokenReset = function () {\n            var now = Date.now() / 1000;\n            if (tokenInfo.exceeded && now > tokenInfo.resetTime) {\n                // Reload page to refresh token status\n                window.location.reload();\n            }\n        };\n\n        /**\n         * Add a message to the chat UI\n         * @param {string} type Which side of the UI the message should be on. Can be \"user\" or \"bot\"\n         * @param {string} message The text of the message to add\n         * @param {int} instanceId The ID of the instance to manipulate\n         * @param {boolean} animate Whether to animate the message\n         */\n        var addToChatLog = function (type, message, instanceId, animate = true) {\n            var messageContainer = $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #intebchat_log');\n\n            // Remove transcribing message if exists\n            if (type !== 'user transcribing') {\n                messageContainer.find('.openai_message.transcribing').remove();\n            }\n\n            var messageElem = $('<div></div>').addClass('openai_message').addClass(type.replace(' ', '-'));\n            var messageText = $('<span></span>').html(message);\n            messageElem.append(messageText);\n\n            // Add timestamp\n            var timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n            var timestampElem = $('<span></span>').addClass('message-timestamp').text(timestamp);\n            messageElem.append(timestampElem);\n\n            if (animate) {\n                messageElem.hide();\n                messageContainer.append(messageElem);\n                messageElem.fadeIn(300);\n            } else {\n                messageContainer.append(messageElem);\n            }\n\n            // Smooth scroll to bottom\n            messageContainer.animate({\n                scrollTop: messageContainer[0].scrollHeight\n            }, 300);\n        };\n\n        /**\n         * Makes an API request to get a completion from GPT\n         * @param {string} message The text to get a completion for\n         * @param {int} instanceId The ID of the instance\n         * @param {string} api_type \"assistant\" | \"chat\" The type of API to use\n         * @param {string} responseMode The desired response mode ('text' or 'audio')\n         */\n        var createCompletion = function (message, instanceId, api_type, responseMode) {\n            var threadId = null;\n            \n            // Try to get threadId from current conversation\n            if (currentConversationId) {\n                var $conversationItem = $('.intebchat-conversation-item[data-conversation-id=\"' + currentConversationId + '\"]');\n                if ($conversationItem.length && $conversationItem.data('thread-id')) {\n                    threadId = $conversationItem.data('thread-id');\n                }\n            }\n\n            // Build history from current conversation\n            var history = buildTranscript(instanceId);\n\n            $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #control_bar').addClass('disabled');\n            $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input').removeClass('error');\n            $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input').attr('placeholder', questionString);\n            $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input').blur();\n\n            if (!$('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] .openai_message.transcribing').length) {\n                addToChatLog('bot loading', '...', instanceId);\n            }\n\n            var audio = $('#intebchat-recorded-audio').val();\n            \n            // Prepare request data with correct response mode\n            var requestData = {\n                message: message,\n                history: history,\n                instanceId: instanceId,\n                conversationId: currentConversationId || null,\n                threadId: threadId,\n                audio: audio || null,\n                responseMode: responseMode || 'text' // Use the passed response mode\n            };\n            \n            // Debug log\n            console.log('Sending completion request:', requestData);\n            \n            $.ajax({\n                url: M.cfg.wwwroot + '/mod/intebchat/api/completion.php',\n                type: 'POST',\n                dataType: 'json',\n                contentType: 'application/json',\n                data: JSON.stringify(requestData),\n                success: function (data) {\n                    console.log('Completion response:', data);\n                    \n                    $('#intebchat-recorded-audio').val('');\n                    var messageContainer = $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #intebchat_log');\n\n                    // Remove loading or transcribing message\n                    messageContainer.find('.openai_message.bot-loading, .openai_message.user-transcribing').remove();\n\n                    $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #control_bar').removeClass('disabled');\n\n                    if (data.message) {\n                        // If we had audio input, replace the transcribing message with actual transcription\n                        if (audio && data.transcription) {\n                            messageContainer.find('.openai_message.user-transcribing').remove();\n                            var userContent = data.transcription;\n                            if (data.useraudio) {\n                                userContent = '<audio controls autoplay src=\"' + data.useraudio + '\"></audio>' +\n                                    '<div class=\"transcription\">' + data.transcription + '</div>';\n                            }\n                            addToChatLog('user', userContent, instanceId);\n                        }\n\n                        addToChatLog('bot', data.message, instanceId);\n\n                        // Update conversation ID if returned\n                        if (data.conversationId && !currentConversationId) {\n                            currentConversationId = data.conversationId;\n                        }\n                        \n                        // Store threadId if returned (for assistant API)\n                        if (data.threadId && currentConversationId) {\n                            $('.intebchat-conversation-item[data-conversation-id=\"' + currentConversationId + '\"]')\n                                .attr('data-thread-id', data.threadId);\n                        }\n\n                        // Update conversation preview\n                        if (currentConversationId) {\n                            updateConversationPreview(currentConversationId, data.transcription || message);\n                        }\n\n                        // Update token usage if provided\n                        if (data.tokenInfo && tokenInfo.enabled) {\n                            TokenTracker.addTokens(data.tokenInfo);\n                        }\n                    } else if (data.error) {\n                        console.error('Server error:', data.error);\n                        if (data.error.type === 'token_limit_exceeded') {\n                            tokenInfo.exceeded = true;\n                            updateTokenUI();\n                            Notification.addNotification({\n                                message: data.error.message,\n                                type: 'error'\n                            });\n                        } else {\n                            addToChatLog('bot error', data.error.message, instanceId);\n                        }\n                    }\n                    if ($('#openai_input').length) {\n                        $('#openai_input').focus();\n                    }\n                },\n                error: function (xhr, status, error) {\n                    console.error('AJAX error:', status, error, xhr.responseText);\n                    var messageContainer = $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #intebchat_log');\n                    messageContainer.find('.openai_message.bot-loading, .openai_message.user-transcribing').remove();\n                    $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #control_bar').removeClass('disabled');\n\n                    var errorMsg = errorString;\n                    try {\n                        var response = JSON.parse(xhr.responseText);\n                        if (response.error) {\n                            errorMsg = response.error.message || response.error;\n                        }\n                    } catch (e) {\n                        errorMsg = errorString + ' (' + error + ')';\n                    }\n\n                    addToChatLog('bot error', errorMsg, instanceId);\n                    $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input').addClass('error');\n                    $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input').attr('placeholder', errorString);\n                }\n            });\n        };\n\n        /**\n         * Update conversation preview in sidebar\n         */\n        var updateConversationPreview = function (conversationId, lastMessage) {\n            if (!lastMessage) return;\n\n            var $item = $('.intebchat-conversation-item[data-conversation-id=\"' + conversationId + '\"]');\n            if ($item.length) {\n                $item.find('.intebchat-conversation-preview').text(lastMessage);\n                var now = new Date();\n                $item.find('.intebchat-conversation-date').text(\n                    now.toLocaleDateString([], { day: '2-digit', month: '2-digit' })\n                );\n\n                // Move conversation to top if it's not already there\n                if (!$item.is(':first-child')) {\n                    $item.fadeOut(200, function () {\n                        $(this).prependTo('.intebchat-conversations-list').fadeIn(200);\n                    });\n                }\n            }\n        };\n\n        /**\n         * Using the existing messages in the chat history, create a string that can be used to aid completion\n         * @param {int} instanceId The instance from which to build the history\n         * @return {Array} A transcript of the conversation up to this point\n         */\n        var buildTranscript = function (instanceId) {\n            var transcript = [];\n            $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] .openai_message').each(function (index, element) {\n                var messages = $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] .openai_message');\n                if (index === messages.length - 1) {\n                    return;\n                }\n\n                var user = userName;\n                if ($(element).hasClass('bot')) {\n                    user = assistantName;\n                }\n\n                // Remove timestamp from message text\n                var messageText = $(element).clone();\n                messageText.find('.message-timestamp').remove();\n                messageText.find('audio').remove(); // Remove audio elements\n                messageText.find('.transcription').remove(); // Remove transcription wrapper\n\n                transcript.push({ \"user\": user, \"message\": messageText.text().trim() });\n            });\n\n            return transcript;\n        };\n\n        return {\n            init: init\n        };\n    });"],"names":["define","$","Ajax","Str","Notification","ModalSaveCancel","ModalDeleteCancel","Templates","questionString","errorString","currentConversationId","currentInputMode","lastInputMode","tokenInfo","enabled","limit","used","exceeded","resetTime","strings","audioConfig","mode","TokenTracker","audioUsed","textUsed","init","initialUsed","updateDisplay","addTokens","total","audio_input","audio_output","prompt","completion","checkLimits","percentage","this","text","toFixed","css","Math","min","length","after","texttokens","audiotokens","toLocaleString","removeClass","addClass","prop","before","tokenlimitexceeded","remaining","tokenlimitwarning","replace","initDarkMode","$container","savedTheme","localStorage","getItem","prefersDark","window","matchMedia","matches","document","on","e","preventDefault","hasClass","setItem","find","attr","darkmode","lightmode","addEventListener","sendAudioMessage","instanceId","api_type","val","doSend","responseMode","addToChatLog","transcribing","createCompletion","call","methodname","args","instanceid","done","response","conversationid","title","conversationHtml","createConversationListItem","html","prepend","loadStrings","get_strings","key","component","then","results","askaquestion","erroroccurred","newconversation","confirmclear","conversationcleared","loadingconversation","edittitle","clearconversation","cancel","save","delete","conversationtitle","confirmclearmessage","switchtoaudiomode","switchtotextmode","switchtheme","reasoningmodelwarning","conversationtitleupdated","showEditTitleModal","conversationId","currentTitle","create","body","buttons","show","modal","getRoot","newTitle","trim","updateConversationTitle","destroy","focus","select","which","trigger","catch","exception","showClearConversationModal","clearConversation","initializeConversations","firstConversation","first","click","createNewConversation","empty","fail","error","addNotification","message","type","loadConversation","console","log","messages","forEach","msg","role","threadId","messageContainer","animate","scrollTop","scrollHeight","errorMessage","deleted","fadeOut","remove","firstConv","$conversationItem","removeAttr","success","$item","filterConversations","searchTerm","toLowerCase","each","preview","includes","hide","conversation","dateStr","Date","lastmessage","toLocaleDateString","day","month","sendMessage","updateTokenUI","$input","$submitBtn","$progressBar","checkTokenReset","now","location","reload","messageElem","messageText","append","timestamp","toLocaleTimeString","hour","minute","timestampElem","fadeIn","data","history","buildTranscript","blur","audio","requestData","ajax","url","M","cfg","wwwroot","dataType","contentType","JSON","stringify","transcription","userContent","useraudio","updateConversationPreview","xhr","status","responseText","errorMsg","parse","lastMessage","is","prependTo","transcript","index","element","user","userName","assistantName","clone","push","persistConvo","tokenLimitEnabled","tokenLimit","tokensUsed","tokenLimitExceeded","audioEnabled","audioMode","sessionStorage","ajaxComplete","event","settings","shiftKey","target","value","input","setTimeout","toggleClass","style","height","setInterval"],"mappings":"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"}