{"version":3,"file":"lib.min.js","sources":["../src/lib.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Main JavaScript for INTEB Chat module with Conversations Management\n *\n * @module     mod_intebchat/lib\n * @copyright  2025 Alonso Arias <soporte@ingeweb.co>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery', 'core/ajax', 'core/str', 'core/notification', 'core/modal_factory', 'core/modal_events', 'core/templates'],\n    function ($, Ajax, Str, Notification, ModalFactory, ModalEvents, Templates) {\n        var questionString = 'Ask a question...';\n        var errorString = 'An error occurred! Please try again later.';\n        var currentConversationId = null;\n        var tokenInfo = {\n            enabled: false,\n            limit: 0,\n            used: 0,\n            exceeded: false,\n            resetTime: 0\n        };\n        var strings = {};\n        var audioConfig = {\n            enabled: false,\n            mode: 'text'\n        };\n\n        /**\n         * Initialize the module with conversation management\n         * @param {Object} data Configuration data\n         */\n        var init = function (data) {\n            console.log('INTEBCHAT: Initializing with data:', data);\n            \n            var instanceId = data.instanceId;\n            var api_type = data.api_type;\n            var persistConvo = data.persistConvo;\n\n            // Initialize token info\n            tokenInfo.enabled = data.tokenLimitEnabled || false;\n            tokenInfo.limit = data.tokenLimit || 0;\n            tokenInfo.used = data.tokensUsed || 0;\n            tokenInfo.exceeded = data.tokenLimitExceeded || false;\n            tokenInfo.resetTime = data.resetTime || 0;\n\n            // Initialize audio config\n            audioConfig.enabled = data.audioEnabled || false;\n            audioConfig.mode = data.audioMode || 'text';\n\n            // Update UI based on token limit status\n            updateTokenUI();\n\n            // Load strings first\n            loadStrings().then(function () {\n                // Initialize conversation management after strings are loaded\n                initializeConversations(instanceId);\n\n                // Set placeholder\n                if ($('#openai_input').length) {\n                    $('#openai_input').attr('placeholder', strings.askaquestion);\n                }\n            });\n\n            // Event listeners for chat input - adjusted for audio modes\n            if (audioConfig.mode === 'text' || audioConfig.mode === 'both') {\n                $(document).on('keyup', '.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input', function (e) {\n                    if (e.which === 13 && !e.shiftKey) {\n                        e.preventDefault();\n                        var audioData = $('#intebchat-recorded-audio').val();\n                        if (e.target.value !== \"\" && !tokenInfo.exceeded) {\n                            sendMessage(e.target.value, instanceId, api_type);\n                            e.target.value = '';\n                        } else if (audioData && !tokenInfo.exceeded) {\n                            sendAudioMessage(instanceId, api_type);\n                        }\n                    }\n                });\n\n                $(document).on('click', '.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #go', function (e) {\n                    var input = $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input');\n                    var audioData = $('#intebchat-recorded-audio').val();\n                    \n                    if (!tokenInfo.exceeded) {\n                        if (audioData && input.val() === \"\") {\n                            // Solo audio\n                            sendAudioMessage(instanceId, api_type);\n                        } else if (audioData && input.val() !== \"\") {\n                            // Audio + texto\n                            sendMessage(input.val(), instanceId, api_type);\n                        } else if (input.val() !== \"\") {\n                            // Solo texto\n                            sendMessage(input.val(), instanceId, api_type);\n                            input.val('');\n                        }\n                    }\n                });\n            }\n\n            // Audio mode specific handlers\n            if (audioConfig.enabled) {\n                if (audioConfig.mode === 'audio') {\n                    // For audio-only mode, automatically send when recording stops\n                    $(document).on('audio-ready', '#intebchat-icon-stop', function () {\n                        var audioData = $('#intebchat-recorded-audio').val();\n                        if (audioData && !tokenInfo.exceeded) {\n                            setTimeout(function() {\n                                sendAudioMessage(instanceId, api_type);\n                            }, 100);\n                        }\n                    });\n                } else if (audioConfig.mode === 'both') {\n                    // In mixed mode wait for the user to press send\n                    $(document).on('audio-ready', '#intebchat-icon-stop', function () {\n                        $('#intebchat-icon-stop').data('ready', true);\n                    });\n                }\n            }\n\n            // New conversation button\n            $(document).on('click', '#new-conversation-btn', function (e) {\n                createNewConversation(instanceId);\n            });\n\n            // Clear conversation button with modal\n            $(document).on('click', '#clear-conversation-btn', function (e) {\n                if (currentConversationId) {\n                    showClearConversationModal(currentConversationId, instanceId);\n                }\n            });\n\n            // Edit title button with modal\n            $(document).on('click', '#edit-title-btn', function (e) {\n                if (currentConversationId) {\n                    showEditTitleModal(currentConversationId);\n                }\n            });\n\n            // Conversation item click\n            $(document).on('click', '.intebchat-conversation-item', function (e) {\n                var conversationId = $(this).data('conversation-id');\n                loadConversation(conversationId, instanceId);\n            });\n\n            // Search conversations\n            $(document).on('input', '#conversation-search', function (e) {\n                filterConversations(e.target.value);\n            });\n\n            // Mobile menu toggle\n            $(document).on('click', '#mobile-menu-toggle', function (e) {\n                $('#conversations-sidebar').toggleClass('mobile-open');\n            });\n\n            // Auto-resize textarea\n            if ($('#openai_input').length) {\n                $(document).on('input', '.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input', function (e) {\n                    this.style.height = 'auto';\n                    this.style.height = Math.min(this.scrollHeight, 120) + 'px';\n                });\n            }\n\n            // Check token limit periodically if enabled\n            if (tokenInfo.enabled) {\n                setInterval(checkTokenReset, 60000); // Check every minute\n            }\n\n            // Start with a new conversation if none exists\n            if ($('.intebchat-conversation-item').length === 0) {\n                createNewConversation(instanceId);\n            }\n        };\n\n        /**\n         * Send audio message\n         */\n        var sendAudioMessage = function (instanceId, api_type) {\n            var audioData = $('#intebchat-recorded-audio').val();\n            if (!audioData) {\n                return;\n            }\n\n            var doSend = function () {\n                addToChatLog('user transcribing', '<i class=\"fa fa-microphone\"></i> ' +\n                    (strings.transcribing || 'Transcribing...'), instanceId);\n                createCompletion('', instanceId, api_type);\n            };\n\n            if (!currentConversationId) {\n                Ajax.call([{\n                    methodname: 'mod_intebchat_create_conversation',\n                    args: { instanceid: instanceId },\n                    done: function (response) {\n                        currentConversationId = response.conversationid;\n                        $('#conversation-title').text(response.title);\n                        var conversationHtml = createConversationListItem(response);\n                        if ($('.intebchat-no-conversations').length > 0) {\n                            $('.intebchat-conversations-list').html(conversationHtml);\n                        } else {\n                            $('.intebchat-conversations-list').prepend(conversationHtml);\n                        }\n                        $('.intebchat-conversation-item').removeClass('active');\n                        $('.intebchat-conversation-item[data-conversation-id=\"' +\n                            currentConversationId + '\"]').addClass('active');\n                        doSend();\n                    }\n                }]);\n            } else {\n                doSend();\n            }\n        };\n\n        /**\n         * Load all required strings\n         */\n        var loadStrings = function () {\n            var stringkeys = [\n                { key: 'askaquestion', component: 'mod_intebchat' },\n                { key: 'erroroccurred', component: 'mod_intebchat' },\n                { key: 'newconversation', component: 'mod_intebchat' },\n                { key: 'confirmclear', component: 'mod_intebchat' },\n                { key: 'conversationcleared', component: 'mod_intebchat' },\n                { key: 'loadingconversation', component: 'mod_intebchat' },\n                { key: 'edittitle', component: 'mod_intebchat' },\n                { key: 'clearconversation', component: 'mod_intebchat' },\n                { key: 'cancel', component: 'core' },\n                { key: 'save', component: 'core' },\n                { key: 'delete', component: 'core' },\n                { key: 'conversationtitle', component: 'mod_intebchat' },\n                { key: 'confirmclearmessage', component: 'mod_intebchat' },\n                { key: 'transcribing', component: 'mod_intebchat' }\n            ];\n\n            return Str.get_strings(stringkeys).then(function (results) {\n                strings.askaquestion = results[0];\n                strings.erroroccurred = results[1];\n                strings.newconversation = results[2];\n                strings.confirmclear = results[3];\n                strings.conversationcleared = results[4];\n                strings.loadingconversation = results[5];\n                strings.edittitle = results[6];\n                strings.clearconversation = results[7];\n                strings.cancel = results[8];\n                strings.save = results[9];\n                strings.delete = results[10];\n                strings.conversationtitle = results[11] || 'Conversation Title';\n                strings.confirmclearmessage = results[12] || 'Are you sure you want to clear this conversation? This action cannot be undone.';\n                strings.transcribing = results[13] || 'Transcribing...';\n\n                questionString = strings.askaquestion;\n                errorString = strings.erroroccurred;\n            });\n        };\n\n        /**\n         * Show modal for editing conversation title\n         */\n        var showEditTitleModal = function (conversationId) {\n            require(['core/modal_factory', 'core/modal_events'], function(ModalFactory, ModalEvents) {\n                var currentTitle = $('#conversation-title').text();\n\n                ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: strings.edittitle,\n                    body: '<div class=\"form-group\">' +\n                        '<label for=\"conversation-title-input\">' + strings.conversationtitle + '</label>' +\n                        '<input type=\"text\" class=\"form-control\" id=\"conversation-title-input\" value=\"' +\n                        currentTitle.replace(/\"/g, '&quot;') + '\">' +\n                        '</div>'\n                }).then(function (modal) {\n                    modal.setSaveButtonText(strings.save);\n\n                    // Handle save\n                    modal.getRoot().on(ModalEvents.save, function (e) {\n                        e.preventDefault();\n                        var newTitle = $('#conversation-title-input').val().trim();\n                        if (newTitle && newTitle !== currentTitle) {\n                            updateConversationTitle(conversationId, newTitle);\n                        }\n                        modal.hide();\n                    });\n\n                    // Focus input when modal is shown\n                    modal.getRoot().on(ModalEvents.shown, function () {\n                        $('#conversation-title-input').focus().select();\n                    });\n\n                    // Handle enter key in input\n                    modal.getRoot().on('keypress', '#conversation-title-input', function (e) {\n                        if (e.which === 13) {\n                            e.preventDefault();\n                            modal.getSaveButton().trigger('click');\n                        }\n                    });\n\n                    modal.show();\n                });\n            });\n        };\n\n        /**\n         * Show modal for clearing conversation\n         */\n        var showClearConversationModal = function (conversationId, instanceId) {\n            require(['core/modal_factory', 'core/modal_events'], function(ModalFactory, ModalEvents) {\n                ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: strings.clearconversation,\n                    body: '<p>' + strings.confirmclearmessage + '</p>'\n                }).then(function (modal) {\n                    modal.setSaveButtonText(strings.delete);\n\n                    // Style the save button as danger\n                    modal.getRoot().find('.btn-primary').removeClass('btn-primary').addClass('btn-danger');\n\n                    // Handle delete\n                    modal.getRoot().on(ModalEvents.save, function (e) {\n                        e.preventDefault();\n                        clearConversation(conversationId, instanceId);\n                        modal.hide();\n                    });\n\n                    modal.show();\n                });\n            });\n        };\n\n        /**\n         * Initialize conversation management\n         */\n        var initializeConversations = function (instanceId) {\n            // Load first conversation if exists\n            var firstConversation = $('.intebchat-conversation-item').first();\n            if (firstConversation.length > 0) {\n                firstConversation.click();\n            }\n        };\n\n        /**\n         * Create a new conversation\n         */\n        var createNewConversation = function (instanceId) {\n            Ajax.call([{\n                methodname: 'mod_intebchat_create_conversation',\n                args: { instanceid: instanceId },\n                done: function (response) {\n                    currentConversationId = response.conversationid;\n\n                    // Clear chat log\n                    $('#intebchat_log').empty();\n\n                    // Update header\n                    $('#conversation-title').text(response.title);\n\n                    // Add to sidebar\n                    var conversationHtml = createConversationListItem(response);\n                    if ($('.intebchat-no-conversations').length > 0) {\n                        $('.intebchat-conversations-list').html(conversationHtml);\n                    } else {\n                        $('.intebchat-conversations-list').prepend(conversationHtml);\n                    }\n\n                    // Set as active\n                    $('.intebchat-conversation-item').removeClass('active');\n                    $('.intebchat-conversation-item[data-conversation-id=\"' + currentConversationId + '\"]').addClass('active');\n\n                    // Focus input\n                    if ($('#openai_input').length) {\n                        $('#openai_input').focus();\n                    }\n                },\n                fail: function (error) {\n                    Notification.addNotification({\n                        message: error.message || strings.erroroccurred,\n                        type: 'error'\n                    });\n                }\n            }]);\n        };\n\n        /**\n         * Load a conversation\n         */\n        var loadConversation = function (conversationId, instanceId) {\n            // Show loading state\n            $('#intebchat_log').html('<div class=\"loading-conversation\">' +\n                '<i class=\"fa fa-spinner fa-spin\"></i> ' +\n                strings.loadingconversation +\n                '</div>');\n\n            Ajax.call([{\n                methodname: 'mod_intebchat_load_conversation',\n                args: {\n                    conversationid: conversationId,\n                    instanceid: instanceId\n                },\n                done: function (response) {\n                    console.log('Conversation loaded:', response);\n                    \n                    currentConversationId = conversationId;\n\n                    // Update header\n                    $('#conversation-title').text(response.title);\n\n                    // Clear and load messages\n                    $('#intebchat_log').empty();\n                    \n                    if (response.messages && response.messages.length > 0) {\n                        response.messages.forEach(function (msg) {\n                            addToChatLog(msg.role === 'user' ? 'user' : 'bot', msg.message, instanceId, false);\n                        });\n                    }\n\n                    // Store threadId if exists (for Assistant API)\n                    if (response.threadId) {\n                        $('.intebchat-conversation-item[data-conversation-id=\"' + conversationId + '\"]')\n                            .attr('data-thread-id', response.threadId);\n                    }\n\n                    // Update active state\n                    $('.intebchat-conversation-item').removeClass('active');\n                    $('.intebchat-conversation-item[data-conversation-id=\"' + conversationId + '\"]').addClass('active');\n\n                    // Close mobile sidebar\n                    $('#conversations-sidebar').removeClass('mobile-open');\n\n                    // Scroll to bottom\n                    var messageContainer = $('#intebchat_log');\n                    messageContainer.animate({\n                        scrollTop: messageContainer[0].scrollHeight\n                    }, 300);\n                    \n                    // Focus input\n                    $('#openai_input').focus();\n                },\n                fail: function (error) {\n                    console.error('Error loading conversation:', error);\n                    $('#intebchat_log').empty();\n                    \n                    var errorMessage = strings.erroroccurred;\n                    if (error.message) {\n                        errorMessage = error.message;\n                    } else if (error.error) {\n                        errorMessage = error.error;\n                    }\n                    \n                    addToChatLog('bot error', errorMessage, instanceId);\n                    \n                    Notification.addNotification({\n                        message: errorMessage,\n                        type: 'error'\n                    });\n                }\n            }]);\n        };\n\n        /**\n         * Clear a conversation\n         */\n        var clearConversation = function (conversationId, instanceId) {\n            Ajax.call([{\n                methodname: 'mod_intebchat_clear_conversation',\n                args: { conversationid: conversationId },\n                done: function (response) {\n                    console.log('Clear conversation response:', response);\n                    \n                    if (response.deleted) {\n                        // Conversation was deleted completely\n                        $('.intebchat-conversation-item[data-conversation-id=\"' + conversationId + '\"]')\n                            .fadeOut(300, function () {\n                                $(this).remove();\n\n                                // Check if there are any conversations left\n                                if ($('.intebchat-conversation-item').length === 0) {\n                                    // No conversations left, create a new one\n                                    createNewConversation(instanceId);\n                                } else {\n                                    // Select the first available conversation\n                                    var firstConv = $('.intebchat-conversation-item').first();\n                                    if (firstConv.length > 0) {\n                                        firstConv.click();\n                                    }\n                                }\n                            });\n\n                        // Show notification\n                        Notification.addNotification({\n                            message: strings.conversationcleared,\n                            type: 'success'\n                        });\n                    } else {\n                        // Conversation was cleared but not deleted\n                        $('#intebchat_log').empty();\n\n                        // Update the preview in sidebar to empty\n                        var $conversationItem = $('.intebchat-conversation-item[data-conversation-id=\"' + conversationId + '\"]');\n                        $conversationItem.find('.intebchat-conversation-preview').text('');\n                        \n                        // Remove stored threadId\n                        $conversationItem.removeAttr('data-thread-id');\n\n                        // Show notification\n                        Notification.addNotification({\n                            message: strings.conversationcleared,\n                            type: 'success'\n                        });\n                    }\n                },\n                fail: function (error) {\n                    console.error('Error clearing conversation:', error);\n                    Notification.addNotification({\n                        message: error.message || strings.erroroccurred,\n                        type: 'error'\n                    });\n                }\n            }]);\n        };\n\n        /**\n         * Update conversation title\n         */\n        var updateConversationTitle = function (conversationId, newTitle) {\n            if (!newTitle || newTitle.trim() === '') {\n                return;\n            }\n            \n            Ajax.call([{\n                methodname: 'mod_intebchat_update_conversation_title',\n                args: {\n                    conversationid: conversationId,\n                    title: newTitle\n                },\n                done: function (response) {\n                    console.log('Title update response:', response);\n                    \n                    if (response && response.success) {\n                        // Update header\n                        $('#conversation-title').text(newTitle);\n                        \n                        // Update sidebar\n                        var $item = $('.intebchat-conversation-item[data-conversation-id=\"' + conversationId + '\"]');\n                        $item.find('.title-text').text(newTitle);\n                        $item.attr('data-title', newTitle);\n\n                        Notification.addNotification({\n                            message: 'Title updated successfully',\n                            type: 'success'\n                        });\n                    } else {\n                        Notification.addNotification({\n                            message: strings.erroroccurred,\n                            type: 'error'\n                        });\n                    }\n                },\n                fail: function (error) {\n                    console.error('Error updating title:', error);\n                    Notification.addNotification({\n                        message: error.message || strings.erroroccurred,\n                        type: 'error'\n                    });\n                }\n            }]);\n        };\n\n        /**\n         * Refresh a conversation in the sidebar\n         */\n        var refreshConversationInSidebar = function (conversationId) {\n            var $item = $('.intebchat-conversation-item[data-conversation-id=\"' + conversationId + '\"]');\n            if ($item.length) {\n                // Update the modified time\n                var now = new Date();\n                $item.find('.intebchat-conversation-date').text(\n                    now.toLocaleDateString([], { day: '2-digit', month: '2-digit' })\n                );\n\n                // Move to top if not already there\n                if (!$item.is(':first-child')) {\n                    $item.fadeOut(200, function () {\n                        $(this).prependTo('.intebchat-conversations-list').fadeIn(200);\n                    });\n                }\n            }\n        };\n\n        /**\n         * Filter conversations\n         */\n        var filterConversations = function (searchTerm) {\n            searchTerm = searchTerm.toLowerCase();\n\n            $('.intebchat-conversation-item').each(function () {\n                var title = $(this).find('.title-text').text().toLowerCase();\n                var preview = $(this).find('.intebchat-conversation-preview').text().toLowerCase();\n\n                if (title.includes(searchTerm) || preview.includes(searchTerm)) {\n                    $(this).show();\n                } else {\n                    $(this).hide();\n                }\n            });\n        };\n\n        /**\n         * Create conversation list item HTML\n         */\n        var createConversationListItem = function (conversation) {\n            var date = new Date(conversation.lastmessage * 1000);\n            var dateStr = date.toLocaleDateString([], { day: '2-digit', month: '2-digit' });\n\n            return '<div class=\"intebchat-conversation-item\" ' +\n                'data-conversation-id=\"' + conversation.conversationid + '\" ' +\n                'data-title=\"' + conversation.title + '\">' +\n                '<div class=\"intebchat-conversation-title\">' +\n                '<span class=\"title-text\">' + conversation.title + '</span>' +\n                '<span class=\"intebchat-conversation-date\">' + dateStr + '</span>' +\n                '</div>' +\n                '<div class=\"intebchat-conversation-preview\">' + conversation.preview + '</div>' +\n                '</div>';\n        };\n\n        /**\n         * Send message (enhanced with conversation management)\n         */\n        var sendMessage = function (message, instanceId, api_type) {\n            // Create new conversation if none exists\n            if (!currentConversationId) {\n                // Create conversation first, then send message\n                Ajax.call([{\n                    methodname: 'mod_intebchat_create_conversation',\n                    args: { instanceid: instanceId },\n                    done: function (response) {\n                        currentConversationId = response.conversationid;\n\n                        // Update header\n                        $('#conversation-title').text(response.title);\n\n                        // Add to sidebar\n                        var conversationHtml = createConversationListItem(response);\n                        if ($('.intebchat-no-conversations').length > 0) {\n                            $('.intebchat-conversations-list').html(conversationHtml);\n                        } else {\n                            $('.intebchat-conversations-list').prepend(conversationHtml);\n                        }\n\n                        // Set as active\n                        $('.intebchat-conversation-item').removeClass('active');\n                        $('.intebchat-conversation-item[data-conversation-id=\"' + currentConversationId + '\"]').addClass('active');\n\n                        // Now send the message\n                        addToChatLog('user', message, instanceId);\n                        createCompletion(message, instanceId, api_type);\n                    },\n                    fail: function (error) {\n                        Notification.addNotification({\n                            message: error.message || errorString,\n                            type: 'error'\n                        });\n                    }\n                }]);\n                return;\n            }\n\n            addToChatLog('user', message, instanceId);\n            createCompletion(message, instanceId, api_type);\n        };\n\n        /**\n         * Update UI based on token limit status\n         */\n        var updateTokenUI = function () {\n            if (!tokenInfo.enabled) {\n                return;\n            }\n\n            var $container = $('.mod_intebchat');\n            var $input = $container.find('#openai_input');\n            var $submitBtn = $container.find('#go');\n            var $progressBar = $container.find('.progress-bar');\n\n            if (tokenInfo.exceeded) {\n                $input.prop('disabled', true);\n                $submitBtn.prop('disabled', true);\n            } else {\n                $input.prop('disabled', false);\n                $submitBtn.prop('disabled', false);\n            }\n\n            // Update progress bar\n            if ($progressBar.length) {\n                var percentage = (tokenInfo.used / tokenInfo.limit * 100);\n                $progressBar.css('width', percentage + '%');\n\n                // Update color based on usage\n                $progressBar.removeClass('warning danger');\n                if (percentage > 90) {\n                    $progressBar.addClass('danger');\n                } else if (percentage > 75) {\n                    $progressBar.addClass('warning');\n                }\n            }\n        };\n\n        /**\n         * Check if token limit has reset\n         */\n        var checkTokenReset = function () {\n            var now = Date.now() / 1000;\n            if (tokenInfo.exceeded && now > tokenInfo.resetTime) {\n                // Reload page to refresh token status\n                window.location.reload();\n            }\n        };\n\n        /**\n         * Add a message to the chat UI\n         * @param {string} type Which side of the UI the message should be on. Can be \"user\" or \"bot\"\n         * @param {string} message The text of the message to add\n         * @param {int} instanceId The ID of the instance to manipulate\n         * @param {boolean} animate Whether to animate the message\n         */\n        var addToChatLog = function (type, message, instanceId, animate = true) {\n            var messageContainer = $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #intebchat_log');\n\n            // Remove transcribing message if exists\n            if (type !== 'user transcribing') {\n                messageContainer.find('.openai_message.transcribing').remove();\n            }\n\n            var messageElem = $('<div></div>').addClass('openai_message').addClass(type.replace(' ', '-'));\n            var messageText = $('<span></span>').html(message);\n            messageElem.append(messageText);\n\n            // Add timestamp\n            var timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n            var timestampElem = $('<span></span>').addClass('message-timestamp').text(timestamp);\n            messageElem.append(timestampElem);\n\n            if (animate) {\n                messageElem.hide();\n                messageContainer.append(messageElem);\n                messageElem.fadeIn(300);\n            } else {\n                messageContainer.append(messageElem);\n            }\n\n            // Smooth scroll to bottom\n            messageContainer.animate({\n                scrollTop: messageContainer[0].scrollHeight\n            }, 300);\n        };\n\n        /**\n         * Makes an API request to get a completion from GPT\n         * @param {string} message The text to get a completion for\n         * @param {int} instanceId The ID of the instance\n         * @param {string} api_type \"assistant\" | \"chat\" The type of API to use\n         */\n        var createCompletion = function (message, instanceId, api_type) {\n            var threadId = null;\n            \n            // Intentar obtener el threadId de la conversación actual\n            if (currentConversationId) {\n                // Buscar si tenemos un threadId almacenado para esta conversación\n                var $conversationItem = $('.intebchat-conversation-item[data-conversation-id=\"' + currentConversationId + '\"]');\n                if ($conversationItem.length && $conversationItem.data('thread-id')) {\n                    threadId = $conversationItem.data('thread-id');\n                }\n            }\n\n            // Build history from current conversation\n            var history = buildTranscript(instanceId);\n\n            $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #control_bar').addClass('disabled');\n            $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input').removeClass('error');\n            $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input').attr('placeholder', questionString);\n            $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input').blur();\n\n            if (!$('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] .openai_message.transcribing').length) {\n                addToChatLog('bot loading', '...', instanceId);\n            }\n\n            var audio = $('#intebchat-recorded-audio').val();\n            \n            // Preparar los datos para enviar\n            var requestData = {\n                message: message,\n                history: history,\n                instanceId: instanceId,\n                conversationId: currentConversationId || null,\n                threadId: threadId,\n                audio: audio || null\n            };\n            \n            // Debug log\n            console.log('Sending completion request:', requestData);\n            \n            $.ajax({\n                url: M.cfg.wwwroot + '/mod/intebchat/api/completion.php',\n                type: 'POST',\n                dataType: 'json',\n                contentType: 'application/json',\n                data: JSON.stringify(requestData),\n                success: function (data) {\n                    console.log('Completion response:', data);\n                    \n                    $('#intebchat-recorded-audio').val('');\n                    var messageContainer = $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #intebchat_log');\n\n                    // Remove loading or transcribing message\n                    messageContainer.find('.openai_message.bot-loading, .openai_message.user-transcribing').remove();\n\n                    $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #control_bar').removeClass('disabled');\n\n                    if (data.message) {\n                        // If we had audio input, replace the transcribing message with actual transcription\n                        if (audio && data.transcription) {\n                            messageContainer.find('.openai_message.user-transcribing').remove();\n                            var userContent = data.transcription;\n                            if (data.useraudio) {\n                                userContent = '<audio controls autoplay src=\"' + data.useraudio + '\"></audio>' +\n                                    '<div class=\"transcription\">' + data.transcription + '</div>';\n                            }\n                            addToChatLog('user', userContent, instanceId);\n                        }\n\n                        addToChatLog('bot', data.message, instanceId);\n\n                        // Update conversation ID if returned\n                        if (data.conversationId && !currentConversationId) {\n                            currentConversationId = data.conversationId;\n                        }\n                        \n                        // Store threadId if returned (for assistant API)\n                        if (data.threadId && currentConversationId) {\n                            $('.intebchat-conversation-item[data-conversation-id=\"' + currentConversationId + '\"]')\n                                .attr('data-thread-id', data.threadId);\n                        }\n\n                        // Update conversation preview\n                        if (currentConversationId) {\n                            updateConversationPreview(currentConversationId, data.transcription || message);\n                        }\n\n                        // Update token usage if provided\n                        if (data.tokenInfo && tokenInfo.enabled) {\n                            tokenInfo.used = (tokenInfo.used || 0) + (data.tokenInfo.total || 0);\n                            updateTokenUI();\n\n                            // Check if limit exceeded\n                            if (tokenInfo.used >= tokenInfo.limit) {\n                                tokenInfo.exceeded = true;\n                                updateTokenUI();\n                                Notification.addNotification({\n                                    message: strings.tokenlimitexceeded || 'Token limit exceeded',\n                                    type: 'error'\n                                });\n                            }\n                        }\n                    } else if (data.error) {\n                        console.error('Server error:', data.error);\n                        if (data.error.type === 'token_limit_exceeded') {\n                            tokenInfo.exceeded = true;\n                            updateTokenUI();\n                            Notification.addNotification({\n                                message: data.error.message,\n                                type: 'error'\n                            });\n                        } else {\n                            addToChatLog('bot error', data.error.message, instanceId);\n                        }\n                    }\n                    if ($('#openai_input').length) {\n                        $('#openai_input').focus();\n                    }\n                },\n                error: function (xhr, status, error) {\n                    console.error('AJAX error:', status, error, xhr.responseText);\n                    var messageContainer = $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #intebchat_log');\n                    messageContainer.find('.openai_message.bot-loading, .openai_message.user-transcribing').remove();\n                    $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #control_bar').removeClass('disabled');\n\n                    var errorMsg = errorString;\n                    try {\n                        var response = JSON.parse(xhr.responseText);\n                        if (response.error) {\n                            errorMsg = response.error.message || response.error;\n                        }\n                    } catch (e) {\n                        errorMsg = errorString + ' (' + error + ')';\n                    }\n\n                    addToChatLog('bot error', errorMsg, instanceId);\n                    $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input').addClass('error');\n                    $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input').attr('placeholder', errorString);\n                }\n            });\n        };\n\n        /**\n         * Update conversation preview in sidebar\n         */\n        var updateConversationPreview = function (conversationId, lastMessage) {\n            if (!lastMessage) return;\n\n            var $item = $('.intebchat-conversation-item[data-conversation-id=\"' + conversationId + '\"]');\n            if ($item.length) {\n                $item.find('.intebchat-conversation-preview').text(lastMessage);\n                var now = new Date();\n                $item.find('.intebchat-conversation-date').text(\n                    now.toLocaleDateString([], { day: '2-digit', month: '2-digit' })\n                );\n\n                // Move conversation to top if it's not already there\n                if (!$item.is(':first-child')) {\n                    $item.fadeOut(200, function () {\n                        $(this).prependTo('.intebchat-conversations-list').fadeIn(200);\n                    });\n                }\n            }\n        };\n\n        /**\n         * Using the existing messages in the chat history, create a string that can be used to aid completion\n         * @param {int} instanceId The instance from which to build the history\n         * @return {Array} A transcript of the conversation up to this point\n         */\n        var buildTranscript = function (instanceId) {\n            var transcript = [];\n            $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] .openai_message').each(function (index, element) {\n                var messages = $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] .openai_message');\n                if (index === messages.length - 1) {\n                    return;\n                }\n\n                var user = userName;\n                if ($(element).hasClass('bot')) {\n                    user = assistantName;\n                }\n\n                // Remove timestamp from message text\n                var messageText = $(element).clone();\n                messageText.find('.message-timestamp').remove();\n                messageText.find('audio').remove(); // Remove audio elements\n                messageText.find('.transcription').remove(); // Remove transcription wrapper\n\n                transcript.push({ \"user\": user, \"message\": messageText.text().trim() });\n            });\n\n            return transcript;\n        };\n\n        return {\n            init: init\n        };\n    });"],"names":["define","$","Ajax","Str","Notification","ModalFactory","ModalEvents","Templates","questionString","errorString","currentConversationId","tokenInfo","enabled","limit","used","exceeded","resetTime","strings","audioConfig","mode","sendAudioMessage","instanceId","api_type","val","doSend","addToChatLog","transcribing","createCompletion","call","methodname","args","instanceid","done","response","conversationid","text","title","conversationHtml","createConversationListItem","length","html","prepend","removeClass","addClass","loadStrings","get_strings","key","component","then","results","askaquestion","erroroccurred","newconversation","confirmclear","conversationcleared","loadingconversation","edittitle","clearconversation","cancel","save","delete","conversationtitle","confirmclearmessage","showEditTitleModal","conversationId","require","currentTitle","create","type","types","SAVE_CANCEL","body","replace","modal","setSaveButtonText","getRoot","on","e","preventDefault","newTitle","trim","updateConversationTitle","hide","shown","focus","select","which","getSaveButton","trigger","show","showClearConversationModal","find","clearConversation","initializeConversations","firstConversation","first","click","createNewConversation","empty","fail","error","addNotification","message","loadConversation","console","log","messages","forEach","msg","role","threadId","attr","messageContainer","animate","scrollTop","scrollHeight","errorMessage","deleted","fadeOut","this","remove","firstConv","$conversationItem","removeAttr","success","$item","filterConversations","searchTerm","toLowerCase","each","preview","includes","conversation","dateStr","Date","lastmessage","toLocaleDateString","day","month","sendMessage","updateTokenUI","$container","$input","$submitBtn","$progressBar","prop","percentage","css","checkTokenReset","now","window","location","reload","messageElem","messageText","append","timestamp","toLocaleTimeString","hour","minute","timestampElem","fadeIn","data","history","buildTranscript","blur","audio","requestData","ajax","url","M","cfg","wwwroot","dataType","contentType","JSON","stringify","transcription","userContent","useraudio","updateConversationPreview","total","tokenlimitexceeded","xhr","status","responseText","errorMsg","parse","lastMessage","is","prependTo","transcript","index","element","user","userName","hasClass","assistantName","clone","push","init","persistConvo","tokenLimitEnabled","tokenLimit","tokensUsed","tokenLimitExceeded","audioEnabled","audioMode","document","shiftKey","audioData","target","value","input","setTimeout","toggleClass","style","height","Math","min","setInterval"],"mappings":";;;;;;;AAuBAA,2BAAO,CAAC,SAAU,YAAa,WAAY,oBAAqB,qBAAsB,oBAAqB,mBACvG,SAAUC,EAAGC,KAAMC,IAAKC,aAAcC,aAAcC,YAAaC,eACzDC,eAAiB,oBACjBC,YAAc,6CACdC,sBAAwB,KACxBC,UAAY,CACZC,SAAS,EACTC,MAAO,EACPC,KAAM,EACNC,UAAU,EACVC,UAAW,GAEXC,QAAU,GACVC,YAAc,CACdN,SAAS,EACTO,KAAM,QAuJNC,iBAAmB,SAAUC,WAAYC,aACzBrB,EAAE,6BAA6BsB,WAK3CC,OAAS,WACTC,aAAa,oBAAqB,qCAC7BR,QAAQS,cAAgB,mBAAoBL,YACjDM,iBAAiB,GAAIN,WAAYC,WAGhCZ,sBAoBDc,SAnBAtB,KAAK0B,KAAK,CAAC,CACPC,WAAY,oCACZC,KAAM,CAAEC,WAAYV,YACpBW,KAAM,SAAUC,UACZvB,sBAAwBuB,SAASC,eACjCjC,EAAE,uBAAuBkC,KAAKF,SAASG,WACnCC,iBAAmBC,2BAA2BL,UAC9ChC,EAAE,+BAA+BsC,OAAS,EAC1CtC,EAAE,iCAAiCuC,KAAKH,kBAExCpC,EAAE,iCAAiCwC,QAAQJ,kBAE/CpC,EAAE,gCAAgCyC,YAAY,UAC9CzC,EAAE,sDACES,sBAAwB,MAAMiC,SAAS,UAC3CnB,eAWZoB,YAAc,kBAkBPzC,IAAI0C,YAjBM,CACb,CAAEC,IAAK,eAAgBC,UAAW,iBAClC,CAAED,IAAK,gBAAiBC,UAAW,iBACnC,CAAED,IAAK,kBAAmBC,UAAW,iBACrC,CAAED,IAAK,eAAgBC,UAAW,iBAClC,CAAED,IAAK,sBAAuBC,UAAW,iBACzC,CAAED,IAAK,sBAAuBC,UAAW,iBACzC,CAAED,IAAK,YAAaC,UAAW,iBAC/B,CAAED,IAAK,oBAAqBC,UAAW,iBACvC,CAAED,IAAK,SAAUC,UAAW,QAC5B,CAAED,IAAK,OAAQC,UAAW,QAC1B,CAAED,IAAK,SAAUC,UAAW,QAC5B,CAAED,IAAK,oBAAqBC,UAAW,iBACvC,CAAED,IAAK,sBAAuBC,UAAW,iBACzC,CAAED,IAAK,eAAgBC,UAAW,mBAGHC,MAAK,SAAUC,SAC9ChC,QAAQiC,aAAeD,QAAQ,GAC/BhC,QAAQkC,cAAgBF,QAAQ,GAChChC,QAAQmC,gBAAkBH,QAAQ,GAClChC,QAAQoC,aAAeJ,QAAQ,GAC/BhC,QAAQqC,oBAAsBL,QAAQ,GACtChC,QAAQsC,oBAAsBN,QAAQ,GACtChC,QAAQuC,UAAYP,QAAQ,GAC5BhC,QAAQwC,kBAAoBR,QAAQ,GACpChC,QAAQyC,OAAST,QAAQ,GACzBhC,QAAQ0C,KAAOV,QAAQ,GACvBhC,QAAQ2C,OAASX,QAAQ,IACzBhC,QAAQ4C,kBAAoBZ,QAAQ,KAAO,qBAC3ChC,QAAQ6C,oBAAsBb,QAAQ,KAAO,kFAC7ChC,QAAQS,aAAeuB,QAAQ,KAAO,kBAEtCzC,eAAiBS,QAAQiC,aACzBzC,YAAcQ,QAAQkC,kBAO1BY,mBAAqB,SAAUC,gBAC/BC,QAAQ,CAAC,qBAAsB,sBAAsB,SAAS5D,aAAcC,iBACpE4D,aAAejE,EAAE,uBAAuBkC,OAE5C9B,aAAa8D,OAAO,CAChBC,KAAM/D,aAAagE,MAAMC,YACzBlC,MAAOnB,QAAQuC,UACfe,KAAM,iEACyCtD,QAAQ4C,kBADjD,wFAGFK,aAAaM,QAAQ,KAAM,UAHzB,aAKPxB,MAAK,SAAUyB,OACdA,MAAMC,kBAAkBzD,QAAQ0C,MAGhCc,MAAME,UAAUC,GAAGtE,YAAYqD,MAAM,SAAUkB,GAC3CA,EAAEC,qBACEC,SAAW9E,EAAE,6BAA6BsB,MAAMyD,OAChDD,UAAYA,WAAab,cACzBe,wBAAwBjB,eAAgBe,UAE5CN,MAAMS,UAIVT,MAAME,UAAUC,GAAGtE,YAAY6E,OAAO,WAClClF,EAAE,6BAA6BmF,QAAQC,YAI3CZ,MAAME,UAAUC,GAAG,WAAY,6BAA6B,SAAUC,GAClD,KAAZA,EAAES,QACFT,EAAEC,iBACFL,MAAMc,gBAAgBC,QAAQ,aAItCf,MAAMgB,cAQdC,2BAA6B,SAAU1B,eAAgB3C,YACvD4C,QAAQ,CAAC,qBAAsB,sBAAsB,SAAS5D,aAAcC,aACxED,aAAa8D,OAAO,CAChBC,KAAM/D,aAAagE,MAAMC,YACzBlC,MAAOnB,QAAQwC,kBACfc,KAAM,MAAQtD,QAAQ6C,oBAAsB,SAC7Cd,MAAK,SAAUyB,OACdA,MAAMC,kBAAkBzD,QAAQ2C,QAGhCa,MAAME,UAAUgB,KAAK,gBAAgBjD,YAAY,eAAeC,SAAS,cAGzE8B,MAAME,UAAUC,GAAGtE,YAAYqD,MAAM,SAAUkB,GAC3CA,EAAEC,iBACFc,kBAAkB5B,eAAgB3C,YAClCoD,MAAMS,UAGVT,MAAMgB,cAQdI,wBAA0B,SAAUxE,gBAEhCyE,kBAAoB7F,EAAE,gCAAgC8F,QACtDD,kBAAkBvD,OAAS,GAC3BuD,kBAAkBE,SAOtBC,sBAAwB,SAAU5E,YAClCnB,KAAK0B,KAAK,CAAC,CACPC,WAAY,oCACZC,KAAM,CAAEC,WAAYV,YACpBW,KAAM,SAAUC,UACZvB,sBAAwBuB,SAASC,eAGjCjC,EAAE,kBAAkBiG,QAGpBjG,EAAE,uBAAuBkC,KAAKF,SAASG,WAGnCC,iBAAmBC,2BAA2BL,UAC9ChC,EAAE,+BAA+BsC,OAAS,EAC1CtC,EAAE,iCAAiCuC,KAAKH,kBAExCpC,EAAE,iCAAiCwC,QAAQJ,kBAI/CpC,EAAE,gCAAgCyC,YAAY,UAC9CzC,EAAE,sDAAwDS,sBAAwB,MAAMiC,SAAS,UAG7F1C,EAAE,iBAAiBsC,QACnBtC,EAAE,iBAAiBmF,SAG3Be,KAAM,SAAUC,OACZhG,aAAaiG,gBAAgB,CACzBC,QAASF,MAAME,SAAWrF,QAAQkC,cAClCiB,KAAM,eASlBmC,iBAAmB,SAAUvC,eAAgB3C,YAE7CpB,EAAE,kBAAkBuC,KAAK,2EAErBvB,QAAQsC,oBACR,UAEJrD,KAAK0B,KAAK,CAAC,CACPC,WAAY,kCACZC,KAAM,CACFI,eAAgB8B,eAChBjC,WAAYV,YAEhBW,KAAM,SAAUC,UACZuE,QAAQC,IAAI,uBAAwBxE,UAEpCvB,sBAAwBsD,eAGxB/D,EAAE,uBAAuBkC,KAAKF,SAASG,OAGvCnC,EAAE,kBAAkBiG,QAEhBjE,SAASyE,UAAYzE,SAASyE,SAASnE,OAAS,GAChDN,SAASyE,SAASC,SAAQ,SAAUC,KAChCnF,aAA0B,SAAbmF,IAAIC,KAAkB,OAAS,MAAOD,IAAIN,QAASjF,YAAY,MAKhFY,SAAS6E,UACT7G,EAAE,sDAAwD+D,eAAiB,MACtE+C,KAAK,iBAAkB9E,SAAS6E,UAIzC7G,EAAE,gCAAgCyC,YAAY,UAC9CzC,EAAE,sDAAwD+D,eAAiB,MAAMrB,SAAS,UAG1F1C,EAAE,0BAA0ByC,YAAY,mBAGpCsE,iBAAmB/G,EAAE,kBACzB+G,iBAAiBC,QAAQ,CACrBC,UAAWF,iBAAiB,GAAGG,cAChC,KAGHlH,EAAE,iBAAiBmF,SAEvBe,KAAM,SAAUC,OACZI,QAAQJ,MAAM,8BAA+BA,OAC7CnG,EAAE,kBAAkBiG,YAEhBkB,aAAenG,QAAQkC,cACvBiD,MAAME,QACNc,aAAehB,MAAME,QACdF,MAAMA,QACbgB,aAAehB,MAAMA,OAGzB3E,aAAa,YAAa2F,aAAc/F,YAExCjB,aAAaiG,gBAAgB,CACzBC,QAASc,aACThD,KAAM,eASlBwB,kBAAoB,SAAU5B,eAAgB3C,YAC9CnB,KAAK0B,KAAK,CAAC,CACPC,WAAY,mCACZC,KAAM,CAAEI,eAAgB8B,gBACxBhC,KAAM,SAAUC,aACZuE,QAAQC,IAAI,+BAAgCxE,UAExCA,SAASoF,QAETpH,EAAE,sDAAwD+D,eAAiB,MACtEsD,QAAQ,KAAK,cACVrH,EAAEsH,MAAMC,SAGyC,IAA7CvH,EAAE,gCAAgCsC,OAElC0D,sBAAsB5E,gBACnB,KAECoG,UAAYxH,EAAE,gCAAgC8F,QAC9C0B,UAAUlF,OAAS,GACnBkF,UAAUzB,YAM1B5F,aAAaiG,gBAAgB,CACzBC,QAASrF,QAAQqC,oBACjBc,KAAM,gBAEP,CAEHnE,EAAE,kBAAkBiG,YAGhBwB,kBAAoBzH,EAAE,sDAAwD+D,eAAiB,MACnG0D,kBAAkB/B,KAAK,mCAAmCxD,KAAK,IAG/DuF,kBAAkBC,WAAW,kBAG7BvH,aAAaiG,gBAAgB,CACzBC,QAASrF,QAAQqC,oBACjBc,KAAM,cAIlB+B,KAAM,SAAUC,OACZI,QAAQJ,MAAM,+BAAgCA,OAC9ChG,aAAaiG,gBAAgB,CACzBC,QAASF,MAAME,SAAWrF,QAAQkC,cAClCiB,KAAM,eASlBa,wBAA0B,SAAUjB,eAAgBe,UAC/CA,UAAgC,KAApBA,SAASC,QAI1B9E,KAAK0B,KAAK,CAAC,CACPC,WAAY,0CACZC,KAAM,CACFI,eAAgB8B,eAChB5B,MAAO2C,UAEX/C,KAAM,SAAUC,aACZuE,QAAQC,IAAI,yBAA0BxE,UAElCA,UAAYA,SAAS2F,QAAS,CAE9B3H,EAAE,uBAAuBkC,KAAK4C,cAG1B8C,MAAQ5H,EAAE,sDAAwD+D,eAAiB,MACvF6D,MAAMlC,KAAK,eAAexD,KAAK4C,UAC/B8C,MAAMd,KAAK,aAAchC,UAEzB3E,aAAaiG,gBAAgB,CACzBC,QAAS,6BACTlC,KAAM,iBAGVhE,aAAaiG,gBAAgB,CACzBC,QAASrF,QAAQkC,cACjBiB,KAAM,WAIlB+B,KAAM,SAAUC,OACZI,QAAQJ,MAAM,wBAAyBA,OACvChG,aAAaiG,gBAAgB,CACzBC,QAASF,MAAME,SAAWrF,QAAQkC,cAClCiB,KAAM,eA8BlB0D,oBAAsB,SAAUC,YAChCA,WAAaA,WAAWC,cAExB/H,EAAE,gCAAgCgI,MAAK,eAC/B7F,MAAQnC,EAAEsH,MAAM5B,KAAK,eAAexD,OAAO6F,cAC3CE,QAAUjI,EAAEsH,MAAM5B,KAAK,mCAAmCxD,OAAO6F,cAEjE5F,MAAM+F,SAASJ,aAAeG,QAAQC,SAASJ,YAC/C9H,EAAEsH,MAAM9B,OAERxF,EAAEsH,MAAMrC,WAQhB5C,2BAA6B,SAAU8F,kBAEnCC,QADO,IAAIC,KAAgC,IAA3BF,aAAaG,aACdC,mBAAmB,GAAI,CAAEC,IAAK,UAAWC,MAAO,kBAE5D,kEACwBN,aAAalG,eADrC,iBAEckG,aAAahG,MAF3B,wEAI2BgG,aAAahG,MAJxC,oDAK4CiG,QAL5C,4DAO8CD,aAAaF,QAP3D,gBAcPS,YAAc,SAAUrC,QAASjF,WAAYC,UAExCZ,uBAqCLe,aAAa,OAAQ6E,QAASjF,YAC9BM,iBAAiB2E,QAASjF,WAAYC,WApClCpB,KAAK0B,KAAK,CAAC,CACPC,WAAY,oCACZC,KAAM,CAAEC,WAAYV,YACpBW,KAAM,SAAUC,UACZvB,sBAAwBuB,SAASC,eAGjCjC,EAAE,uBAAuBkC,KAAKF,SAASG,WAGnCC,iBAAmBC,2BAA2BL,UAC9ChC,EAAE,+BAA+BsC,OAAS,EAC1CtC,EAAE,iCAAiCuC,KAAKH,kBAExCpC,EAAE,iCAAiCwC,QAAQJ,kBAI/CpC,EAAE,gCAAgCyC,YAAY,UAC9CzC,EAAE,sDAAwDS,sBAAwB,MAAMiC,SAAS,UAGjGlB,aAAa,OAAQ6E,QAASjF,YAC9BM,iBAAiB2E,QAASjF,WAAYC,WAE1C6E,KAAM,SAAUC,OACZhG,aAAaiG,gBAAgB,CACzBC,QAASF,MAAME,SAAW7F,YAC1B2D,KAAM,eActBwE,cAAgB,cACXjI,UAAUC,aAIXiI,WAAa5I,EAAE,kBACf6I,OAASD,WAAWlD,KAAK,iBACzBoD,WAAaF,WAAWlD,KAAK,OAC7BqD,aAAeH,WAAWlD,KAAK,oBAE/BhF,UAAUI,UACV+H,OAAOG,KAAK,YAAY,GACxBF,WAAWE,KAAK,YAAY,KAE5BH,OAAOG,KAAK,YAAY,GACxBF,WAAWE,KAAK,YAAY,IAI5BD,aAAazG,OAAQ,KACjB2G,WAAcvI,UAAUG,KAAOH,UAAUE,MAAQ,IACrDmI,aAAaG,IAAI,QAASD,WAAa,KAGvCF,aAAatG,YAAY,kBACrBwG,WAAa,GACbF,aAAarG,SAAS,UACfuG,WAAa,IACpBF,aAAarG,SAAS,cAQ9ByG,gBAAkB,eACdC,IAAMf,KAAKe,MAAQ,IACnB1I,UAAUI,UAAYsI,IAAM1I,UAAUK,WAEtCsI,OAAOC,SAASC,UAWpB/H,aAAe,SAAU2C,KAAMkC,QAASjF,gBAAY4F,uEAChDD,iBAAmB/G,EAAE,oCAAsCoB,WAAa,qBAG/D,sBAAT+C,MACA4C,iBAAiBrB,KAAK,gCAAgC6B,aAGtDiC,YAAcxJ,EAAE,eAAe0C,SAAS,kBAAkBA,SAASyB,KAAKI,QAAQ,IAAK,MACrFkF,YAAczJ,EAAE,iBAAiBuC,KAAK8D,SAC1CmD,YAAYE,OAAOD,iBAGfE,WAAY,IAAItB,MAAOuB,mBAAmB,GAAI,CAAEC,KAAM,UAAWC,OAAQ,YACzEC,cAAgB/J,EAAE,iBAAiB0C,SAAS,qBAAqBR,KAAKyH,WAC1EH,YAAYE,OAAOK,eAEf/C,SACAwC,YAAYvE,OACZ8B,iBAAiB2C,OAAOF,aACxBA,YAAYQ,OAAO,MAEnBjD,iBAAiB2C,OAAOF,aAI5BzC,iBAAiBC,QAAQ,CACrBC,UAAWF,iBAAiB,GAAGG,cAChC,MASHxF,iBAAmB,SAAU2E,QAASjF,WAAYC,cAC9CwF,SAAW,QAGXpG,sBAAuB,KAEnBgH,kBAAoBzH,EAAE,sDAAwDS,sBAAwB,MACtGgH,kBAAkBnF,QAAUmF,kBAAkBwC,KAAK,eACnDpD,SAAWY,kBAAkBwC,KAAK,kBAKtCC,QAAUC,gBAAgB/I,YAE9BpB,EAAE,oCAAsCoB,WAAa,mBAAmBsB,SAAS,YACjF1C,EAAE,oCAAsCoB,WAAa,oBAAoBqB,YAAY,SACrFzC,EAAE,oCAAsCoB,WAAa,oBAAoB0F,KAAK,cAAevG,gBAC7FP,EAAE,oCAAsCoB,WAAa,oBAAoBgJ,OAEpEpK,EAAE,oCAAsCoB,WAAa,mCAAmCkB,QACzFd,aAAa,cAAe,MAAOJ,gBAGnCiJ,MAAQrK,EAAE,6BAA6BsB,MAGvCgJ,YAAc,CACdjE,QAASA,QACT6D,QAASA,QACT9I,WAAYA,WACZ2C,eAAgBtD,uBAAyB,KACzCoG,SAAUA,SACVwD,MAAOA,OAAS,MAIpB9D,QAAQC,IAAI,8BAA+B8D,aAE3CtK,EAAEuK,KAAK,CACHC,IAAKC,EAAEC,IAAIC,QAAU,oCACrBxG,KAAM,OACNyG,SAAU,OACVC,YAAa,mBACbZ,KAAMa,KAAKC,UAAUT,aACrB3C,QAAS,SAAUsC,MACf1D,QAAQC,IAAI,uBAAwByD,MAEpCjK,EAAE,6BAA6BsB,IAAI,QAC/ByF,iBAAmB/G,EAAE,oCAAsCoB,WAAa,wBAG5E2F,iBAAiBrB,KAAK,kEAAkE6B,SAExFvH,EAAE,oCAAsCoB,WAAa,mBAAmBqB,YAAY,YAEhFwH,KAAK5D,QAAS,IAEVgE,OAASJ,KAAKe,cAAe,CAC7BjE,iBAAiBrB,KAAK,qCAAqC6B,aACvD0D,YAAchB,KAAKe,cACnBf,KAAKiB,YACLD,YAAc,iCAAmChB,KAAKiB,UAAxC,wCACsBjB,KAAKe,cAAgB,UAE7DxJ,aAAa,OAAQyJ,YAAa7J,YAGtCI,aAAa,MAAOyI,KAAK5D,QAASjF,YAG9B6I,KAAKlG,iBAAmBtD,wBACxBA,sBAAwBwJ,KAAKlG,gBAI7BkG,KAAKpD,UAAYpG,uBACjBT,EAAE,sDAAwDS,sBAAwB,MAC7EqG,KAAK,iBAAkBmD,KAAKpD,UAIjCpG,uBACA0K,0BAA0B1K,sBAAuBwJ,KAAKe,eAAiB3E,SAIvE4D,KAAKvJ,WAAaA,UAAUC,UAC5BD,UAAUG,MAAQH,UAAUG,MAAQ,IAAMoJ,KAAKvJ,UAAU0K,OAAS,GAClEzC,gBAGIjI,UAAUG,MAAQH,UAAUE,QAC5BF,UAAUI,UAAW,EACrB6H,gBACAxI,aAAaiG,gBAAgB,CACzBC,QAASrF,QAAQqK,oBAAsB,uBACvClH,KAAM,iBAIX8F,KAAK9D,QACZI,QAAQJ,MAAM,gBAAiB8D,KAAK9D,OACZ,yBAApB8D,KAAK9D,MAAMhC,MACXzD,UAAUI,UAAW,EACrB6H,gBACAxI,aAAaiG,gBAAgB,CACzBC,QAAS4D,KAAK9D,MAAME,QACpBlC,KAAM,WAGV3C,aAAa,YAAayI,KAAK9D,MAAME,QAASjF,aAGlDpB,EAAE,iBAAiBsC,QACnBtC,EAAE,iBAAiBmF,SAG3BgB,MAAO,SAAUmF,IAAKC,OAAQpF,OAC1BI,QAAQJ,MAAM,cAAeoF,OAAQpF,MAAOmF,IAAIE,cACzBxL,EAAE,oCAAsCoB,WAAa,qBAC3DsE,KAAK,kEAAkE6B,SACxFvH,EAAE,oCAAsCoB,WAAa,mBAAmBqB,YAAY,gBAEhFgJ,SAAWjL,oBAEPwB,SAAW8I,KAAKY,MAAMJ,IAAIE,cAC1BxJ,SAASmE,QACTsF,SAAWzJ,SAASmE,MAAME,SAAWrE,SAASmE,OAEpD,MAAOvB,GACL6G,SAAWjL,YAAc,KAAO2F,MAAQ,IAG5C3E,aAAa,YAAaiK,SAAUrK,YACpCpB,EAAE,oCAAsCoB,WAAa,oBAAoBsB,SAAS,SAClF1C,EAAE,oCAAsCoB,WAAa,oBAAoB0F,KAAK,cAAetG,iBAQrG2K,0BAA4B,SAAUpH,eAAgB4H,gBACjDA,iBAED/D,MAAQ5H,EAAE,sDAAwD+D,eAAiB,SACnF6D,MAAMtF,OAAQ,CACdsF,MAAMlC,KAAK,mCAAmCxD,KAAKyJ,iBAC/CvC,IAAM,IAAIf,KACdT,MAAMlC,KAAK,gCAAgCxD,KACvCkH,IAAIb,mBAAmB,GAAI,CAAEC,IAAK,UAAWC,MAAO,aAInDb,MAAMgE,GAAG,iBACVhE,MAAMP,QAAQ,KAAK,WACfrH,EAAEsH,MAAMuE,UAAU,iCAAiC7B,OAAO,WAWtEG,gBAAkB,SAAU/I,gBACxB0K,WAAa,UACjB9L,EAAE,oCAAsCoB,WAAa,sBAAsB4G,MAAK,SAAU+D,MAAOC,YAEzFD,QADW/L,EAAE,oCAAsCoB,WAAa,sBAC7CkB,OAAS,OAI5B2J,KAAOC,SACPlM,EAAEgM,SAASG,SAAS,SACpBF,KAAOG,mBAIP3C,YAAczJ,EAAEgM,SAASK,QAC7B5C,YAAY/D,KAAK,sBAAsB6B,SACvCkC,YAAY/D,KAAK,SAAS6B,SAC1BkC,YAAY/D,KAAK,kBAAkB6B,SAEnCuE,WAAWQ,KAAK,MAAUL,aAAiBxC,YAAYvH,OAAO6C,aAG3D+G,kBAGJ,CACHS,KA15BO,SAAUtC,MACjB1D,QAAQC,IAAI,qCAAsCyD,UAE9C7I,WAAa6I,KAAK7I,WAClBC,SAAW4I,KAAK5I,SACD4I,KAAKuC,aAGxB9L,UAAUC,QAAUsJ,KAAKwC,oBAAqB,EAC9C/L,UAAUE,MAAQqJ,KAAKyC,YAAc,EACrChM,UAAUG,KAAOoJ,KAAK0C,YAAc,EACpCjM,UAAUI,SAAWmJ,KAAK2C,qBAAsB,EAChDlM,UAAUK,UAAYkJ,KAAKlJ,WAAa,EAGxCE,YAAYN,QAAUsJ,KAAK4C,eAAgB,EAC3C5L,YAAYC,KAAO+I,KAAK6C,WAAa,OAGrCnE,gBAGAhG,cAAcI,MAAK,WAEf6C,wBAAwBxE,YAGpBpB,EAAE,iBAAiBsC,QACnBtC,EAAE,iBAAiB8G,KAAK,cAAe9F,QAAQiC,iBAK9B,SAArBhC,YAAYC,MAAwC,SAArBD,YAAYC,OAC3ClB,EAAE+M,UAAUpI,GAAG,QAAS,oCAAsCvD,WAAa,oBAAoB,SAAUwD,MACrF,KAAZA,EAAES,QAAiBT,EAAEoI,SAAU,CAC/BpI,EAAEC,qBACEoI,UAAYjN,EAAE,6BAA6BsB,MACxB,KAAnBsD,EAAEsI,OAAOC,OAAiBzM,UAAUI,SAG7BmM,YAAcvM,UAAUI,UAC/BK,iBAAiBC,WAAYC,WAH7BqH,YAAY9D,EAAEsI,OAAOC,MAAO/L,WAAYC,UACxCuD,EAAEsI,OAAOC,MAAQ,QAO7BnN,EAAE+M,UAAUpI,GAAG,QAAS,oCAAsCvD,WAAa,UAAU,SAAUwD,OACvFwI,MAAQpN,EAAE,oCAAsCoB,WAAa,oBAC7D6L,UAAYjN,EAAE,6BAA6BsB,MAE1CZ,UAAUI,WACPmM,WAA6B,KAAhBG,MAAM9L,MAEnBH,iBAAiBC,WAAYC,UACtB4L,WAA6B,KAAhBG,MAAM9L,MAE1BoH,YAAY0E,MAAM9L,MAAOF,WAAYC,UACd,KAAhB+L,MAAM9L,QAEboH,YAAY0E,MAAM9L,MAAOF,WAAYC,UACrC+L,MAAM9L,IAAI,UAOtBL,YAAYN,UACa,UAArBM,YAAYC,KAEZlB,EAAE+M,UAAUpI,GAAG,cAAe,wBAAwB,WAClC3E,EAAE,6BAA6BsB,QAC7BZ,UAAUI,UACxBuM,YAAW,WACPlM,iBAAiBC,WAAYC,YAC9B,QAGiB,SAArBJ,YAAYC,MAEnBlB,EAAE+M,UAAUpI,GAAG,cAAe,wBAAwB,WAClD3E,EAAE,wBAAwBiK,KAAK,SAAS,OAMpDjK,EAAE+M,UAAUpI,GAAG,QAAS,yBAAyB,SAAUC,GACvDoB,sBAAsB5E,eAI1BpB,EAAE+M,UAAUpI,GAAG,QAAS,2BAA2B,SAAUC,GACrDnE,uBACAgF,2BAA2BhF,sBAAuBW,eAK1DpB,EAAE+M,UAAUpI,GAAG,QAAS,mBAAmB,SAAUC,GAC7CnE,uBACAqD,mBAAmBrD,0BAK3BT,EAAE+M,UAAUpI,GAAG,QAAS,gCAAgC,SAAUC,OAC1Db,eAAiB/D,EAAEsH,MAAM2C,KAAK,mBAClC3D,iBAAiBvC,eAAgB3C,eAIrCpB,EAAE+M,UAAUpI,GAAG,QAAS,wBAAwB,SAAUC,GACtDiD,oBAAoBjD,EAAEsI,OAAOC,UAIjCnN,EAAE+M,UAAUpI,GAAG,QAAS,uBAAuB,SAAUC,GACrD5E,EAAE,0BAA0BsN,YAAY,kBAIxCtN,EAAE,iBAAiBsC,QACnBtC,EAAE+M,UAAUpI,GAAG,QAAS,oCAAsCvD,WAAa,oBAAoB,SAAUwD,QAChG2I,MAAMC,OAAS,YACfD,MAAMC,OAASC,KAAKC,IAAIpG,KAAKJ,aAAc,KAAO,QAK3DxG,UAAUC,SACVgN,YAAYxE,gBAAiB,KAIgB,IAA7CnJ,EAAE,gCAAgCsC,QAClC0D,sBAAsB5E"}