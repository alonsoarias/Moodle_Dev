{"version":3,"file":"lib.min.js","sources":["../src/lib.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Main JavaScript for INTEB Chat module with Conversations Management\r\n *\r\n * @module     mod_intebchat/lib\r\n * @copyright  2025 Alonso Arias <soporte@ingeweb.co>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\ndefine(['jquery', 'core/ajax', 'core/str', 'core/notification', 'core/modal_factory', 'core/modal_events', 'core/templates'],\r\n    function ($, Ajax, Str, Notification, ModalFactory, ModalEvents, Templates) {\r\n        var questionString = 'Ask a question...';\r\n        var errorString = 'An error occurred! Please try again later.';\r\n        var currentConversationId = null;\r\n        var tokenInfo = {\r\n            enabled: false,\r\n            limit: 0,\r\n            used: 0,\r\n            exceeded: false,\r\n            resetTime: 0\r\n        };\r\n        var strings = {};\r\n        var audioConfig = {\r\n            enabled: false,\r\n            mode: 'text'\r\n        };\r\n\r\n        /**\r\n         * Initialize the module with conversation management\r\n         * @param {Object} data Configuration data\r\n         */\r\n        var init = function (data) {\r\n            var instanceId = data.instanceId;\r\n            var api_type = data.api_type;\r\n            var persistConvo = data.persistConvo;\r\n\r\n            // Initialize token info\r\n            tokenInfo.enabled = data.tokenLimitEnabled || false;\r\n            tokenInfo.limit = data.tokenLimit || 0;\r\n            tokenInfo.used = data.tokensUsed || 0;\r\n            tokenInfo.exceeded = data.tokenLimitExceeded || false;\r\n            tokenInfo.resetTime = data.resetTime || 0;\r\n\r\n            // Initialize audio config\r\n            audioConfig.enabled = data.audioEnabled || false;\r\n            audioConfig.mode = data.audioMode || 'text';\r\n\r\n            // Update UI based on token limit status\r\n            updateTokenUI();\r\n\r\n            // Load strings first\r\n            loadStrings().then(function () {\r\n                // Initialize conversation management after strings are loaded\r\n                initializeConversations(instanceId);\r\n\r\n                // Set placeholder\r\n                if ($('#openai_input').length) {\r\n                    $('#openai_input').attr('placeholder', strings.askaquestion);\r\n                }\r\n            });\r\n\r\n            // Event listeners for chat input - adjusted for audio modes\r\n            if (audioConfig.mode === 'text' || audioConfig.mode === 'both') {\r\n                $(document).on('keyup', '.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input', function (e) {\r\n                    if (e.which === 13 && !e.shiftKey && e.target.value !== \"\") {\r\n                        e.preventDefault();\r\n                        if (!tokenInfo.exceeded) {\r\n                            sendMessage(e.target.value, instanceId, api_type);\r\n                            e.target.value = '';\r\n                        }\r\n                    }\r\n                });\r\n\r\n                $(document).on('click', '.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #go', function (e) {\r\n                    var input = $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input');\r\n                    if (input.val() !== \"\" && !tokenInfo.exceeded) {\r\n                        sendMessage(input.val(), instanceId, api_type);\r\n                        input.val('');\r\n                    }\r\n                });\r\n            }\r\n\r\n            // Audio mode specific handlers\r\n            if (audioConfig.enabled) {\r\n                if (audioConfig.mode === 'audio') {\r\n                    // For audio-only mode, automatically send when recording stops\r\n                    $(document).on('audio-ready', '#intebchat-icon-stop', function () {\r\n                        var audioData = $('#intebchat-recorded-audio').val();\r\n                        if (audioData && !tokenInfo.exceeded) {\r\n                            sendAudioMessage(instanceId, api_type);\r\n                        }\r\n                    });\r\n                } else if (audioConfig.mode === 'both') {\r\n                    // In mixed mode wait for the user to press send\r\n                    $(document).on('audio-ready', '#intebchat-icon-stop', function () {\r\n                        $('#intebchat-icon-stop').data('ready', true);\r\n                    });\r\n                }\r\n            }\r\n\r\n            // New conversation button\r\n            $(document).on('click', '#new-conversation-btn', function (e) {\r\n                createNewConversation(instanceId);\r\n            });\r\n\r\n            // Clear conversation button with modal\r\n            $(document).on('click', '#clear-conversation-btn', function (e) {\r\n                if (currentConversationId) {\r\n                    showClearConversationModal(currentConversationId, instanceId);\r\n                }\r\n            });\r\n\r\n            // Edit title button with modal\r\n            $(document).on('click', '#edit-title-btn', function (e) {\r\n                if (currentConversationId) {\r\n                    showEditTitleModal(currentConversationId);\r\n                }\r\n            });\r\n\r\n            // Conversation item click\r\n            $(document).on('click', '.intebchat-conversation-item', function (e) {\r\n                var conversationId = $(this).data('conversation-id');\r\n                loadConversation(conversationId, instanceId);\r\n            });\r\n\r\n            // Search conversations\r\n            $(document).on('input', '#conversation-search', function (e) {\r\n                filterConversations(e.target.value);\r\n            });\r\n\r\n            // Mobile menu toggle\r\n            $(document).on('click', '#mobile-menu-toggle', function (e) {\r\n                $('#conversations-sidebar').toggleClass('mobile-open');\r\n            });\r\n\r\n            // Auto-resize textarea\r\n            if ($('#openai_input').length) {\r\n                $(document).on('input', '.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input', function (e) {\r\n                    this.style.height = 'auto';\r\n                    this.style.height = Math.min(this.scrollHeight, 120) + 'px';\r\n                });\r\n            }\r\n\r\n            // Check token limit periodically if enabled\r\n            if (tokenInfo.enabled) {\r\n                setInterval(checkTokenReset, 60000); // Check every minute\r\n            }\r\n\r\n            // Start with a new conversation if none exists\r\n            if ($('.intebchat-conversation-item').length === 0) {\r\n                createNewConversation(instanceId);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Send audio message\r\n         */\r\n        var sendAudioMessage = function (instanceId, api_type) {\r\n            var audioData = $('#intebchat-recorded-audio').val();\r\n            if (!audioData) {\r\n                return;\r\n            }\r\n\r\n            var doSend = function () {\r\n                addToChatLog('user transcribing', '<i class=\"fa fa-microphone\"></i> ' +\r\n                    (strings.transcribing || 'Transcribing...'), instanceId);\r\n                createCompletion('', instanceId, api_type);\r\n            };\r\n\r\n            if (!currentConversationId) {\r\n                Ajax.call([{\r\n                    methodname: 'mod_intebchat_create_conversation',\r\n                    args: { instanceid: instanceId },\r\n                    done: function (response) {\r\n                        currentConversationId = response.conversationid;\r\n                        $('#conversation-title').text(response.title);\r\n                        var conversationHtml = createConversationListItem(response);\r\n                        if ($('.intebchat-no-conversations').length > 0) {\r\n                            $('.intebchat-conversations-list').html(conversationHtml);\r\n                        } else {\r\n                            $('.intebchat-conversations-list').prepend(conversationHtml);\r\n                        }\r\n                        $('.intebchat-conversation-item').removeClass('active');\r\n                        $('.intebchat-conversation-item[data-conversation-id=\"' +\r\n                            currentConversationId + '\"]').addClass('active');\r\n                        doSend();\r\n                    }\r\n                }]);\r\n            } else {\r\n                doSend();\r\n            }\r\n        };\r\n\r\n\r\n        /**\r\n         * Load all required strings\r\n         */\r\n        var loadStrings = function () {\r\n            var stringkeys = [\r\n                { key: 'askaquestion', component: 'mod_intebchat' },\r\n                { key: 'erroroccurred', component: 'mod_intebchat' },\r\n                { key: 'newconversation', component: 'mod_intebchat' },\r\n                { key: 'confirmclear', component: 'mod_intebchat' },\r\n                { key: 'conversationcleared', component: 'mod_intebchat' },\r\n                { key: 'loadingconversation', component: 'mod_intebchat' },\r\n                { key: 'edittitle', component: 'mod_intebchat' },\r\n                { key: 'clearconversation', component: 'mod_intebchat' },\r\n                { key: 'cancel', component: 'core' },\r\n                { key: 'save', component: 'core' },\r\n                { key: 'delete', component: 'core' },\r\n                { key: 'conversationtitle', component: 'mod_intebchat' },\r\n                { key: 'confirmclearmessage', component: 'mod_intebchat' }\r\n            ];\r\n\r\n            return Str.get_strings(stringkeys).then(function (results) {\r\n                strings.askaquestion = results[0];\r\n                strings.erroroccurred = results[1];\r\n                strings.newconversation = results[2];\r\n                strings.confirmclear = results[3];\r\n                strings.conversationcleared = results[4];\r\n                strings.loadingconversation = results[5];\r\n                strings.edittitle = results[6];\r\n                strings.clearconversation = results[7];\r\n                strings.cancel = results[8];\r\n                strings.save = results[9];\r\n                strings.delete = results[10];\r\n                strings.conversationtitle = results[11] || 'Conversation Title';\r\n                strings.confirmclearmessage = results[12] || 'Are you sure you want to clear this conversation? This action cannot be undone.';\r\n\r\n                questionString = strings.askaquestion;\r\n                errorString = strings.erroroccurred;\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Show modal for editing conversation title\r\n         */\r\n        var showEditTitleModal = function (conversationId) {\r\n            var currentTitle = $('#conversation-title').text();\r\n\r\n            ModalFactory.create({\r\n                type: ModalFactory.types.SAVE_CANCEL,\r\n                title: strings.edittitle,\r\n                body: '<div class=\"form-group\">' +\r\n                    '<label for=\"conversation-title-input\">' + strings.conversationtitle + '</label>' +\r\n                    '<input type=\"text\" class=\"form-control\" id=\"conversation-title-input\" value=\"' +\r\n                    currentTitle.replace(/\"/g, '&quot;') + '\">' +\r\n                    '</div>'\r\n            }).then(function (modal) {\r\n                modal.setSaveButtonText(strings.save);\r\n\r\n                // Handle save\r\n                modal.getRoot().on(ModalEvents.save, function (e) {\r\n                    var newTitle = $('#conversation-title-input').val().trim();\r\n                    if (newTitle && newTitle !== currentTitle) {\r\n                        updateConversationTitle(conversationId, newTitle);\r\n                    }\r\n                });\r\n\r\n                // Focus input when modal is shown\r\n                modal.getRoot().on(ModalEvents.shown, function () {\r\n                    $('#conversation-title-input').focus().select();\r\n                });\r\n\r\n                // Handle enter key in input\r\n                modal.getRoot().on('keypress', '#conversation-title-input', function (e) {\r\n                    if (e.which === 13) {\r\n                        modal.save();\r\n                    }\r\n                });\r\n\r\n                modal.show();\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Show modal for clearing conversation\r\n         */\r\n        var showClearConversationModal = function (conversationId, instanceId) {\r\n            ModalFactory.create({\r\n                type: ModalFactory.types.SAVE_CANCEL,\r\n                title: strings.clearconversation,\r\n                body: '<p>' + strings.confirmclearmessage + '</p>'\r\n            }).then(function (modal) {\r\n                modal.setSaveButtonText(strings.delete);\r\n\r\n                // Style the save button as danger\r\n                modal.getRoot().find('.btn-primary').removeClass('btn-primary').addClass('btn-danger');\r\n\r\n                // Handle delete\r\n                modal.getRoot().on(ModalEvents.save, function (e) {\r\n                    clearConversation(conversationId, instanceId);\r\n                });\r\n\r\n                modal.show();\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Initialize conversation management\r\n         */\r\n        var initializeConversations = function (instanceId) {\r\n            // Load first conversation if exists\r\n            var firstConversation = $('.intebchat-conversation-item').first();\r\n            if (firstConversation.length > 0) {\r\n                firstConversation.click();\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Create a new conversation\r\n         */\r\n        var createNewConversation = function (instanceId) {\r\n            Ajax.call([{\r\n                methodname: 'mod_intebchat_create_conversation',\r\n                args: { instanceid: instanceId },\r\n                done: function (response) {\r\n                    currentConversationId = response.conversationid;\r\n\r\n                    // Clear chat log\r\n                    $('#intebchat_log').empty();\r\n\r\n                    // Update header\r\n                    $('#conversation-title').text(response.title);\r\n\r\n                    // Add to sidebar\r\n                    var conversationHtml = createConversationListItem(response);\r\n                    if ($('.intebchat-no-conversations').length > 0) {\r\n                        $('.intebchat-conversations-list').html(conversationHtml);\r\n                    } else {\r\n                        $('.intebchat-conversations-list').prepend(conversationHtml);\r\n                    }\r\n\r\n                    // Set as active\r\n                    $('.intebchat-conversation-item').removeClass('active');\r\n                    $('.intebchat-conversation-item[data-conversation-id=\"' + currentConversationId + '\"]').addClass('active');\r\n\r\n                    // Focus input\r\n                    if ($('#openai_input').length) {\r\n                        $('#openai_input').focus();\r\n                    }\r\n                },\r\n                fail: function (error) {\r\n                    Notification.addNotification({\r\n                        message: error.message || strings.erroroccurred,\r\n                        type: 'error'\r\n                    });\r\n                }\r\n            }]);\r\n        };\r\n\r\n        /**\r\n         * Load a conversation\r\n         */\r\n        var loadConversation = function (conversationId, instanceId) {\r\n            // Show loading state\r\n            $('#intebchat_log').html('<div class=\"loading-conversation\">' +\r\n                '<i class=\"fa fa-spinner fa-spin\"></i> ' +\r\n                strings.loadingconversation +\r\n                '</div>');\r\n\r\n            Ajax.call([{\r\n                methodname: 'mod_intebchat_load_conversation',\r\n                args: {\r\n                    conversationid: conversationId,\r\n                    instanceid: instanceId\r\n                },\r\n                done: function (response) {\r\n                    currentConversationId = conversationId;\r\n\r\n                    // Update header\r\n                    $('#conversation-title').text(response.title);\r\n\r\n                    // Clear and load messages\r\n                    $('#intebchat_log').empty();\r\n                    response.messages.forEach(function (msg) {\r\n                        addToChatLog(msg.role === 'user' ? 'user' : 'bot', msg.message, instanceId, false);\r\n                    });\r\n\r\n                    // Update active state\r\n                    $('.intebchat-conversation-item').removeClass('active');\r\n                    $('.intebchat-conversation-item[data-conversation-id=\"' + conversationId + '\"]').addClass('active');\r\n\r\n                    // Close mobile sidebar\r\n                    $('#conversations-sidebar').removeClass('mobile-open');\r\n\r\n                    // Scroll to bottom\r\n                    var messageContainer = $('#intebchat_log');\r\n                    messageContainer.animate({\r\n                        scrollTop: messageContainer[0].scrollHeight\r\n                    }, 300);\r\n                },\r\n                fail: function (error) {\r\n                    $('#intebchat_log').empty();\r\n                    Notification.addNotification({\r\n                        message: error.message || strings.erroroccurred,\r\n                        type: 'error'\r\n                    });\r\n                }\r\n            }]);\r\n        };\r\n\r\n        /**\r\n         * Clear a conversation\r\n         */\r\n        var clearConversation = function (conversationId, instanceId) {\r\n            Ajax.call([{\r\n                methodname: 'mod_intebchat_clear_conversation',\r\n                args: { conversationid: conversationId },\r\n                done: function (response) {\r\n                    if (response.deleted) {\r\n                        // Conversation was deleted completely\r\n                        // Remove from sidebar\r\n                        $('.intebchat-conversation-item[data-conversation-id=\"' + conversationId + '\"]').fadeOut(300, function () {\r\n                            $(this).remove();\r\n\r\n                            // Check if there are any conversations left\r\n                            if ($('.intebchat-conversation-item').length === 0) {\r\n                                // No conversations left, create a new one\r\n                                createNewConversation(instanceId);\r\n                            } else {\r\n                                // Select the first available conversation\r\n                                var firstConv = $('.intebchat-conversation-item').first();\r\n                                if (firstConv.length > 0) {\r\n                                    firstConv.click();\r\n                                }\r\n                            }\r\n                        });\r\n\r\n                        // Show notification\r\n                        Notification.addNotification({\r\n                            message: strings.conversationcleared,\r\n                            type: 'success'\r\n                        });\r\n                    } else {\r\n                        // Conversation was cleared but not deleted\r\n                        // Clear chat log\r\n                        $('#intebchat_log').empty();\r\n\r\n                        // Update the preview in sidebar to empty\r\n                        var $conversationItem = $('.intebchat-conversation-item[data-conversation-id=\"' + conversationId + '\"]');\r\n                        $conversationItem.find('.intebchat-conversation-preview').text('');\r\n\r\n                        // Show notification\r\n                        Notification.addNotification({\r\n                            message: strings.conversationcleared,\r\n                            type: 'success'\r\n                        });\r\n\r\n                        // Update the conversation list to reflect the change\r\n                        refreshConversationInSidebar(conversationId);\r\n                    }\r\n                },\r\n                fail: function (error) {\r\n                    Notification.addNotification({\r\n                        message: error.message || strings.erroroccurred,\r\n                        type: 'error'\r\n                    });\r\n                }\r\n            }]);\r\n        };\r\n\r\n        /**\r\n         * Update conversation title\r\n         */\r\n        var updateConversationTitle = function (conversationId, newTitle) {\r\n            Ajax.call([{\r\n                methodname: 'mod_intebchat_update_conversation_title',\r\n                args: {\r\n                    conversationid: conversationId,\r\n                    title: newTitle\r\n                },\r\n                done: function (response) {\r\n                    if (response && response.success) {\r\n                        // Update header\r\n                        $('#conversation-title').text(newTitle);\r\n                        // Update sidebar and stored title\r\n                        var $item = $('.intebchat-conversation-item[data-conversation-id=\"' + conversationId + '\"]');\r\n                        $item.find('.title-text').text(newTitle);\r\n                        $item.attr('data-title', newTitle);\r\n\r\n                        Notification.addNotification({\r\n                            message: strings.edittitle,\r\n                            type: 'success'\r\n                        });\r\n                    } else {\r\n                        Notification.addNotification({\r\n                            message: strings.erroroccurred,\r\n                            type: 'error'\r\n                        });\r\n                    }\r\n                },\r\n                fail: function (error) {\r\n                    Notification.addNotification({\r\n                        message: error.message || strings.erroroccurred,\r\n                        type: 'error'\r\n                    });\r\n                }\r\n            }]);\r\n        };\r\n\r\n        /**\r\n         * Refresh a conversation in the sidebar\r\n         */\r\n        var refreshConversationInSidebar = function (conversationId) {\r\n            var $item = $('.intebchat-conversation-item[data-conversation-id=\"' + conversationId + '\"]');\r\n            if ($item.length) {\r\n                // Update the modified time\r\n                var now = new Date();\r\n                $item.find('.intebchat-conversation-date').text(\r\n                    now.toLocaleDateString([], { day: '2-digit', month: '2-digit' })\r\n                );\r\n\r\n                // Move to top if not already there\r\n                if (!$item.is(':first-child')) {\r\n                    $item.fadeOut(200, function () {\r\n                        $(this).prependTo('.intebchat-conversations-list').fadeIn(200);\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Filter conversations\r\n         */\r\n        var filterConversations = function (searchTerm) {\r\n            searchTerm = searchTerm.toLowerCase();\r\n\r\n            $('.intebchat-conversation-item').each(function () {\r\n                var title = $(this).find('.title-text').text().toLowerCase();\r\n                var preview = $(this).find('.intebchat-conversation-preview').text().toLowerCase();\r\n\r\n                if (title.includes(searchTerm) || preview.includes(searchTerm)) {\r\n                    $(this).show();\r\n                } else {\r\n                    $(this).hide();\r\n                }\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Create conversation list item HTML\r\n         */\r\n        var createConversationListItem = function (conversation) {\r\n            var date = new Date(conversation.lastmessage * 1000);\r\n            var dateStr = date.toLocaleDateString([], { day: '2-digit', month: '2-digit' });\r\n\r\n            return '<div class=\"intebchat-conversation-item\" ' +\r\n                'data-conversation-id=\"' + conversation.conversationid + '\" ' +\r\n                'data-title=\"' + conversation.title + '\">' +\r\n                '<div class=\"intebchat-conversation-title\">' +\r\n                '<span class=\"title-text\">' + conversation.title + '</span>' +\r\n                '<span class=\"intebchat-conversation-date\">' + dateStr + '</span>' +\r\n                '</div>' +\r\n                '<div class=\"intebchat-conversation-preview\">' + conversation.preview + '</div>' +\r\n                '</div>';\r\n        };\r\n\r\n        /**\r\n         * Send message (enhanced with conversation management)\r\n         */\r\n        var sendMessage = function (message, instanceId, api_type) {\r\n            // Create new conversation if none exists\r\n            if (!currentConversationId) {\r\n                // Create conversation first, then send message\r\n                Ajax.call([{\r\n                    methodname: 'mod_intebchat_create_conversation',\r\n                    args: { instanceid: instanceId },\r\n                    done: function (response) {\r\n                        currentConversationId = response.conversationid;\r\n\r\n                        // Update header\r\n                        $('#conversation-title').text(response.title);\r\n\r\n                        // Add to sidebar\r\n                        var conversationHtml = createConversationListItem(response);\r\n                        if ($('.intebchat-no-conversations').length > 0) {\r\n                            $('.intebchat-conversations-list').html(conversationHtml);\r\n                        } else {\r\n                            $('.intebchat-conversations-list').prepend(conversationHtml);\r\n                        }\r\n\r\n                        // Set as active\r\n                        $('.intebchat-conversation-item').removeClass('active');\r\n                        $('.intebchat-conversation-item[data-conversation-id=\"' + currentConversationId + '\"]').addClass('active');\r\n\r\n                        // Now send the message\r\n                        addToChatLog('user', message, instanceId);\r\n                        createCompletion(message, instanceId, api_type);\r\n                    },\r\n                    fail: function (error) {\r\n                        Notification.addNotification({\r\n                            message: error.message || errorString,\r\n                            type: 'error'\r\n                        });\r\n                    }\r\n                }]);\r\n                return;\r\n            }\r\n\r\n            addToChatLog('user', message, instanceId);\r\n            createCompletion(message, instanceId, api_type);\r\n        };\r\n\r\n        /**\r\n         * Update UI based on token limit status\r\n         */\r\n        var updateTokenUI = function () {\r\n            if (!tokenInfo.enabled) {\r\n                return;\r\n            }\r\n\r\n            var $container = $('.mod_intebchat');\r\n            var $input = $container.find('#openai_input');\r\n            var $submitBtn = $container.find('#go');\r\n            var $progressBar = $container.find('.progress-bar');\r\n\r\n            if (tokenInfo.exceeded) {\r\n                $input.prop('disabled', true);\r\n                $submitBtn.prop('disabled', true);\r\n            } else {\r\n                $input.prop('disabled', false);\r\n                $submitBtn.prop('disabled', false);\r\n            }\r\n\r\n            // Update progress bar\r\n            if ($progressBar.length) {\r\n                var percentage = (tokenInfo.used / tokenInfo.limit * 100);\r\n                $progressBar.css('width', percentage + '%');\r\n\r\n                // Update color based on usage\r\n                $progressBar.removeClass('warning danger');\r\n                if (percentage > 90) {\r\n                    $progressBar.addClass('danger');\r\n                } else if (percentage > 75) {\r\n                    $progressBar.addClass('warning');\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Check if token limit has reset\r\n         */\r\n        var checkTokenReset = function () {\r\n            var now = Date.now() / 1000;\r\n            if (tokenInfo.exceeded && now > tokenInfo.resetTime) {\r\n                // Reload page to refresh token status\r\n                window.location.reload();\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Add a message to the chat UI\r\n         * @param {string} type Which side of the UI the message should be on. Can be \"user\" or \"bot\"\r\n         * @param {string} message The text of the message to add\r\n         * @param {int} instanceId The ID of the instance to manipulate\r\n         * @param {boolean} animate Whether to animate the message\r\n         */\r\n        var addToChatLog = function (type, message, instanceId, animate = true) {\r\n            var messageContainer = $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #intebchat_log');\r\n\r\n            // Remove transcribing message if exists\r\n            if (type !== 'user transcribing') {\r\n                messageContainer.find('.openai_message.transcribing').remove();\r\n            }\r\n\r\n            var messageElem = $('<div></div>').addClass('openai_message').addClass(type.replace(' ', '-'));\r\n            var messageText = $('<span></span>').html(message);\r\n            messageElem.append(messageText);\r\n\r\n            // Add timestamp\r\n            var timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n            var timestampElem = $('<span></span>').addClass('message-timestamp').text(timestamp);\r\n            messageElem.append(timestampElem);\r\n\r\n            if (animate) {\r\n                messageElem.hide();\r\n                messageContainer.append(messageElem);\r\n                messageElem.fadeIn(300);\r\n            } else {\r\n                messageContainer.append(messageElem);\r\n            }\r\n\r\n            // Smooth scroll to bottom\r\n            messageContainer.animate({\r\n                scrollTop: messageContainer[0].scrollHeight\r\n            }, 300);\r\n        };\r\n\r\n        /**\r\n         * Makes an API request to get a completion from GPT\r\n         * @param {string} message The text to get a completion for\r\n         * @param {int} instanceId The ID of the instance\r\n         * @param {string} api_type \"assistant\" | \"chat\" The type of API to use\r\n         */\r\n        var createCompletion = function (message, instanceId, api_type) {\r\n            var threadId = null;\r\n\r\n            // Build history from current conversation\r\n            var history = buildTranscript(instanceId);\r\n\r\n            $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #control_bar').addClass('disabled');\r\n            $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input').removeClass('error');\r\n            $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input').attr('placeholder', questionString);\r\n            $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input').blur();\r\n\r\n            if (!$('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] .openai_message.transcribing').length) {\r\n                addToChatLog('bot loading', '...', instanceId);\r\n            }\r\n\r\n            var audio = $('#intebchat-recorded-audio').val();\r\n            $.ajax({\r\n                url: M.cfg.wwwroot + '/mod/intebchat/api/completion.php',\r\n                type: 'POST',\r\n                dataType: 'json',\r\n                contentType: 'application/json',\r\n                data: JSON.stringify({\r\n                    message: message,\r\n                    history: history,\r\n                    instanceId: instanceId,\r\n                    conversationId: currentConversationId || null,\r\n                    threadId: threadId,\r\n                    audio: audio || null\r\n                }),\r\n                success: function (data) {\r\n                    $('#intebchat-recorded-audio').val('');\r\n                    var messageContainer = $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #intebchat_log');\r\n\r\n                    // Remove loading or transcribing message\r\n                    messageContainer.find('.openai_message.bot-loading, .openai_message.user-transcribing').remove();\r\n\r\n                    $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #control_bar').removeClass('disabled');\r\n\r\n                    if (data.message) {\r\n                        // If we had audio input, replace the transcribing message with actual transcription\r\n                        if (audio && data.transcription) {\r\n                            messageContainer.find('.openai_message.user-transcribing').remove();\r\n                            addToChatLog('user', data.transcription, instanceId);\r\n                        }\r\n\r\n                        addToChatLog('bot', data.message, instanceId);\r\n\r\n                        // Update conversation ID if returned (for cases where conversation was created server-side)\r\n                        if (data.conversationId && !currentConversationId) {\r\n                            currentConversationId = data.conversationId;\r\n                        }\r\n\r\n                        // Update conversation preview\r\n                        if (currentConversationId) {\r\n                            updateConversationPreview(currentConversationId, data.transcription || message);\r\n                        }\r\n\r\n                        // Update token usage if provided\r\n                        if (data.tokenInfo && tokenInfo.enabled) {\r\n                            tokenInfo.used += data.tokenInfo.total || 0;\r\n                            updateTokenUI();\r\n\r\n                            // Check if limit exceeded\r\n                            if (tokenInfo.used >= tokenInfo.limit) {\r\n                                tokenInfo.exceeded = true;\r\n                                updateTokenUI();\r\n                                Notification.addNotification({\r\n                                    message: strings.tokenlimitexceeded || 'Token limit exceeded',\r\n                                    type: 'error'\r\n                                });\r\n                            }\r\n                        }\r\n                    } else if (data.error) {\r\n                        if (data.error.type === 'token_limit_exceeded') {\r\n                            tokenInfo.exceeded = true;\r\n                            updateTokenUI();\r\n                            Notification.addNotification({\r\n                                message: data.error.message,\r\n                                type: 'error'\r\n                            });\r\n                        } else {\r\n                            addToChatLog('bot error', data.error.message, instanceId);\r\n                        }\r\n                    }\r\n                    if ($('#openai_input').length) {\r\n                        $('#openai_input').focus();\r\n                    }\r\n                },\r\n                error: function (xhr, status, error) {\r\n                    var messageContainer = $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #intebchat_log');\r\n                    messageContainer.find('.openai_message.bot-loading, .openai_message.user-transcribing').remove();\r\n                    $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #control_bar').removeClass('disabled');\r\n\r\n                    var errorMsg = errorString;\r\n                    try {\r\n                        var response = JSON.parse(xhr.responseText);\r\n                        if (response.error) {\r\n                            errorMsg = response.error;\r\n                        }\r\n                    } catch (e) {\r\n                        // Use default error message\r\n                    }\r\n\r\n                    addToChatLog('bot error', errorMsg, instanceId);\r\n                    $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input').addClass('error');\r\n                    $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input').attr('placeholder', errorString);\r\n                }\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Update conversation preview in sidebar\r\n         */\r\n        var updateConversationPreview = function (conversationId, lastMessage) {\r\n            if (!lastMessage) return;\r\n\r\n            var $item = $('.intebchat-conversation-item[data-conversation-id=\"' + conversationId + '\"]');\r\n            if ($item.length) {\r\n                $item.find('.intebchat-conversation-preview').text(lastMessage);\r\n                var now = new Date();\r\n                $item.find('.intebchat-conversation-date').text(\r\n                    now.toLocaleDateString([], { day: '2-digit', month: '2-digit' })\r\n                );\r\n\r\n                // Move conversation to top if it's not already there\r\n                if (!$item.is(':first-child')) {\r\n                    $item.fadeOut(200, function () {\r\n                        $(this).prependTo('.intebchat-conversations-list').fadeIn(200);\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Using the existing messages in the chat history, create a string that can be used to aid completion\r\n         * @param {int} instanceId The instance from which to build the history\r\n         * @return {Array} A transcript of the conversation up to this point\r\n         */\r\n        var buildTranscript = function (instanceId) {\r\n            var transcript = [];\r\n            $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] .openai_message').each(function (index, element) {\r\n                var messages = $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] .openai_message');\r\n                if (index === messages.length - 1) {\r\n                    return;\r\n                }\r\n\r\n                var user = userName;\r\n                if ($(element).hasClass('bot')) {\r\n                    user = assistantName;\r\n                }\r\n\r\n                // Remove timestamp from message text\r\n                var messageText = $(element).clone();\r\n                messageText.find('.message-timestamp').remove();\r\n                messageText.find('audio').remove(); // Remove audio elements\r\n                messageText.find('.transcription').remove(); // Remove transcription wrapper\r\n\r\n                transcript.push({ \"user\": user, \"message\": messageText.text().trim() });\r\n            });\r\n\r\n            return transcript;\r\n        };\r\n\r\n        return {\r\n            init: init\r\n        };\r\n    });"],"names":["define","$","Ajax","Str","Notification","ModalFactory","ModalEvents","Templates","questionString","errorString","currentConversationId","tokenInfo","enabled","limit","used","exceeded","resetTime","strings","audioConfig","mode","sendAudioMessage","instanceId","api_type","val","doSend","addToChatLog","transcribing","createCompletion","call","methodname","args","instanceid","done","response","conversationid","text","title","conversationHtml","createConversationListItem","length","html","prepend","removeClass","addClass","loadStrings","get_strings","key","component","then","results","askaquestion","erroroccurred","newconversation","confirmclear","conversationcleared","loadingconversation","edittitle","clearconversation","cancel","save","delete","conversationtitle","confirmclearmessage","showEditTitleModal","conversationId","currentTitle","create","type","types","SAVE_CANCEL","body","replace","modal","setSaveButtonText","getRoot","on","e","newTitle","trim","updateConversationTitle","shown","focus","select","which","show","showClearConversationModal","find","clearConversation","initializeConversations","firstConversation","first","click","createNewConversation","empty","fail","error","addNotification","message","loadConversation","messages","forEach","msg","role","messageContainer","animate","scrollTop","scrollHeight","deleted","fadeOut","this","remove","firstConv","refreshConversationInSidebar","success","$item","attr","now","Date","toLocaleDateString","day","month","is","prependTo","fadeIn","filterConversations","searchTerm","toLowerCase","each","preview","includes","hide","conversation","dateStr","lastmessage","sendMessage","updateTokenUI","$container","$input","$submitBtn","$progressBar","prop","percentage","css","checkTokenReset","window","location","reload","messageElem","messageText","append","timestamp","toLocaleTimeString","hour","minute","timestampElem","history","buildTranscript","blur","audio","ajax","url","M","cfg","wwwroot","dataType","contentType","data","JSON","stringify","threadId","transcription","updateConversationPreview","total","tokenlimitexceeded","xhr","status","errorMsg","parse","responseText","lastMessage","transcript","index","element","user","userName","hasClass","assistantName","clone","push","init","persistConvo","tokenLimitEnabled","tokenLimit","tokensUsed","tokenLimitExceeded","audioEnabled","audioMode","document","shiftKey","target","value","preventDefault","input","toggleClass","style","height","Math","min","setInterval"],"mappings":"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"}