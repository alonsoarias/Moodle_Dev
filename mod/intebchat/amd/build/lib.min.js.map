{"version":3,"file":"lib.min.js","sources":["../src/lib.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Main JavaScript for INTEB Chat module with Conversations Management\r\n *\r\n * @module     mod_intebchat/lib\r\n * @copyright  2025 Alonso Arias <soporte@ingeweb.co>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\ndefine(['jquery', 'core/ajax', 'core/str', 'core/notification', 'core/modal_factory', 'core/modal_events', 'core/templates'], \r\nfunction($, Ajax, Str, Notification, ModalFactory, ModalEvents, Templates) {\r\n    var questionString = 'Ask a question...';\r\n    var errorString = 'An error occurred! Please try again later.';\r\n    var currentConversationId = null;\r\n    var tokenInfo = {\r\n        enabled: false,\r\n        limit: 0,\r\n        used: 0,\r\n        exceeded: false,\r\n        resetTime: 0\r\n    };\r\n    var strings = {};\r\n    var audioConfig = {\r\n        enabled: false,\r\n        mode: 'text'\r\n    };\r\n\r\n    /**\r\n     * Initialize the module with conversation management\r\n     * @param {Object} data Configuration data\r\n     */\r\n    var init = function(data) {\r\n        var instanceId = data.instanceId;\r\n        var api_type = data.api_type;\r\n        var persistConvo = data.persistConvo;\r\n        \r\n        // Initialize token info\r\n        tokenInfo.enabled = data.tokenLimitEnabled || false;\r\n        tokenInfo.limit = data.tokenLimit || 0;\r\n        tokenInfo.used = data.tokensUsed || 0;\r\n        tokenInfo.exceeded = data.tokenLimitExceeded || false;\r\n        tokenInfo.resetTime = data.resetTime || 0;\r\n\r\n        // Initialize audio config\r\n        audioConfig.enabled = data.audioEnabled || false;\r\n        audioConfig.mode = data.audioMode || 'text';\r\n\r\n        // Update UI based on token limit status\r\n        updateTokenUI();\r\n\r\n        // Load strings first\r\n        loadStrings().then(function() {\r\n            // Initialize conversation management after strings are loaded\r\n            initializeConversations(instanceId);\r\n            \r\n            // Set placeholder\r\n            if ($('#openai_input').length) {\r\n                $('#openai_input').attr('placeholder', strings.askaquestion);\r\n            }\r\n        });\r\n\r\n        // Event listeners for chat input - adjusted for audio modes\r\n        if (audioConfig.mode === 'text' || audioConfig.mode === 'both') {\r\n            $(document).on('keyup', '.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input', function(e) {\r\n                if (e.which === 13 && !e.shiftKey && e.target.value !== \"\") {\r\n                    e.preventDefault();\r\n                    if (!tokenInfo.exceeded) {\r\n                        sendMessage(e.target.value, instanceId, api_type);\r\n                        e.target.value = '';\r\n                    }\r\n                }\r\n            });\r\n\r\n            $(document).on('click', '.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #go', function(e) {\r\n                var input = $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input');\r\n                if (input.val() !== \"\" && !tokenInfo.exceeded) {\r\n                    sendMessage(input.val(), instanceId, api_type);\r\n                    input.val('');\r\n                }\r\n            });\r\n        }\r\n\r\n        // Audio mode specific handlers\r\n        if (audioConfig.enabled) {\r\n            if (audioConfig.mode === 'audio') {\r\n                // For audio-only mode, automatically send when recording stops\r\n                $(document).on('audio-ready', '#intebchat-icon-stop', function() {\r\n                    var audioData = $('#intebchat-recorded-audio').val();\r\n                    if (audioData && !tokenInfo.exceeded) {\r\n                        sendAudioMessage(instanceId, api_type);\r\n                    }\r\n                });\r\n            } else if (audioConfig.mode === 'both') {\r\n                // For both mode, send button is available for text, audio sends automatically\r\n                $(document).on('audio-ready', '#intebchat-icon-stop', function() {\r\n                    var audioData = $('#intebchat-recorded-audio').val();\r\n                    if (audioData && !tokenInfo.exceeded) {\r\n                        sendAudioMessage(instanceId, api_type);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        // New conversation button\r\n        $(document).on('click', '#new-conversation-btn', function(e) {\r\n            createNewConversation(instanceId);\r\n        });\r\n\r\n        // Clear conversation button with modal\r\n        $(document).on('click', '#clear-conversation-btn', function(e) {\r\n            if (currentConversationId) {\r\n                showClearConversationModal(currentConversationId, instanceId);\r\n            }\r\n        });\r\n\r\n        // Edit title button with modal\r\n        $(document).on('click', '#edit-title-btn', function(e) {\r\n            if (currentConversationId) {\r\n                showEditTitleModal(currentConversationId);\r\n            }\r\n        });\r\n\r\n        // Conversation item click\r\n        $(document).on('click', '.intebchat-conversation-item', function(e) {\r\n            var conversationId = $(this).data('conversation-id');\r\n            loadConversation(conversationId, instanceId);\r\n        });\r\n\r\n        // Search conversations\r\n        $(document).on('input', '#conversation-search', function(e) {\r\n            filterConversations(e.target.value);\r\n        });\r\n\r\n        // Mobile menu toggle\r\n        $(document).on('click', '#mobile-menu-toggle', function(e) {\r\n            $('#conversations-sidebar').toggleClass('mobile-open');\r\n        });\r\n\r\n        // Auto-resize textarea\r\n        if ($('#openai_input').length) {\r\n            $(document).on('input', '.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input', function(e) {\r\n                this.style.height = 'auto';\r\n                this.style.height = Math.min(this.scrollHeight, 120) + 'px';\r\n            });\r\n        }\r\n\r\n        // Check token limit periodically if enabled\r\n        if (tokenInfo.enabled) {\r\n            setInterval(checkTokenReset, 60000); // Check every minute\r\n        }\r\n\r\n        // Start with a new conversation if none exists\r\n        if ($('.intebchat-conversation-item').length === 0) {\r\n            createNewConversation(instanceId);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Send audio message\r\n     */\r\n    var sendAudioMessage = function(instanceId, api_type) {\r\n        var audioData = $('#intebchat-recorded-audio').val();\r\n        if (!audioData) {\r\n            return;\r\n        }\r\n\r\n        // Show transcribing message\r\n        addToChatLog('user transcribing', '<i class=\"fa fa-microphone\"></i> ' + (strings.transcribing || 'Transcribing...'), instanceId);\r\n        \r\n        // Create completion with audio\r\n        createCompletion('', instanceId, api_type);\r\n    };\r\n\r\n    /**\r\n     * Load all required strings\r\n     */\r\n    var loadStrings = function() {\r\n        var stringkeys = [\r\n            {key: 'askaquestion', component: 'mod_intebchat'},\r\n            {key: 'erroroccurred', component: 'mod_intebchat'},\r\n            {key: 'newconversation', component: 'mod_intebchat'},\r\n            {key: 'confirmclear', component: 'mod_intebchat'},\r\n            {key: 'conversationcleared', component: 'mod_intebchat'},\r\n            {key: 'loadingconversation', component: 'mod_intebchat'},\r\n            {key: 'edittitle', component: 'mod_intebchat'},\r\n            {key: 'clearconversation', component: 'mod_intebchat'},\r\n            {key: 'cancel', component: 'core'},\r\n            {key: 'save', component: 'core'},\r\n            {key: 'delete', component: 'core'},\r\n            {key: 'conversationtitle', component: 'mod_intebchat'},\r\n            {key: 'confirmclearmessage', component: 'mod_intebchat'}\r\n        ];\r\n\r\n        return Str.get_strings(stringkeys).then(function(results) {\r\n            strings.askaquestion = results[0];\r\n            strings.erroroccurred = results[1];\r\n            strings.newconversation = results[2];\r\n            strings.confirmclear = results[3];\r\n            strings.conversationcleared = results[4];\r\n            strings.loadingconversation = results[5];\r\n            strings.edittitle = results[6];\r\n            strings.clearconversation = results[7];\r\n            strings.cancel = results[8];\r\n            strings.save = results[9];\r\n            strings.delete = results[10];\r\n            strings.conversationtitle = results[11] || 'Conversation Title';\r\n            strings.confirmclearmessage = results[12] || 'Are you sure you want to clear this conversation? This action cannot be undone.';\r\n            \r\n            questionString = strings.askaquestion;\r\n            errorString = strings.erroroccurred;\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Show modal for editing conversation title\r\n     */\r\n    var showEditTitleModal = function(conversationId) {\r\n        var currentTitle = $('#conversation-title').text();\r\n        \r\n        ModalFactory.create({\r\n            type: ModalFactory.types.SAVE_CANCEL,\r\n            title: strings.edittitle,\r\n            body: '<div class=\"form-group\">' +\r\n                  '<label for=\"conversation-title-input\">' + strings.conversationtitle + '</label>' +\r\n                  '<input type=\"text\" class=\"form-control\" id=\"conversation-title-input\" value=\"' + \r\n                  currentTitle.replace(/\"/g, '&quot;') + '\">' +\r\n                  '</div>'\r\n        }).then(function(modal) {\r\n            modal.setSaveButtonText(strings.save);\r\n            \r\n            // Handle save\r\n            modal.getRoot().on(ModalEvents.save, function(e) {\r\n                var newTitle = $('#conversation-title-input').val().trim();\r\n                if (newTitle && newTitle !== currentTitle) {\r\n                    updateConversationTitle(conversationId, newTitle);\r\n                }\r\n            });\r\n            \r\n            // Focus input when modal is shown\r\n            modal.getRoot().on(ModalEvents.shown, function() {\r\n                $('#conversation-title-input').focus().select();\r\n            });\r\n            \r\n            // Handle enter key in input\r\n            modal.getRoot().on('keypress', '#conversation-title-input', function(e) {\r\n                if (e.which === 13) {\r\n                    modal.save();\r\n                }\r\n            });\r\n            \r\n            modal.show();\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Show modal for clearing conversation\r\n     */\r\n    var showClearConversationModal = function(conversationId, instanceId) {\r\n        ModalFactory.create({\r\n            type: ModalFactory.types.SAVE_CANCEL,\r\n            title: strings.clearconversation,\r\n            body: '<p>' + strings.confirmclearmessage + '</p>'\r\n        }).then(function(modal) {\r\n            modal.setSaveButtonText(strings.delete);\r\n            \r\n            // Style the save button as danger\r\n            modal.getRoot().find('.btn-primary').removeClass('btn-primary').addClass('btn-danger');\r\n            \r\n            // Handle delete\r\n            modal.getRoot().on(ModalEvents.save, function(e) {\r\n                clearConversation(conversationId, instanceId);\r\n            });\r\n            \r\n            modal.show();\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Initialize conversation management\r\n     */\r\n    var initializeConversations = function(instanceId) {\r\n        // Load first conversation if exists\r\n        var firstConversation = $('.intebchat-conversation-item').first();\r\n        if (firstConversation.length > 0) {\r\n            firstConversation.click();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Create a new conversation\r\n     */\r\n    var createNewConversation = function(instanceId) {\r\n        Ajax.call([{\r\n            methodname: 'mod_intebchat_create_conversation',\r\n            args: {instanceid: instanceId},\r\n            done: function(response) {\r\n                currentConversationId = response.conversationid;\r\n                \r\n                // Clear chat log\r\n                $('#intebchat_log').empty();\r\n                \r\n                // Update header\r\n                $('#conversation-title').text(response.title);\r\n                \r\n                // Add to sidebar\r\n                var conversationHtml = createConversationListItem(response);\r\n                if ($('.intebchat-no-conversations').length > 0) {\r\n                    $('.intebchat-conversations-list').html(conversationHtml);\r\n                } else {\r\n                    $('.intebchat-conversations-list').prepend(conversationHtml);\r\n                }\r\n                \r\n                // Set as active\r\n                $('.intebchat-conversation-item').removeClass('active');\r\n                $('.intebchat-conversation-item[data-conversation-id=\"' + currentConversationId + '\"]').addClass('active');\r\n                \r\n                // Focus input\r\n                if ($('#openai_input').length) {\r\n                    $('#openai_input').focus();\r\n                }\r\n            },\r\n            fail: function(error) {\r\n                Notification.addNotification({\r\n                    message: error.message || strings.erroroccurred,\r\n                    type: 'error'\r\n                });\r\n            }\r\n        }]);\r\n    };\r\n\r\n    /**\r\n     * Load a conversation\r\n     */\r\n    var loadConversation = function(conversationId, instanceId) {\r\n        // Show loading state\r\n        $('#intebchat_log').html('<div class=\"loading-conversation\">' + \r\n            '<i class=\"fa fa-spinner fa-spin\"></i> ' + \r\n            strings.loadingconversation + \r\n            '</div>');\r\n        \r\n        Ajax.call([{\r\n            methodname: 'mod_intebchat_load_conversation',\r\n            args: {\r\n                conversationid: conversationId,\r\n                instanceid: instanceId\r\n            },\r\n            done: function(response) {\r\n                currentConversationId = conversationId;\r\n                \r\n                // Update header\r\n                $('#conversation-title').text(response.title);\r\n                \r\n                // Clear and load messages\r\n                $('#intebchat_log').empty();\r\n                response.messages.forEach(function(msg) {\r\n                    addToChatLog(msg.role === 'user' ? 'user' : 'bot', msg.message, instanceId, false);\r\n                });\r\n                \r\n                // Update active state\r\n                $('.intebchat-conversation-item').removeClass('active');\r\n                $('.intebchat-conversation-item[data-conversation-id=\"' + conversationId + '\"]').addClass('active');\r\n                \r\n                // Close mobile sidebar\r\n                $('#conversations-sidebar').removeClass('mobile-open');\r\n                \r\n                // Scroll to bottom\r\n                var messageContainer = $('#intebchat_log');\r\n                messageContainer.animate({\r\n                    scrollTop: messageContainer[0].scrollHeight\r\n                }, 300);\r\n            },\r\n            fail: function(error) {\r\n                $('#intebchat_log').empty();\r\n                Notification.addNotification({\r\n                    message: error.message || strings.erroroccurred,\r\n                    type: 'error'\r\n                });\r\n            }\r\n        }]);\r\n    };\r\n\r\n    /**\r\n     * Clear a conversation\r\n     */\r\n    var clearConversation = function(conversationId, instanceId) {\r\n        Ajax.call([{\r\n            methodname: 'mod_intebchat_clear_conversation',\r\n            args: {conversationid: conversationId},\r\n            done: function(response) {\r\n                if (response.deleted) {\r\n                    // Conversation was deleted completely\r\n                    // Remove from sidebar\r\n                    $('.intebchat-conversation-item[data-conversation-id=\"' + conversationId + '\"]').fadeOut(300, function() {\r\n                        $(this).remove();\r\n                        \r\n                        // Check if there are any conversations left\r\n                        if ($('.intebchat-conversation-item').length === 0) {\r\n                            // No conversations left, create a new one\r\n                            createNewConversation(instanceId);\r\n                        } else {\r\n                            // Select the first available conversation\r\n                            var firstConv = $('.intebchat-conversation-item').first();\r\n                            if (firstConv.length > 0) {\r\n                                firstConv.click();\r\n                            }\r\n                        }\r\n                    });\r\n                    \r\n                    // Show notification\r\n                    Notification.addNotification({\r\n                        message: strings.conversationcleared,\r\n                        type: 'success'\r\n                    });\r\n                } else {\r\n                    // Conversation was cleared but not deleted\r\n                    // Clear chat log\r\n                    $('#intebchat_log').empty();\r\n                    \r\n                    // Update the preview in sidebar to empty\r\n                    var $conversationItem = $('.intebchat-conversation-item[data-conversation-id=\"' + conversationId + '\"]');\r\n                    $conversationItem.find('.intebchat-conversation-preview').text('');\r\n                    \r\n                    // Show notification\r\n                    Notification.addNotification({\r\n                        message: strings.conversationcleared,\r\n                        type: 'success'\r\n                    });\r\n                    \r\n                    // Update the conversation list to reflect the change\r\n                    refreshConversationInSidebar(conversationId);\r\n                }\r\n            },\r\n            fail: function(error) {\r\n                Notification.addNotification({\r\n                    message: error.message || strings.erroroccurred,\r\n                    type: 'error'\r\n                });\r\n            }\r\n        }]);\r\n    };\r\n\r\n    /**\r\n     * Update conversation title\r\n     */\r\n    var updateConversationTitle = function(conversationId, newTitle) {\r\n        Ajax.call([{\r\n            methodname: 'mod_intebchat_update_conversation_title',\r\n            args: {\r\n                conversationid: conversationId,\r\n                title: newTitle\r\n            },\r\n            done: function(response) {\r\n                // Update header\r\n                $('#conversation-title').text(newTitle);\r\n                \r\n                // Update sidebar\r\n                $('.intebchat-conversation-item[data-conversation-id=\"' + conversationId + '\"] .title-text')\r\n                    .text(newTitle);\r\n                \r\n                // Show success notification\r\n                Notification.addNotification({\r\n                    message: strings.save,\r\n                    type: 'success'\r\n                });\r\n            },\r\n            fail: function(error) {\r\n                Notification.addNotification({\r\n                    message: error.message || strings.erroroccurred,\r\n                    type: 'error'\r\n                });\r\n            }\r\n        }]);\r\n    };\r\n\r\n    /**\r\n     * Refresh a conversation in the sidebar\r\n     */\r\n    var refreshConversationInSidebar = function(conversationId) {\r\n        var $item = $('.intebchat-conversation-item[data-conversation-id=\"' + conversationId + '\"]');\r\n        if ($item.length) {\r\n            // Update the modified time\r\n            var now = new Date();\r\n            $item.find('.intebchat-conversation-date').text(\r\n                now.toLocaleDateString([], {day: '2-digit', month: '2-digit'})\r\n            );\r\n            \r\n            // Move to top if not already there\r\n            if (!$item.is(':first-child')) {\r\n                $item.fadeOut(200, function() {\r\n                    $(this).prependTo('.intebchat-conversations-list').fadeIn(200);\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Filter conversations\r\n     */\r\n    var filterConversations = function(searchTerm) {\r\n        searchTerm = searchTerm.toLowerCase();\r\n        \r\n        $('.intebchat-conversation-item').each(function() {\r\n            var title = $(this).find('.title-text').text().toLowerCase();\r\n            var preview = $(this).find('.intebchat-conversation-preview').text().toLowerCase();\r\n            \r\n            if (title.includes(searchTerm) || preview.includes(searchTerm)) {\r\n                $(this).show();\r\n            } else {\r\n                $(this).hide();\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Create conversation list item HTML\r\n     */\r\n    var createConversationListItem = function(conversation) {\r\n        var date = new Date(conversation.lastmessage * 1000);\r\n        var dateStr = date.toLocaleDateString([], {day: '2-digit', month: '2-digit'});\r\n        \r\n        return '<div class=\"intebchat-conversation-item\" ' +\r\n               'data-conversation-id=\"' + conversation.conversationid + '\" ' +\r\n               'data-title=\"' + conversation.title + '\">' +\r\n               '<div class=\"intebchat-conversation-title\">' +\r\n               '<span class=\"title-text\">' + conversation.title + '</span>' +\r\n               '<span class=\"intebchat-conversation-date\">' + dateStr + '</span>' +\r\n               '</div>' +\r\n               '<div class=\"intebchat-conversation-preview\">' + conversation.preview + '</div>' +\r\n               '</div>';\r\n    };\r\n\r\n    /**\r\n     * Send message (enhanced with conversation management)\r\n     */\r\n    var sendMessage = function(message, instanceId, api_type) {\r\n        // Create new conversation if none exists\r\n        if (!currentConversationId) {\r\n            // Create conversation first, then send message\r\n            Ajax.call([{\r\n                methodname: 'mod_intebchat_create_conversation',\r\n                args: {instanceid: instanceId},\r\n                done: function(response) {\r\n                    currentConversationId = response.conversationid;\r\n                    \r\n                    // Update header\r\n                    $('#conversation-title').text(response.title);\r\n                    \r\n                    // Add to sidebar\r\n                    var conversationHtml = createConversationListItem(response);\r\n                    if ($('.intebchat-no-conversations').length > 0) {\r\n                        $('.intebchat-conversations-list').html(conversationHtml);\r\n                    } else {\r\n                        $('.intebchat-conversations-list').prepend(conversationHtml);\r\n                    }\r\n                    \r\n                    // Set as active\r\n                    $('.intebchat-conversation-item').removeClass('active');\r\n                    $('.intebchat-conversation-item[data-conversation-id=\"' + currentConversationId + '\"]').addClass('active');\r\n                    \r\n                    // Now send the message\r\n                    addToChatLog('user', message, instanceId);\r\n                    createCompletion(message, instanceId, api_type);\r\n                },\r\n                fail: function(error) {\r\n                    Notification.addNotification({\r\n                        message: error.message || errorString,\r\n                        type: 'error'\r\n                    });\r\n                }\r\n            }]);\r\n            return;\r\n        }\r\n        \r\n        addToChatLog('user', message, instanceId);\r\n        createCompletion(message, instanceId, api_type);\r\n    };\r\n\r\n    /**\r\n     * Update UI based on token limit status\r\n     */\r\n    var updateTokenUI = function() {\r\n        if (!tokenInfo.enabled) {\r\n            return;\r\n        }\r\n\r\n        var $container = $('.mod_intebchat');\r\n        var $input = $container.find('#openai_input');\r\n        var $submitBtn = $container.find('#go');\r\n        var $progressBar = $container.find('.progress-bar');\r\n\r\n        if (tokenInfo.exceeded) {\r\n            $input.prop('disabled', true);\r\n            $submitBtn.prop('disabled', true);\r\n        } else {\r\n            $input.prop('disabled', false);\r\n            $submitBtn.prop('disabled', false);\r\n        }\r\n\r\n        // Update progress bar\r\n        if ($progressBar.length) {\r\n            var percentage = (tokenInfo.used / tokenInfo.limit * 100);\r\n            $progressBar.css('width', percentage + '%');\r\n            \r\n            // Update color based on usage\r\n            $progressBar.removeClass('warning danger');\r\n            if (percentage > 90) {\r\n                $progressBar.addClass('danger');\r\n            } else if (percentage > 75) {\r\n                $progressBar.addClass('warning');\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Check if token limit has reset\r\n     */\r\n    var checkTokenReset = function() {\r\n        var now = Date.now() / 1000;\r\n        if (tokenInfo.exceeded && now > tokenInfo.resetTime) {\r\n            // Reload page to refresh token status\r\n            window.location.reload();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Add a message to the chat UI\r\n     * @param {string} type Which side of the UI the message should be on. Can be \"user\" or \"bot\"\r\n     * @param {string} message The text of the message to add\r\n     * @param {int} instanceId The ID of the instance to manipulate\r\n     * @param {boolean} animate Whether to animate the message\r\n     */\r\n    var addToChatLog = function(type, message, instanceId, animate = true) {\r\n        var messageContainer = $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #intebchat_log');\r\n        \r\n        // Remove transcribing message if exists\r\n        if (type !== 'user transcribing') {\r\n            messageContainer.find('.openai_message.transcribing').remove();\r\n        }\r\n        \r\n        var messageElem = $('<div></div>').addClass('openai_message').addClass(type.replace(' ', '-'));\r\n        var messageText = $('<span></span>').html(message);\r\n        messageElem.append(messageText);\r\n\r\n        // Add timestamp\r\n        var timestamp = new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});\r\n        var timestampElem = $('<span></span>').addClass('message-timestamp').text(timestamp);\r\n        messageElem.append(timestampElem);\r\n\r\n        if (animate) {\r\n            messageElem.hide();\r\n            messageContainer.append(messageElem);\r\n            messageElem.fadeIn(300);\r\n        } else {\r\n            messageContainer.append(messageElem);\r\n        }\r\n        \r\n        // Smooth scroll to bottom\r\n        messageContainer.animate({\r\n            scrollTop: messageContainer[0].scrollHeight\r\n        }, 300);\r\n    };\r\n\r\n    /**\r\n     * Makes an API request to get a completion from GPT\r\n     * @param {string} message The text to get a completion for\r\n     * @param {int} instanceId The ID of the instance\r\n     * @param {string} api_type \"assistant\" | \"chat\" The type of API to use\r\n     */\r\n    var createCompletion = function(message, instanceId, api_type) {\r\n        var threadId = null;\r\n        \r\n        // Build history from current conversation\r\n        var history = buildTranscript(instanceId);\r\n\r\n        $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #control_bar').addClass('disabled');\r\n        $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input').removeClass('error');\r\n        $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input').attr('placeholder', questionString);\r\n        $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input').blur();\r\n        \r\n        if (!$('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] .openai_message.transcribing').length) {\r\n            addToChatLog('bot loading', '...', instanceId);\r\n        }\r\n\r\n        var audio = $('#intebchat-recorded-audio').val();\r\n        $.ajax({\r\n            url: M.cfg.wwwroot + '/mod/intebchat/api/completion.php',\r\n            type: 'POST',\r\n            dataType: 'json',\r\n            contentType: 'application/json',\r\n            data: JSON.stringify({\r\n                message: message,\r\n                history: history,\r\n                instanceId: instanceId,\r\n                conversationId: currentConversationId || null,\r\n                threadId: threadId,\r\n                audio: audio || null\r\n            }),\r\n            success: function(data) {\r\n                $('#intebchat-recorded-audio').val('');\r\n                var messageContainer = $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #intebchat_log');\r\n                \r\n                // Remove loading or transcribing message\r\n                messageContainer.find('.openai_message.bot-loading, .openai_message.user-transcribing').remove();\r\n                \r\n                $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #control_bar').removeClass('disabled');\r\n\r\n                if (data.message) {\r\n                    // If we had audio input, replace the transcribing message with actual transcription\r\n                    if (audio && data.transcription) {\r\n                        messageContainer.find('.openai_message.user-transcribing').remove();\r\n                        addToChatLog('user', data.transcription, instanceId);\r\n                    }\r\n                    \r\n                    addToChatLog('bot', data.message, instanceId);\r\n                    \r\n                    // Update conversation ID if returned (for cases where conversation was created server-side)\r\n                    if (data.conversationId && !currentConversationId) {\r\n                        currentConversationId = data.conversationId;\r\n                    }\r\n                    \r\n                    // Update conversation preview\r\n                    if (currentConversationId) {\r\n                        updateConversationPreview(currentConversationId, data.transcription || message);\r\n                    }\r\n                    \r\n                    // Update token usage if provided\r\n                    if (data.tokenInfo && tokenInfo.enabled) {\r\n                        tokenInfo.used += data.tokenInfo.total || 0;\r\n                        updateTokenUI();\r\n                        \r\n                        // Check if limit exceeded\r\n                        if (tokenInfo.used >= tokenInfo.limit) {\r\n                            tokenInfo.exceeded = true;\r\n                            updateTokenUI();\r\n                            Notification.addNotification({\r\n                                message: strings.tokenlimitexceeded || 'Token limit exceeded',\r\n                                type: 'error'\r\n                            });\r\n                        }\r\n                    }\r\n                } else if (data.error) {\r\n                    if (data.error.type === 'token_limit_exceeded') {\r\n                        tokenInfo.exceeded = true;\r\n                        updateTokenUI();\r\n                        Notification.addNotification({\r\n                            message: data.error.message,\r\n                            type: 'error'\r\n                        });\r\n                    } else {\r\n                        addToChatLog('bot error', data.error.message, instanceId);\r\n                    }\r\n                }\r\n                if ($('#openai_input').length) {\r\n                    $('#openai_input').focus();\r\n                }\r\n            },\r\n            error: function(xhr, status, error) {\r\n                var messageContainer = $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #intebchat_log');\r\n                messageContainer.find('.openai_message.bot-loading, .openai_message.user-transcribing').remove();\r\n                $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #control_bar').removeClass('disabled');\r\n                \r\n                var errorMsg = errorString;\r\n                try {\r\n                    var response = JSON.parse(xhr.responseText);\r\n                    if (response.error) {\r\n                        errorMsg = response.error;\r\n                    }\r\n                } catch (e) {\r\n                    // Use default error message\r\n                }\r\n                \r\n                addToChatLog('bot error', errorMsg, instanceId);\r\n                $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input').addClass('error');\r\n                $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input').attr('placeholder', errorString);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Update conversation preview in sidebar\r\n     */\r\n    var updateConversationPreview = function(conversationId, lastMessage) {\r\n        if (!lastMessage) return;\r\n        \r\n        var $item = $('.intebchat-conversation-item[data-conversation-id=\"' + conversationId + '\"]');\r\n        if ($item.length) {\r\n            $item.find('.intebchat-conversation-preview').text(lastMessage);\r\n            var now = new Date();\r\n            $item.find('.intebchat-conversation-date').text(\r\n                now.toLocaleDateString([], {day: '2-digit', month: '2-digit'})\r\n            );\r\n            \r\n            // Move conversation to top if it's not already there\r\n            if (!$item.is(':first-child')) {\r\n                $item.fadeOut(200, function() {\r\n                    $(this).prependTo('.intebchat-conversations-list').fadeIn(200);\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Using the existing messages in the chat history, create a string that can be used to aid completion\r\n     * @param {int} instanceId The instance from which to build the history\r\n     * @return {Array} A transcript of the conversation up to this point\r\n     */\r\n    var buildTranscript = function(instanceId) {\r\n        var transcript = [];\r\n        $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] .openai_message').each(function(index, element) {\r\n            var messages = $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] .openai_message');\r\n            if (index === messages.length - 1) {\r\n                return;\r\n            }\r\n\r\n            var user = userName;\r\n            if ($(element).hasClass('bot')) {\r\n                user = assistantName;\r\n            }\r\n            \r\n            // Remove timestamp from message text\r\n            var messageText = $(element).clone();\r\n            messageText.find('.message-timestamp').remove();\r\n            messageText.find('audio').remove(); // Remove audio elements\r\n            messageText.find('.transcription').remove(); // Remove transcription wrapper\r\n            \r\n            transcript.push({\"user\": user, \"message\": messageText.text().trim()});\r\n        });\r\n\r\n        return transcript;\r\n    };\r\n\r\n    return {\r\n        init: init\r\n    };\r\n});"],"names":["define","$","Ajax","Str","Notification","ModalFactory","ModalEvents","Templates","questionString","errorString","currentConversationId","tokenInfo","enabled","limit","used","exceeded","resetTime","strings","audioConfig","mode","sendAudioMessage","instanceId","api_type","val","addToChatLog","transcribing","createCompletion","loadStrings","get_strings","key","component","then","results","askaquestion","erroroccurred","newconversation","confirmclear","conversationcleared","loadingconversation","edittitle","clearconversation","cancel","save","delete","conversationtitle","confirmclearmessage","showEditTitleModal","conversationId","currentTitle","text","create","type","types","SAVE_CANCEL","title","body","replace","modal","setSaveButtonText","getRoot","on","e","newTitle","trim","updateConversationTitle","shown","focus","select","which","show","showClearConversationModal","find","removeClass","addClass","clearConversation","initializeConversations","firstConversation","first","length","click","createNewConversation","call","methodname","args","instanceid","done","response","conversationid","empty","conversationHtml","createConversationListItem","html","prepend","fail","error","addNotification","message","loadConversation","messages","forEach","msg","role","messageContainer","animate","scrollTop","scrollHeight","deleted","fadeOut","this","remove","firstConv","refreshConversationInSidebar","$item","now","Date","toLocaleDateString","day","month","is","prependTo","fadeIn","filterConversations","searchTerm","toLowerCase","each","preview","includes","hide","conversation","dateStr","lastmessage","sendMessage","updateTokenUI","$container","$input","$submitBtn","$progressBar","prop","percentage","css","checkTokenReset","window","location","reload","messageElem","messageText","append","timestamp","toLocaleTimeString","hour","minute","timestampElem","history","buildTranscript","attr","blur","audio","ajax","url","M","cfg","wwwroot","dataType","contentType","data","JSON","stringify","threadId","success","transcription","updateConversationPreview","total","tokenlimitexceeded","xhr","status","errorMsg","parse","responseText","lastMessage","transcript","index","element","user","userName","hasClass","assistantName","clone","push","init","persistConvo","tokenLimitEnabled","tokenLimit","tokensUsed","tokenLimitExceeded","audioEnabled","audioMode","document","shiftKey","target","value","preventDefault","input","toggleClass","style","height","Math","min","setInterval"],"mappings":";;;;;;;AAuBAA,2BAAO,CAAC,SAAU,YAAa,WAAY,oBAAqB,qBAAsB,oBAAqB,mBAC3G,SAASC,EAAGC,KAAMC,IAAKC,aAAcC,aAAcC,YAAaC,eACxDC,eAAiB,oBACjBC,YAAc,6CACdC,sBAAwB,KACxBC,UAAY,CACZC,SAAS,EACTC,MAAO,EACPC,KAAM,EACNC,UAAU,EACVC,UAAW,GAEXC,QAAU,GACVC,YAAc,CACdN,SAAS,EACTO,KAAM,QAwINC,iBAAmB,SAASC,WAAYC,UACxBrB,EAAE,6BAA6BsB,QAM/CC,aAAa,oBAAqB,qCAAuCP,QAAQQ,cAAgB,mBAAoBJ,YAGrHK,iBAAiB,GAAIL,WAAYC,YAMjCK,YAAc,kBAiBPxB,IAAIyB,YAhBM,CACb,CAACC,IAAK,eAAgBC,UAAW,iBACjC,CAACD,IAAK,gBAAiBC,UAAW,iBAClC,CAACD,IAAK,kBAAmBC,UAAW,iBACpC,CAACD,IAAK,eAAgBC,UAAW,iBACjC,CAACD,IAAK,sBAAuBC,UAAW,iBACxC,CAACD,IAAK,sBAAuBC,UAAW,iBACxC,CAACD,IAAK,YAAaC,UAAW,iBAC9B,CAACD,IAAK,oBAAqBC,UAAW,iBACtC,CAACD,IAAK,SAAUC,UAAW,QAC3B,CAACD,IAAK,OAAQC,UAAW,QACzB,CAACD,IAAK,SAAUC,UAAW,QAC3B,CAACD,IAAK,oBAAqBC,UAAW,iBACtC,CAACD,IAAK,sBAAuBC,UAAW,mBAGTC,MAAK,SAASC,SAC7Cf,QAAQgB,aAAeD,QAAQ,GAC/Bf,QAAQiB,cAAgBF,QAAQ,GAChCf,QAAQkB,gBAAkBH,QAAQ,GAClCf,QAAQmB,aAAeJ,QAAQ,GAC/Bf,QAAQoB,oBAAsBL,QAAQ,GACtCf,QAAQqB,oBAAsBN,QAAQ,GACtCf,QAAQsB,UAAYP,QAAQ,GAC5Bf,QAAQuB,kBAAoBR,QAAQ,GACpCf,QAAQwB,OAAST,QAAQ,GACzBf,QAAQyB,KAAOV,QAAQ,GACvBf,QAAQ0B,OAASX,QAAQ,IACzBf,QAAQ2B,kBAAoBZ,QAAQ,KAAO,qBAC3Cf,QAAQ4B,oBAAsBb,QAAQ,KAAO,kFAE7CxB,eAAiBS,QAAQgB,aACzBxB,YAAcQ,QAAQiB,kBAO1BY,mBAAqB,SAASC,oBAC1BC,aAAe/C,EAAE,uBAAuBgD,OAE5C5C,aAAa6C,OAAO,CAChBC,KAAM9C,aAAa+C,MAAMC,YACzBC,MAAOrC,QAAQsB,UACfgB,KAAM,iEAC2CtC,QAAQ2B,kBADnD,wFAGAI,aAAaQ,QAAQ,KAAM,UAH3B,aAKPzB,MAAK,SAAS0B,OACbA,MAAMC,kBAAkBzC,QAAQyB,MAGhCe,MAAME,UAAUC,GAAGtD,YAAYoC,MAAM,SAASmB,OACtCC,SAAW7D,EAAE,6BAA6BsB,MAAMwC,OAChDD,UAAYA,WAAad,cACzBgB,wBAAwBjB,eAAgBe,aAKhDL,MAAME,UAAUC,GAAGtD,YAAY2D,OAAO,WAClChE,EAAE,6BAA6BiE,QAAQC,YAI3CV,MAAME,UAAUC,GAAG,WAAY,6BAA6B,SAASC,GACjD,KAAZA,EAAEO,OACFX,MAAMf,UAIde,MAAMY,WAOVC,2BAA6B,SAASvB,eAAgB1B,YACtDhB,aAAa6C,OAAO,CAChBC,KAAM9C,aAAa+C,MAAMC,YACzBC,MAAOrC,QAAQuB,kBACfe,KAAM,MAAQtC,QAAQ4B,oBAAsB,SAC7Cd,MAAK,SAAS0B,OACbA,MAAMC,kBAAkBzC,QAAQ0B,QAGhCc,MAAME,UAAUY,KAAK,gBAAgBC,YAAY,eAAeC,SAAS,cAGzEhB,MAAME,UAAUC,GAAGtD,YAAYoC,MAAM,SAASmB,GAC1Ca,kBAAkB3B,eAAgB1B,eAGtCoC,MAAMY,WAOVM,wBAA0B,SAAStD,gBAE/BuD,kBAAoB3E,EAAE,gCAAgC4E,QACtDD,kBAAkBE,OAAS,GAC3BF,kBAAkBG,SAOtBC,sBAAwB,SAAS3D,YACjCnB,KAAK+E,KAAK,CAAC,CACPC,WAAY,oCACZC,KAAM,CAACC,WAAY/D,YACnBgE,KAAM,SAASC,UACX5E,sBAAwB4E,SAASC,eAGjCtF,EAAE,kBAAkBuF,QAGpBvF,EAAE,uBAAuBgD,KAAKqC,SAAShC,WAGnCmC,iBAAmBC,2BAA2BJ,UAC9CrF,EAAE,+BAA+B6E,OAAS,EAC1C7E,EAAE,iCAAiC0F,KAAKF,kBAExCxF,EAAE,iCAAiC2F,QAAQH,kBAI/CxF,EAAE,gCAAgCuE,YAAY,UAC9CvE,EAAE,sDAAwDS,sBAAwB,MAAM+D,SAAS,UAG7FxE,EAAE,iBAAiB6E,QACnB7E,EAAE,iBAAiBiE,SAG3B2B,KAAM,SAASC,OACX1F,aAAa2F,gBAAgB,CACzBC,QAASF,MAAME,SAAW/E,QAAQiB,cAClCiB,KAAM,eASlB8C,iBAAmB,SAASlD,eAAgB1B,YAE5CpB,EAAE,kBAAkB0F,KAAK,2EAErB1E,QAAQqB,oBACR,UAEJpC,KAAK+E,KAAK,CAAC,CACPC,WAAY,kCACZC,KAAM,CACFI,eAAgBxC,eAChBqC,WAAY/D,YAEhBgE,KAAM,SAASC,UACX5E,sBAAwBqC,eAGxB9C,EAAE,uBAAuBgD,KAAKqC,SAAShC,OAGvCrD,EAAE,kBAAkBuF,QACpBF,SAASY,SAASC,SAAQ,SAASC,KAC/B5E,aAA0B,SAAb4E,IAAIC,KAAkB,OAAS,MAAOD,IAAIJ,QAAS3E,YAAY,MAIhFpB,EAAE,gCAAgCuE,YAAY,UAC9CvE,EAAE,sDAAwD8C,eAAiB,MAAM0B,SAAS,UAG1FxE,EAAE,0BAA0BuE,YAAY,mBAGpC8B,iBAAmBrG,EAAE,kBACzBqG,iBAAiBC,QAAQ,CACrBC,UAAWF,iBAAiB,GAAGG,cAChC,MAEPZ,KAAM,SAASC,OACX7F,EAAE,kBAAkBuF,QACpBpF,aAAa2F,gBAAgB,CACzBC,QAASF,MAAME,SAAW/E,QAAQiB,cAClCiB,KAAM,eASlBuB,kBAAoB,SAAS3B,eAAgB1B,YAC7CnB,KAAK+E,KAAK,CAAC,CACPC,WAAY,mCACZC,KAAM,CAACI,eAAgBxC,gBACvBsC,KAAM,SAASC,UACPA,SAASoB,SAGTzG,EAAE,sDAAwD8C,eAAiB,MAAM4D,QAAQ,KAAK,cAC1F1G,EAAE2G,MAAMC,SAGyC,IAA7C5G,EAAE,gCAAgC6E,OAElCE,sBAAsB3D,gBACnB,KAECyF,UAAY7G,EAAE,gCAAgC4E,QAC9CiC,UAAUhC,OAAS,GACnBgC,UAAU/B,YAMtB3E,aAAa2F,gBAAgB,CACzBC,QAAS/E,QAAQoB,oBACjBc,KAAM,cAKVlD,EAAE,kBAAkBuF,QAGIvF,EAAE,sDAAwD8C,eAAiB,MACjFwB,KAAK,mCAAmCtB,KAAK,IAG/D7C,aAAa2F,gBAAgB,CACzBC,QAAS/E,QAAQoB,oBACjBc,KAAM,YAIV4D,6BAA6BhE,kBAGrC8C,KAAM,SAASC,OACX1F,aAAa2F,gBAAgB,CACzBC,QAASF,MAAME,SAAW/E,QAAQiB,cAClCiB,KAAM,eASlBa,wBAA0B,SAASjB,eAAgBe,UACnD5D,KAAK+E,KAAK,CAAC,CACPC,WAAY,0CACZC,KAAM,CACFI,eAAgBxC,eAChBO,MAAOQ,UAEXuB,KAAM,SAASC,UAEXrF,EAAE,uBAAuBgD,KAAKa,UAG9B7D,EAAE,sDAAwD8C,eAAiB,kBACtEE,KAAKa,UAGV1D,aAAa2F,gBAAgB,CACzBC,QAAS/E,QAAQyB,KACjBS,KAAM,aAGd0C,KAAM,SAASC,OACX1F,aAAa2F,gBAAgB,CACzBC,QAASF,MAAME,SAAW/E,QAAQiB,cAClCiB,KAAM,eASlB4D,6BAA+B,SAAShE,oBACpCiE,MAAQ/G,EAAE,sDAAwD8C,eAAiB,SACnFiE,MAAMlC,OAAQ,KAEVmC,IAAM,IAAIC,KACdF,MAAMzC,KAAK,gCAAgCtB,KACvCgE,IAAIE,mBAAmB,GAAI,CAACC,IAAK,UAAWC,MAAO,aAIlDL,MAAMM,GAAG,iBACVN,MAAML,QAAQ,KAAK,WACf1G,EAAE2G,MAAMW,UAAU,iCAAiCC,OAAO,UAStEC,oBAAsB,SAASC,YAC/BA,WAAaA,WAAWC,cAExB1H,EAAE,gCAAgC2H,MAAK,eAC/BtE,MAAQrD,EAAE2G,MAAMrC,KAAK,eAAetB,OAAO0E,cAC3CE,QAAU5H,EAAE2G,MAAMrC,KAAK,mCAAmCtB,OAAO0E,cAEjErE,MAAMwE,SAASJ,aAAeG,QAAQC,SAASJ,YAC/CzH,EAAE2G,MAAMvC,OAERpE,EAAE2G,MAAMmB,WAQhBrC,2BAA6B,SAASsC,kBAElCC,QADO,IAAIf,KAAgC,IAA3Bc,aAAaE,aACdf,mBAAmB,GAAI,CAACC,IAAK,UAAWC,MAAO,kBAE3D,kEAC2BW,aAAazC,eADxC,iBAEiByC,aAAa1E,MAF9B,wEAI8B0E,aAAa1E,MAJ3C,oDAK+C2E,QAL/C,4DAOiDD,aAAaH,QAP9D,gBAcPM,YAAc,SAASnC,QAAS3E,WAAYC,UAEvCZ,uBAqCLc,aAAa,OAAQwE,QAAS3E,YAC9BK,iBAAiBsE,QAAS3E,WAAYC,WApClCpB,KAAK+E,KAAK,CAAC,CACPC,WAAY,oCACZC,KAAM,CAACC,WAAY/D,YACnBgE,KAAM,SAASC,UACX5E,sBAAwB4E,SAASC,eAGjCtF,EAAE,uBAAuBgD,KAAKqC,SAAShC,WAGnCmC,iBAAmBC,2BAA2BJ,UAC9CrF,EAAE,+BAA+B6E,OAAS,EAC1C7E,EAAE,iCAAiC0F,KAAKF,kBAExCxF,EAAE,iCAAiC2F,QAAQH,kBAI/CxF,EAAE,gCAAgCuE,YAAY,UAC9CvE,EAAE,sDAAwDS,sBAAwB,MAAM+D,SAAS,UAGjGjD,aAAa,OAAQwE,QAAS3E,YAC9BK,iBAAiBsE,QAAS3E,WAAYC,WAE1CuE,KAAM,SAASC,OACX1F,aAAa2F,gBAAgB,CACzBC,QAASF,MAAME,SAAWvF,YAC1B0C,KAAM,eActBiF,cAAgB,cACXzH,UAAUC,aAIXyH,WAAapI,EAAE,kBACfqI,OAASD,WAAW9D,KAAK,iBACzBgE,WAAaF,WAAW9D,KAAK,OAC7BiE,aAAeH,WAAW9D,KAAK,oBAE/B5D,UAAUI,UACVuH,OAAOG,KAAK,YAAY,GACxBF,WAAWE,KAAK,YAAY,KAE5BH,OAAOG,KAAK,YAAY,GACxBF,WAAWE,KAAK,YAAY,IAI5BD,aAAa1D,OAAQ,KACjB4D,WAAc/H,UAAUG,KAAOH,UAAUE,MAAQ,IACrD2H,aAAaG,IAAI,QAASD,WAAa,KAGvCF,aAAahE,YAAY,kBACrBkE,WAAa,GACbF,aAAa/D,SAAS,UACfiE,WAAa,IACpBF,aAAa/D,SAAS,cAQ9BmE,gBAAkB,eACd3B,IAAMC,KAAKD,MAAQ,IACnBtG,UAAUI,UAAYkG,IAAMtG,UAAUK,WAEtC6H,OAAOC,SAASC,UAWpBvH,aAAe,SAAS2B,KAAM6C,QAAS3E,gBAAYkF,uEAC/CD,iBAAmBrG,EAAE,oCAAsCoB,WAAa,qBAG/D,sBAAT8B,MACAmD,iBAAiB/B,KAAK,gCAAgCsC,aAGtDmC,YAAc/I,EAAE,eAAewE,SAAS,kBAAkBA,SAAStB,KAAKK,QAAQ,IAAK,MACrFyF,YAAchJ,EAAE,iBAAiB0F,KAAKK,SAC1CgD,YAAYE,OAAOD,iBAGfE,WAAY,IAAIjC,MAAOkC,mBAAmB,GAAI,CAACC,KAAM,UAAWC,OAAO,YACvEC,cAAgBtJ,EAAE,iBAAiBwE,SAAS,qBAAqBxB,KAAKkG,WAC1EH,YAAYE,OAAOK,eAEfhD,SACAyC,YAAYjB,OACZzB,iBAAiB4C,OAAOF,aACxBA,YAAYxB,OAAO,MAEnBlB,iBAAiB4C,OAAOF,aAI5B1C,iBAAiBC,QAAQ,CACrBC,UAAWF,iBAAiB,GAAGG,cAChC,MASH/E,iBAAmB,SAASsE,QAAS3E,WAAYC,cAI7CkI,QAAUC,gBAAgBpI,YAE9BpB,EAAE,oCAAsCoB,WAAa,mBAAmBoD,SAAS,YACjFxE,EAAE,oCAAsCoB,WAAa,oBAAoBmD,YAAY,SACrFvE,EAAE,oCAAsCoB,WAAa,oBAAoBqI,KAAK,cAAelJ,gBAC7FP,EAAE,oCAAsCoB,WAAa,oBAAoBsI,OAEpE1J,EAAE,oCAAsCoB,WAAa,mCAAmCyD,QACzFtD,aAAa,cAAe,MAAOH,gBAGnCuI,MAAQ3J,EAAE,6BAA6BsB,MAC3CtB,EAAE4J,KAAK,CACHC,IAAKC,EAAEC,IAAIC,QAAU,oCACrB9G,KAAM,OACN+G,SAAU,OACVC,YAAa,mBACbC,KAAMC,KAAKC,UAAU,CACjBtE,QAASA,QACTwD,QAASA,QACTnI,WAAYA,WACZ0B,eAAgBrC,uBAAyB,KACzC6J,SAzBO,KA0BPX,MAAOA,OAAS,OAEpBY,QAAS,SAASJ,MACdnK,EAAE,6BAA6BsB,IAAI,QAC/B+E,iBAAmBrG,EAAE,oCAAsCoB,WAAa,qBAG5EiF,iBAAiB/B,KAAK,kEAAkEsC,SAExF5G,EAAE,oCAAsCoB,WAAa,mBAAmBmD,YAAY,YAEhF4F,KAAKpE,SAED4D,OAASQ,KAAKK,gBACdnE,iBAAiB/B,KAAK,qCAAqCsC,SAC3DrF,aAAa,OAAQ4I,KAAKK,cAAepJ,aAG7CG,aAAa,MAAO4I,KAAKpE,QAAS3E,YAG9B+I,KAAKrH,iBAAmBrC,wBACxBA,sBAAwB0J,KAAKrH,gBAI7BrC,uBACAgK,0BAA0BhK,sBAAuB0J,KAAKK,eAAiBzE,SAIvEoE,KAAKzJ,WAAaA,UAAUC,UAC5BD,UAAUG,MAAQsJ,KAAKzJ,UAAUgK,OAAS,EAC1CvC,gBAGIzH,UAAUG,MAAQH,UAAUE,QAC5BF,UAAUI,UAAW,EACrBqH,gBACAhI,aAAa2F,gBAAgB,CACzBC,QAAS/E,QAAQ2J,oBAAsB,uBACvCzH,KAAM,aAIXiH,KAAKtE,QACY,yBAApBsE,KAAKtE,MAAM3C,MACXxC,UAAUI,UAAW,EACrBqH,gBACAhI,aAAa2F,gBAAgB,CACzBC,QAASoE,KAAKtE,MAAME,QACpB7C,KAAM,WAGV3B,aAAa,YAAa4I,KAAKtE,MAAME,QAAS3E,aAGlDpB,EAAE,iBAAiB6E,QACnB7E,EAAE,iBAAiBiE,SAG3B4B,MAAO,SAAS+E,IAAKC,OAAQhF,OACF7F,EAAE,oCAAsCoB,WAAa,qBAC3DkD,KAAK,kEAAkEsC,SACxF5G,EAAE,oCAAsCoB,WAAa,mBAAmBmD,YAAY,gBAEhFuG,SAAWtK,oBAEP6E,SAAW+E,KAAKW,MAAMH,IAAII,cAC1B3F,SAASQ,QACTiF,SAAWzF,SAASQ,OAE1B,MAAOjC,IAITrC,aAAa,YAAauJ,SAAU1J,YACpCpB,EAAE,oCAAsCoB,WAAa,oBAAoBoD,SAAS,SAClFxE,EAAE,oCAAsCoB,WAAa,oBAAoBqI,KAAK,cAAejJ,iBAQrGiK,0BAA4B,SAAS3H,eAAgBmI,gBAChDA,iBAEDlE,MAAQ/G,EAAE,sDAAwD8C,eAAiB,SACnFiE,MAAMlC,OAAQ,CACdkC,MAAMzC,KAAK,mCAAmCtB,KAAKiI,iBAC/CjE,IAAM,IAAIC,KACdF,MAAMzC,KAAK,gCAAgCtB,KACvCgE,IAAIE,mBAAmB,GAAI,CAACC,IAAK,UAAWC,MAAO,aAIlDL,MAAMM,GAAG,iBACVN,MAAML,QAAQ,KAAK,WACf1G,EAAE2G,MAAMW,UAAU,iCAAiCC,OAAO,WAWtEiC,gBAAkB,SAASpI,gBACvB8J,WAAa,UACjBlL,EAAE,oCAAsCoB,WAAa,sBAAsBuG,MAAK,SAASwD,MAAOC,YAExFD,QADWnL,EAAE,oCAAsCoB,WAAa,sBAC7CyD,OAAS,OAI5BwG,KAAOC,SACPtL,EAAEoL,SAASG,SAAS,SACpBF,KAAOG,mBAIPxC,YAAchJ,EAAEoL,SAASK,QAC7BzC,YAAY1E,KAAK,sBAAsBsC,SACvCoC,YAAY1E,KAAK,SAASsC,SAC1BoC,YAAY1E,KAAK,kBAAkBsC,SAEnCsE,WAAWQ,KAAK,MAASL,aAAiBrC,YAAYhG,OAAOc,aAG1DoH,kBAGJ,CACHS,KAjyBO,SAASxB,UACZ/I,WAAa+I,KAAK/I,WAClBC,SAAW8I,KAAK9I,SACD8I,KAAKyB,aAGxBlL,UAAUC,QAAUwJ,KAAK0B,oBAAqB,EAC9CnL,UAAUE,MAAQuJ,KAAK2B,YAAc,EACrCpL,UAAUG,KAAOsJ,KAAK4B,YAAc,EACpCrL,UAAUI,SAAWqJ,KAAK6B,qBAAsB,EAChDtL,UAAUK,UAAYoJ,KAAKpJ,WAAa,EAGxCE,YAAYN,QAAUwJ,KAAK8B,eAAgB,EAC3ChL,YAAYC,KAAOiJ,KAAK+B,WAAa,OAGrC/D,gBAGAzG,cAAcI,MAAK,WAEf4C,wBAAwBtD,YAGpBpB,EAAE,iBAAiB6E,QACnB7E,EAAE,iBAAiByJ,KAAK,cAAezI,QAAQgB,iBAK9B,SAArBf,YAAYC,MAAwC,SAArBD,YAAYC,OAC3ClB,EAAEmM,UAAUxI,GAAG,QAAS,oCAAsCvC,WAAa,oBAAoB,SAASwC,GACpF,KAAZA,EAAEO,OAAiBP,EAAEwI,UAA+B,KAAnBxI,EAAEyI,OAAOC,QAC1C1I,EAAE2I,iBACG7L,UAAUI,WACXoH,YAAYtE,EAAEyI,OAAOC,MAAOlL,WAAYC,UACxCuC,EAAEyI,OAAOC,MAAQ,QAK7BtM,EAAEmM,UAAUxI,GAAG,QAAS,oCAAsCvC,WAAa,UAAU,SAASwC,OACtF4I,MAAQxM,EAAE,oCAAsCoB,WAAa,oBAC7C,KAAhBoL,MAAMlL,OAAiBZ,UAAUI,WACjCoH,YAAYsE,MAAMlL,MAAOF,WAAYC,UACrCmL,MAAMlL,IAAI,SAMlBL,YAAYN,UACa,UAArBM,YAAYC,MAQgB,SAArBD,YAAYC,OANnBlB,EAAEmM,UAAUxI,GAAG,cAAe,wBAAwB,WAClC3D,EAAE,6BAA6BsB,QAC7BZ,UAAUI,UACxBK,iBAAiBC,WAAYC,aAe7CrB,EAAEmM,UAAUxI,GAAG,QAAS,yBAAyB,SAASC,GACtDmB,sBAAsB3D,eAI1BpB,EAAEmM,UAAUxI,GAAG,QAAS,2BAA2B,SAASC,GACpDnD,uBACA4D,2BAA2B5D,sBAAuBW,eAK1DpB,EAAEmM,UAAUxI,GAAG,QAAS,mBAAmB,SAASC,GAC5CnD,uBACAoC,mBAAmBpC,0BAK3BT,EAAEmM,UAAUxI,GAAG,QAAS,gCAAgC,SAASC,OACzDd,eAAiB9C,EAAE2G,MAAMwD,KAAK,mBAClCnE,iBAAiBlD,eAAgB1B,eAIrCpB,EAAEmM,UAAUxI,GAAG,QAAS,wBAAwB,SAASC,GACrD4D,oBAAoB5D,EAAEyI,OAAOC,UAIjCtM,EAAEmM,UAAUxI,GAAG,QAAS,uBAAuB,SAASC,GACpD5D,EAAE,0BAA0ByM,YAAY,kBAIxCzM,EAAE,iBAAiB6E,QACnB7E,EAAEmM,UAAUxI,GAAG,QAAS,oCAAsCvC,WAAa,oBAAoB,SAASwC,QAC/F8I,MAAMC,OAAS,YACfD,MAAMC,OAASC,KAAKC,IAAIlG,KAAKH,aAAc,KAAO,QAK3D9F,UAAUC,SACVmM,YAAYnE,gBAAiB,KAIgB,IAA7C3I,EAAE,gCAAgC6E,QAClCE,sBAAsB3D"}