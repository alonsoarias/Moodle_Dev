{"version":3,"file":"category_tree.min.js","sources":["../src/category_tree.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Category tree navigation for download center\n *\n * @module     local_downloadcenter/category_tree\n * @copyright  2025 Alonso Arias <soporte@ingeweb.co>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['core/ajax', 'core/templates', 'core/notification'], \n    function(Ajax, Templates, Notification) {\n    'use strict';\n    \n    const CategoryTree = function() {\n        this.init();\n    };\n    \n    CategoryTree.prototype.init = function() {\n        const self = this;\n        \n        // Handle category expansion.\n        document.addEventListener('click', function(e) {\n            if (e.target.classList.contains('category-expand')) {\n                e.preventDefault();\n                const expandBtn = e.target;\n                const categoryid = expandBtn.dataset.categoryid;\n                const categoryNode = expandBtn.closest('.category-node');\n                const container = categoryNode.querySelector('.category-courses');\n                \n                if (container) {\n                    if (container.classList.contains('loaded')) {\n                        // Toggle display\n                        if (container.style.display === 'none' || !container.style.display) {\n                            container.style.display = 'block';\n                        } else {\n                            container.style.display = 'none';\n                        }\n                    } else {\n                        self.loadCategoryCourses(categoryid, container);\n                    }\n                    \n                    // Toggle icon\n                    const icon = expandBtn.querySelector('i');\n                    if (icon) {\n                        icon.classList.toggle('fa-plus');\n                        icon.classList.toggle('fa-minus');\n                    }\n                }\n            }\n        });\n        \n        // Handle category checkbox (select all courses).\n        document.addEventListener('change', function(e) {\n            if (e.target.classList.contains('category-checkbox')) {\n                const checkbox = e.target;\n                const checked = checkbox.checked;\n                const categoryNode = checkbox.closest('.category-node');\n                \n                if (categoryNode) {\n                    // Update all course checkboxes in this category.\n                    categoryNode.querySelectorAll('.course-checkbox').forEach(function(cb) {\n                        cb.checked = checked;\n                        // Trigger change event\n                        const event = new Event('change', { bubbles: true });\n                        cb.dispatchEvent(event);\n                    });\n                    \n                    // Update subcategory checkboxes.\n                    categoryNode.querySelectorAll('.category-checkbox').forEach(function(cb) {\n                        if (cb !== checkbox) {\n                            cb.checked = checked;\n                        }\n                    });\n                }\n            }\n        });\n        \n        // Initialize tri-state checkboxes.\n        this.updateTriStateCheckboxes();\n    };\n    \n    CategoryTree.prototype.loadCategoryCourses = function(categoryid, container) {\n        Ajax.call([{\n            methodname: 'local_downloadcenter_get_category_courses',\n            args: {categoryid: categoryid},\n            done: function(response) {\n                Templates.render('local_downloadcenter/course_list', response)\n                    .then(function(html) {\n                        container.innerHTML = html;\n                        container.classList.add('loaded');\n                        container.style.display = 'block';\n                    });\n            },\n            fail: function(error) {\n                Notification.exception(error);\n            }\n        }]);\n    };\n    \n    CategoryTree.prototype.updateTriStateCheckboxes = function() {\n        document.querySelectorAll('.category-node').forEach(function(node) {\n            const checkbox = node.querySelector('.category-checkbox');\n            if (!checkbox) {\n                return;\n            }\n            \n            const courses = node.querySelectorAll('.course-checkbox');\n            \n            if (courses.length === 0) {\n                return;\n            }\n            \n            const total = courses.length;\n            let checked = 0;\n            \n            courses.forEach(function(cb) {\n                if (cb.checked) {\n                    checked++;\n                }\n            });\n            \n            if (checked === 0) {\n                checkbox.checked = false;\n                checkbox.indeterminate = false;\n            } else if (checked === total) {\n                checkbox.checked = true;\n                checkbox.indeterminate = false;\n            } else {\n                checkbox.checked = false;\n                checkbox.indeterminate = true;\n            }\n        });\n    };\n    \n    return {\n        init: function() {\n            return new CategoryTree();\n        }\n    };\n});\n"],"names":["define","Ajax","Templates","Notification","CategoryTree","init","prototype","self","this","document","addEventListener","e","target","classList","contains","preventDefault","expandBtn","categoryid","dataset","container","closest","querySelector","style","display","loadCategoryCourses","icon","toggle","checkbox","checked","categoryNode","querySelectorAll","forEach","cb","event","Event","bubbles","dispatchEvent","updateTriStateCheckboxes","call","methodname","args","done","response","render","then","html","innerHTML","add","fail","error","exception","node","courses","length","total","indeterminate"],"mappings":";;;;;;;AAsBAA,4CAAO,CAAC,YAAa,iBAAkB,sBACnC,SAASC,KAAMC,UAAWC,oBAGpBC,aAAe,gBACZC,eAGTD,aAAaE,UAAUD,KAAO,iBACpBE,KAAOC,KAGbC,SAASC,iBAAiB,SAAS,SAASC,MACpCA,EAAEC,OAAOC,UAAUC,SAAS,mBAAoB,CAChDH,EAAEI,uBACIC,UAAYL,EAAEC,OACdK,WAAaD,UAAUE,QAAQD,WAE/BE,UADeH,UAAUI,QAAQ,kBACRC,cAAc,wBAEzCF,UAAW,CACPA,UAAUN,UAAUC,SAAS,UAEG,SAA5BK,UAAUG,MAAMC,SAAuBJ,UAAUG,MAAMC,QAGvDJ,UAAUG,MAAMC,QAAU,OAF1BJ,UAAUG,MAAMC,QAAU,QAK9BhB,KAAKiB,oBAAoBP,WAAYE,iBAInCM,KAAOT,UAAUK,cAAc,KACjCI,OACAA,KAAKZ,UAAUa,OAAO,WACtBD,KAAKZ,UAAUa,OAAO,kBAOtCjB,SAASC,iBAAiB,UAAU,SAASC,MACrCA,EAAEC,OAAOC,UAAUC,SAAS,qBAAsB,OAC5Ca,SAAWhB,EAAEC,OACbgB,QAAUD,SAASC,QACnBC,aAAeF,SAASP,QAAQ,kBAElCS,eAEAA,aAAaC,iBAAiB,oBAAoBC,SAAQ,SAASC,IAC/DA,GAAGJ,QAAUA,cAEPK,MAAQ,IAAIC,MAAM,SAAU,CAAEC,SAAS,IAC7CH,GAAGI,cAAcH,UAIrBJ,aAAaC,iBAAiB,sBAAsBC,SAAQ,SAASC,IAC7DA,KAAOL,WACPK,GAAGJ,QAAUA,sBAQ5BS,4BAGTjC,aAAaE,UAAUkB,oBAAsB,SAASP,WAAYE,WAC9DlB,KAAKqC,KAAK,CAAC,CACPC,WAAY,4CACZC,KAAM,CAACvB,WAAYA,YACnBwB,KAAM,SAASC,UACXxC,UAAUyC,OAAO,mCAAoCD,UAChDE,MAAK,SAASC,MACX1B,UAAU2B,UAAYD,KACtB1B,UAAUN,UAAUkC,IAAI,UACxB5B,UAAUG,MAAMC,QAAU,YAGtCyB,KAAM,SAASC,OACX9C,aAAa+C,UAAUD,YAKnC7C,aAAaE,UAAU+B,yBAA2B,WAC9C5B,SAASqB,iBAAiB,kBAAkBC,SAAQ,SAASoB,YACnDxB,SAAWwB,KAAK9B,cAAc,0BAC/BM,sBAICyB,QAAUD,KAAKrB,iBAAiB,uBAEf,IAAnBsB,QAAQC,oBAINC,MAAQF,QAAQC,WAClBzB,QAAU,EAEdwB,QAAQrB,SAAQ,SAASC,IACjBA,GAAGJ,SACHA,aAIQ,IAAZA,SACAD,SAASC,SAAU,EACnBD,SAAS4B,eAAgB,GAClB3B,UAAY0B,OACnB3B,SAASC,SAAU,EACnBD,SAAS4B,eAAgB,IAEzB5B,SAASC,SAAU,EACnBD,SAAS4B,eAAgB,OAK9B,CACHlD,KAAM,kBACK,IAAID"}