{"version":3,"file":"category_tree.min.js","sources":["../src/category_tree.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Category tree navigation for download center\n *\n * @module     local_downloadcenter/category_tree\n * @copyright  2025 Alonso Arias <soporte@ingeweb.co>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/ajax', 'core/templates', 'core/notification'], \n    function($, Ajax, Templates, Notification) {\n    \n    const CategoryTree = function() {\n        this.init();\n    };\n    \n    CategoryTree.prototype.init = function() {\n        const self = this;\n        \n        // Handle category expansion.\n        $('.category-expand').on('click', function(e) {\n            e.preventDefault();\n            const $this = $(this);\n            const categoryid = $this.data('categoryid');\n            const $container = $this.closest('.category-node').find('.category-courses').first();\n            \n            if ($container.hasClass('loaded')) {\n                $container.slideToggle();\n            } else {\n                self.loadCategoryCourses(categoryid, $container);\n            }\n            \n            $this.find('i').toggleClass('fa-plus fa-minus');\n        });\n        \n        // Handle category checkbox (select all courses).\n        $('.category-checkbox').on('change', function() {\n            const $this = $(this);\n            const checked = $this.is(':checked');\n            const $container = $this.closest('.category-node');\n            \n            // Update all course checkboxes in this category.\n            $container.find('.course-checkbox').prop('checked', checked).trigger('change');\n            \n            // Update subcategory checkboxes.\n            $container.find('.category-checkbox').not(this).prop('checked', checked);\n        });\n        \n        // Initialize tri-state checkboxes.\n        this.updateTriStateCheckboxes();\n    };\n    \n    CategoryTree.prototype.loadCategoryCourses = function(categoryid, $container) {\n        Ajax.call([{\n            methodname: 'local_downloadcenter_get_category_courses',\n            args: {categoryid: categoryid},\n            done: function(response) {\n                Templates.render('local_downloadcenter/course_list', response)\n                    .then(function(html) {\n                        $container.html(html).addClass('loaded').slideDown();\n                    });\n            },\n            fail: function(error) {\n                Notification.exception(error);\n            }\n        }]);\n    };\n    \n    CategoryTree.prototype.updateTriStateCheckboxes = function() {\n        $('.category-node').each(function() {\n            const $node = $(this);\n            const $checkbox = $node.find('.category-checkbox').first();\n            const $courses = $node.find('.course-checkbox');\n            \n            if ($courses.length === 0) {\n                return;\n            }\n            \n            const total = $courses.length;\n            const checked = $courses.filter(':checked').length;\n            \n            if (checked === 0) {\n                $checkbox.prop('checked', false);\n                $checkbox.prop('indeterminate', false);\n            } else if (checked === total) {\n                $checkbox.prop('checked', true);\n                $checkbox.prop('indeterminate', false);\n            } else {\n                $checkbox.prop('checked', false);\n                $checkbox.prop('indeterminate', true);\n            }\n        });\n    };\n    \n    return {\n        init: function() {\n            return new CategoryTree();\n        }\n    };\n});\n"],"names":["define","$","Ajax","Templates","Notification","CategoryTree","init","prototype","self","this","on","e","preventDefault","$this","categoryid","data","$container","closest","find","first","hasClass","slideToggle","loadCategoryCourses","toggleClass","checked","is","prop","trigger","not","updateTriStateCheckboxes","call","methodname","args","done","response","render","then","html","addClass","slideDown","fail","error","exception","each","$node","$checkbox","$courses","length","total","filter"],"mappings":";;;;;;;AAsBAA,4CAAO,CAAC,SAAU,YAAa,iBAAkB,sBAC7C,SAASC,EAAGC,KAAMC,UAAWC,oBAEvBC,aAAe,gBACZC,eAGTD,aAAaE,UAAUD,KAAO,iBACpBE,KAAOC,KAGbR,EAAE,oBAAoBS,GAAG,SAAS,SAASC,GACvCA,EAAEC,uBACIC,MAAQZ,EAAEQ,MACVK,WAAaD,MAAME,KAAK,cACxBC,WAAaH,MAAMI,QAAQ,kBAAkBC,KAAK,qBAAqBC,QAEzEH,WAAWI,SAAS,UACpBJ,WAAWK,cAEXb,KAAKc,oBAAoBR,WAAYE,YAGzCH,MAAMK,KAAK,KAAKK,YAAY,uBAIhCtB,EAAE,sBAAsBS,GAAG,UAAU,iBAC3BG,MAAQZ,EAAEQ,MACVe,QAAUX,MAAMY,GAAG,YACnBT,WAAaH,MAAMI,QAAQ,kBAGjCD,WAAWE,KAAK,oBAAoBQ,KAAK,UAAWF,SAASG,QAAQ,UAGrEX,WAAWE,KAAK,sBAAsBU,IAAInB,MAAMiB,KAAK,UAAWF,iBAI/DK,4BAGTxB,aAAaE,UAAUe,oBAAsB,SAASR,WAAYE,YAC9Dd,KAAK4B,KAAK,CAAC,CACPC,WAAY,4CACZC,KAAM,CAAClB,WAAYA,YACnBmB,KAAM,SAASC,UACX/B,UAAUgC,OAAO,mCAAoCD,UAChDE,MAAK,SAASC,MACXrB,WAAWqB,KAAKA,MAAMC,SAAS,UAAUC,gBAGrDC,KAAM,SAASC,OACXrC,aAAasC,UAAUD,YAKnCpC,aAAaE,UAAUsB,yBAA2B,WAC9C5B,EAAE,kBAAkB0C,MAAK,iBACfC,MAAQ3C,EAAEQ,MACVoC,UAAYD,MAAM1B,KAAK,sBAAsBC,QAC7C2B,SAAWF,MAAM1B,KAAK,uBAEJ,IAApB4B,SAASC,oBAIPC,MAAQF,SAASC,OACjBvB,QAAUsB,SAASG,OAAO,YAAYF,OAE5B,IAAZvB,SACAqB,UAAUnB,KAAK,WAAW,GAC1BmB,UAAUnB,KAAK,iBAAiB,IACzBF,UAAYwB,OACnBH,UAAUnB,KAAK,WAAW,GAC1BmB,UAAUnB,KAAK,iBAAiB,KAEhCmB,UAAUnB,KAAK,WAAW,GAC1BmB,UAAUnB,KAAK,iBAAiB,QAKrC,CACHpB,KAAM,kBACK,IAAID"}